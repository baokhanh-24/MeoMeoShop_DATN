================================================================================
                    PH√ÇN T√çCH CHI TI·∫æT LOGIC NGHI·ªÜP V·ª§ C√ÅC M√ÄN H√åNH
                              H·ªÜ TH·ªêNG MEOMEOSHOP
================================================================================

üìã T·ªîNG QUAN LOGIC NGHI·ªÜP V·ª§
================================================================================

H·ªá th·ªëng MeoMeoShop ƒë∆∞·ª£c thi·∫øt k·∫ø v·ªõi logic nghi·ªáp v·ª• ph·ª©c t·∫°p v√† to√†n di·ªán, bao g·ªìm:

üè™ **QU·∫¢N L√ù S·∫¢N PH·∫®M**:
- Qu·∫£n l√Ω s·∫£n ph·∫©m v·ªõi nhi·ªÅu bi·∫øn th·ªÉ (K√≠ch th∆∞·ªõc + M√†u s·∫Øc)
- H·ªá th·ªëng ph√¢n lo·∫°i s·∫£n ph·∫©m theo danh m·ª•c, th∆∞∆°ng hi·ªáu, ch·∫•t li·ªáu, m√πa
- Qu·∫£n l√Ω h√¨nh ·∫£nh v√† video s·∫£n ph·∫©m
- T√≠nh to√°n gi√° c·∫£ v√† khuy·∫øn m√£i ƒë·ªông
- Qu·∫£n l√Ω t·ªìn kho v√† c·∫£nh b√°o h·∫øt h√†ng

üõí **QU·∫¢N L√ù ƒê∆†N H√ÄNG**:
- Workflow ƒë∆°n h√†ng ph·ª©c t·∫°p v·ªõi nhi·ªÅu tr·∫°ng th√°i
- X·ª≠ l√Ω ƒë∆°n h√†ng online v√† t·∫°i qu·∫ßy
- T√≠ch h·ª£p thanh to√°n ƒëa d·∫°ng (Ti·ªÅn m·∫∑t, Chuy·ªÉn kho·∫£n, VnPay)
- Qu·∫£n l√Ω v·∫≠n chuy·ªÉn v√† theo d√µi ƒë∆°n h√†ng
- X·ª≠ l√Ω ho√†n tr·∫£ v√† ƒë·ªïi h√†ng

üì¶ **QU·∫¢N L√ù T·ªíN KHO**:
- Nh·∫≠p h√†ng theo l√¥ v·ªõi m√£ v·∫°ch
- Theo d√µi t·ªìn kho theo t·ª´ng bi·∫øn th·ªÉ s·∫£n ph·∫©m
- C·∫£nh b√°o h·∫øt h√†ng v√† h√†ng t·ªìn kho
- Th·ªëng k√™ gi√° tr·ªã t·ªìn kho

üéÅ **H·ªÜ TH·ªêNG KHUY·∫æN M√ÉI**:
- Ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i theo s·∫£n ph·∫©m
- M√£ gi·∫£m gi√° v·ªõi ƒëi·ªÅu ki·ªán s·ª≠ d·ª•ng
- T√≠nh to√°n gi√° sau gi·∫£m gi√° t·ª± ƒë·ªông
- Theo d√µi hi·ªáu qu·∫£ khuy·∫øn m√£i

‚≠ê **QU·∫¢N L√ù ƒê√ÅNH GI√Å**:
- H·ªá th·ªëng ƒë√°nh gi√° s·∫£n ph·∫©m t·ª´ kh√°ch h√†ng
- Upload h√¨nh ·∫£nh v√† video ƒë√°nh gi√°
- Ph·∫£n h·ªìi t·ª´ qu·∫£n tr·ªã vi√™n
- Th·ªëng k√™ ƒëi·ªÉm ƒë√°nh gi√° trung b√¨nh

üöö **T√çCH H·ª¢P V·∫¨N CHUY·ªÇN**:
- T√≠ch h·ª£p API GHN ƒë·ªÉ t√≠nh ph√≠ v·∫≠n chuy·ªÉn
- Qu·∫£n l√Ω ƒë·ªãa ch·ªâ giao h√†ng
- Theo d√µi tr·∫°ng th√°i v·∫≠n chuy·ªÉn
- T√≠nh to√°n ph√≠ v·∫≠n chuy·ªÉn theo k√≠ch th∆∞·ªõc v√† tr·ªçng l∆∞·ª£ng

üéØ LOGIC NGHI·ªÜP V·ª§ C√ÅC M√ÄN H√åNH CMS
================================================================================

üìå 1. DASHBOARD & TH·ªêNG K√ä
--------------------------------------------------------------------------------

**Home.razor - Trang Ch·ªß Qu·∫£n Tr·ªã**
- **Logic T·∫£i D·ªØ Li·ªáu Th·ªëng K√™**:
  * G·ªçi API `IStatisticsClientService.GetDashboardStatisticsAsync()` ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ªïng quan
  * Truy·ªÅn `StatisticsRequestDTO` v·ªõi c√°c tham s·ªë: kho·∫£ng th·ªùi gian, ng√†y b·∫Øt ƒë·∫ßu, ng√†y k·∫øt th√∫c
  * Hi·ªÉn th·ªã d·ªØ li·ªáu th·ªùi gian th·ª±c v·ªõi t√≠nh nƒÉng t·ª± ƒë·ªông l√†m m·ªõi
  * X·ª≠ l√Ω l·ªói khi kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu v√† hi·ªÉn th·ªã th√¥ng b√°o ph√π h·ª£p

- **Logic T√≠nh To√°n C√°c Ch·ªâ S·ªë Kinh Doanh**:
  * **Doanh thu h√¥m nay**: T√≠nh t·ªïng gi√° tr·ªã ƒë∆°n h√†ng th√†nh c√¥ng trong ng√†y
    - C√¥ng th·ª©c: SUM(TotalPrice) WHERE CreationDate = Today AND Status = Completed
    - Hi·ªÉn th·ªã ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá Vi·ªát Nam (VNƒê)
  * **S·ªë ƒë∆°n h√†ng h√¥m nay**: ƒê·∫øm t·ªïng s·ªë ƒë∆°n h√†ng ƒë∆∞·ª£c t·∫°o trong ng√†y
    - C√¥ng th·ª©c: COUNT(*) WHERE CreationDate = Today
    - Bao g·ªìm c·∫£ ƒë∆°n h√†ng online v√† t·∫°i qu·∫ßy
  * **Kh√°ch h√†ng m·ªõi**: ƒê·∫øm s·ªë kh√°ch h√†ng ƒëƒÉng k√Ω trong ng√†y
    - C√¥ng th·ª©c: COUNT(*) WHERE CreationDate = Today AND Status = Enabled
    - Lo·∫°i tr·ª´ t√†i kho·∫£n b·ªã kh√≥a ho·∫∑c v√¥ hi·ªáu h√≥a
  * **ƒê∆°n h√†ng ch·ªù x√°c nh·∫≠n**: ƒê·∫øm s·ªë ƒë∆°n h√†ng ƒëang ch·ªù x·ª≠ l√Ω
    - C√¥ng th·ª©c: COUNT(*) WHERE Status = Pending
    - C·∫≠p nh·∫≠t real-time khi c√≥ ƒë∆°n h√†ng m·ªõi

- **Logic Hi·ªÉn Th·ªã Bi·ªÉu ƒê·ªì V√† Th·ªëng K√™**:
  * **Bi·ªÉu ƒë·ªì doanh thu theo th·ªùi gian**: 
    - Nh√≥m d·ªØ li·ªáu theo ng√†y/tu·∫ßn/th√°ng t√πy theo l·ª±a ch·ªçn
    - Hi·ªÉn th·ªã xu h∆∞·ªõng tƒÉng tr∆∞·ªüng doanh thu
    - So s√°nh v·ªõi c√°c k·ª≥ tr∆∞·ªõc
  * **S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t**:
    - S·∫Øp x·∫øp theo s·ªë l∆∞·ª£ng b√°n ra (QuantitySold DESC)
    - Hi·ªÉn th·ªã top 10 s·∫£n ph·∫©m ph·ªï bi·∫øn nh·∫•t
    - Bao g·ªìm h√¨nh ·∫£nh v√† th√¥ng tin c∆° b·∫£n
  * **Ph√¢n b·ªë tr·∫°ng th√°i ƒë∆°n h√†ng**:
    - Nh√≥m ƒë∆°n h√†ng theo c√°c tr·∫°ng th√°i: Pending, Confirmed, InTransit, Completed, Canceled
    - Hi·ªÉn th·ªã t·ª∑ l·ªá ph·∫ßn trƒÉm c·ªßa t·ª´ng tr·∫°ng th√°i
    - C·∫£nh b√°o khi t·ª∑ l·ªá h·ªßy ƒë∆°n cao b·∫•t th∆∞·ªùng
  * **T√¨nh tr·∫°ng t·ªìn kho**:
    - Nh√≥m s·∫£n ph·∫©m theo m·ª©c t·ªìn kho: ƒê·ªß h√†ng, S·∫Øp h·∫øt h√†ng, H·∫øt h√†ng
    - C·∫£nh b√°o s·∫£n ph·∫©m c·∫ßn nh·∫≠p th√™m
    - T√≠nh t·ªïng gi√° tr·ªã t·ªìn kho hi·ªán t·∫°i

**Login.razor - ƒêƒÉng Nh·∫≠p H·ªá Th·ªëng Qu·∫£n Tr·ªã**
- **Logic X√°c Th·ª±c Ng∆∞·ªùi D√πng**:
  * **Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa form**: 
    - Validate c√°c tr∆∞·ªùng b·∫Øt bu·ªôc: T√™n ƒëƒÉng nh·∫≠p v√† M·∫≠t kh·∫©u
    - Ki·ªÉm tra ƒë·ªãnh d·∫°ng t√™n ƒëƒÉng nh·∫≠p (kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng)
    - Ki·ªÉm tra ƒë·ªô d√†i m·∫≠t kh·∫©u t·ªëi thi·ªÉu
  * **G·ªçi API x√°c th·ª±c**: 
    - S·ª≠ d·ª•ng `ICMSAuthService.LoginAsync(loginModel)` ƒë·ªÉ x√°c th·ª±c
    - Truy·ªÅn th√¥ng tin ƒëƒÉng nh·∫≠p d∆∞·ªõi d·∫°ng `AuthenRequest`
    - X·ª≠ l√Ω response v√† ki·ªÉm tra `ResponseStatus == Success`
  * **X·ª≠ l√Ω l·ªói ƒëƒÉng nh·∫≠p**:
    - Hi·ªÉn th·ªã th√¥ng b√°o l·ªói c·ª• th·ªÉ khi ƒëƒÉng nh·∫≠p th·∫•t b·∫°i
    - Clear form khi c√≥ l·ªói ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p l·∫°i
    - Log l·ªói ƒë·ªÉ debug v√† theo d√µi

- **Logic Ph√¢n Quy·ªÅn Truy C·∫≠p**:
  * **Ki·ªÉm tra vai tr√≤ ng∆∞·ªùi d√πng**: 
    - L·∫•y danh s√°ch vai tr√≤: `AuthService.GetUserRolesAsync()`
    - Ch·ªâ cho ph√©p Admin v√† Employee ƒëƒÉng nh·∫≠p v√†o CMS
    - Ki·ªÉm tra quy·ªÅn truy c·∫≠p c√°c ch·ª©c nƒÉng c·ª• th·ªÉ
  * **X·ª≠ l√Ω khi kh√¥ng c√≥ quy·ªÅn**: 
    - Clear tokens v√† session khi ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn
    - Hi·ªÉn th·ªã th√¥ng b√°o l·ªói ph√π h·ª£p
    - Redirect v·ªÅ trang ƒëƒÉng nh·∫≠p ho·∫∑c trang ch·ªß

- **Logic Qu·∫£n L√Ω Tr·∫°ng Th√°i Phi√™n L√†m Vi·ªác**:
  * **Th√¥ng b√°o tr·∫°ng th√°i x√°c th·ª±c**: 
    - Notify `CMSAuthStateProvider` khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
    - C·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c th·ª±c trong to√†n b·ªô ·ª©ng d·ª•ng
    - Trigger re-render c·ªßa c√°c component ph·ª• thu·ªôc
  * **C·∫≠p nh·∫≠t giao di·ªán**: 
    - Force UI update v·ªõi `StateHasChanged()`
    - Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
    - ·∫®n/hi·ªán c√°c menu v√† ch·ª©c nƒÉng theo quy·ªÅn
  * **Chuy·ªÉn h∆∞·ªõng sau ƒëƒÉng nh·∫≠p**: 
    - Redirect v·ªÅ trang ch·ªß "/" v·ªõi `forceLoad: true`
    - L∆∞u URL tr∆∞·ªõc ƒë√≥ ƒë·ªÉ redirect v·ªÅ sau khi ƒëƒÉng nh·∫≠p
    - X·ª≠ l√Ω deep linking v√† bookmark

üìå 2. QU·∫¢N L√ù S·∫¢N PH·∫®M
--------------------------------------------------------------------------------

**ProductPages/Product.razor - Qu·∫£n L√Ω Danh S√°ch S·∫£n Ph·∫©m**
- **Logic L·ªçc V√† T√¨m Ki·∫øm S·∫£n Ph·∫©m**:
  * **T√¨m ki·∫øm theo t√™n s·∫£n ph·∫©m**: 
    - S·ª≠ d·ª•ng LIKE search tr√™n tr∆∞·ªùng Product.Name
    - H·ªó tr·ª£ t√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
    - T√¨m ki·∫øm theo t·ª´ kh√≥a m·ªôt ph·∫ßn (partial match)
    - Hi·ªÉn th·ªã k·∫øt qu·∫£ real-time khi ng∆∞·ªùi d√πng nh·∫≠p
  * **L·ªçc theo th∆∞∆°ng hi·ªáu**: 
    - Dropdown ch·ªçn th∆∞∆°ng hi·ªáu t·ª´ danh s√°ch c√≥ s·∫µn
    - WHERE BrandId = selectedBrandId
    - Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng s·∫£n ph·∫©m c·ªßa t·ª´ng th∆∞∆°ng hi·ªáu
  * **L·ªçc theo danh m·ª•c**: 
    - JOIN v·ªõi b·∫£ng ProductCategory ƒë·ªÉ l·ªçc theo danh m·ª•c
    - H·ªó tr·ª£ l·ªçc theo nhi·ªÅu danh m·ª•c c√πng l√∫c
    - Hi·ªÉn th·ªã c√¢y danh m·ª•c ph√¢n c·∫•p
  * **L·ªçc theo k√≠ch th∆∞·ªõc**: 
    - JOIN v·ªõi ProductDetail WHERE SizeId = selectedSizeId
    - Hi·ªÉn th·ªã c√°c k√≠ch th∆∞·ªõc c√≥ s·∫µn cho t·ª´ng s·∫£n ph·∫©m
    - L·ªçc theo k√≠ch th∆∞·ªõc c·ª• th·ªÉ ho·∫∑c t·∫•t c·∫£ k√≠ch th∆∞·ªõc
  * **L·ªçc theo kho·∫£ng gi√°**: 
    - WHERE Price BETWEEN MinPrice AND MaxPrice
    - Slider ƒë·ªÉ ch·ªçn kho·∫£ng gi√° tr·ª±c quan
    - Hi·ªÉn th·ªã gi√° trung b√¨nh v√† gi√° cao nh·∫•t/th·∫•p nh·∫•t
  * **L·ªçc theo tr·∫°ng th√°i s·∫£n ph·∫©m**: 
    - WHERE ProductDetail.Status = selectedStatus
    - C√°c tr·∫°ng th√°i: ƒêang b√°n, T·∫°m ng∆∞ng, Ch·ªù duy·ªát, Nh√°p
    - Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng s·∫£n ph·∫©m theo t·ª´ng tr·∫°ng th√°i

- **Logic S·∫Øp X·∫øp D·ªØ Li·ªáu**:
  * **C√°c tr∆∞·ªùng s·∫Øp x·∫øp**: 
    - CreationTime: Th·ªùi gian t·∫°o s·∫£n ph·∫©m
    - Name: T√™n s·∫£n ph·∫©m (A-Z ho·∫∑c Z-A)
    - Price: Gi√° s·∫£n ph·∫©m (th·∫•p ƒë·∫øn cao ho·∫∑c cao ƒë·∫øn th·∫•p)
    - SellNumber: S·ªë l∆∞·ª£ng ƒë√£ b√°n
    - ViewNumber: S·ªë l∆∞·ª£t xem
  * **H∆∞·ªõng s·∫Øp x·∫øp**: 
    - ASC: S·∫Øp x·∫øp tƒÉng d·∫ßn
    - DESC: S·∫Øp x·∫øp gi·∫£m d·∫ßn
    - M·∫∑c ƒë·ªãnh s·∫Øp x·∫øp theo th·ªùi gian t·∫°o m·ªõi nh·∫•t
  * **√Åp d·ª•ng s·∫Øp x·∫øp**: 
    - S·∫Øp x·∫øp tr√™n c·∫£ Product v√† ProductDetail level
    - Gi·ªØ nguy√™n th·ª© t·ª± khi thay ƒë·ªïi trang
    - C·∫≠p nh·∫≠t URL ƒë·ªÉ bookmark ƒë∆∞·ª£c tr·∫°ng th√°i s·∫Øp x·∫øp

- **Logic Thao T√°c H√†ng Lo·∫°t**:
  * **Ki·ªÉm tra t√≠nh h·ª£p l·ªá**: 
    - Validate selectedRows kh√¥ng empty tr∆∞·ªõc khi th·ª±c hi·ªán
    - Hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu ch∆∞a ch·ªçn s·∫£n ph·∫©m n√†o
    - Cho ph√©p ch·ªçn t·∫•t c·∫£ s·∫£n ph·∫©m tr√™n trang hi·ªán t·∫°i
  * **C·∫≠p nh·∫≠t tr·∫°ng th√°i h√†ng lo·∫°t**: 
    - Loop qua t·ª´ng product ƒë√£ ch·ªçn
    - G·ªçi `UpdateProductVariantStatusAsync()` cho t·ª´ng s·∫£n ph·∫©m
    - Update t·∫•t c·∫£ variants c·ªßa product v·ªõi status m·ªõi
    - Hi·ªÉn th·ªã progress bar khi ƒëang x·ª≠ l√Ω
  * **X·ª≠ l√Ω l·ªói**: 
    - Ti·∫øp t·ª•c x·ª≠ l√Ω c√°c s·∫£n ph·∫©m kh√°c n·∫øu m·ªôt s·∫£n ph·∫©m b·ªã l·ªói
    - Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m th√†nh c√¥ng v√† th·∫•t b·∫°i
    - Log chi ti·∫øt l·ªói ƒë·ªÉ debug

- **Logic M·ªü R·ªông/Thu G·ªçn Chi Ti·∫øt**:
  * **Ki·ªÉm tra kh·∫£ nƒÉng m·ªü r·ªông**: 
    - `IsRowExpandable()`: Check ProductVariants.Any()
    - Ch·ªâ hi·ªÉn th·ªã n√∫t m·ªü r·ªông khi s·∫£n ph·∫©m c√≥ bi·∫øn th·ªÉ
    - Disable n√∫t m·ªü r·ªông cho s·∫£n ph·∫©m ch∆∞a c√≥ bi·∫øn th·ªÉ
  * **Hi·ªÉn th·ªã chi ti·∫øt bi·∫øn th·ªÉ**: 
    - ExpandTemplate: Hi·ªÉn th·ªã table ProductVariants v·ªõi full details
    - Bao g·ªìm: M√†u s·∫Øc, K√≠ch th∆∞·ªõc, Gi√°, T·ªìn kho, Tr·∫°ng th√°i
    - Cho ph√©p ch·ªânh s·ª≠a tr·ª±c ti·∫øp trong b·∫£ng m·ªü r·ªông
  * **Qu·∫£n l√Ω tr·∫°ng th√°i m·ªü r·ªông**: 
    - L∆∞u tr·∫°ng th√°i m·ªü r·ªông c·ªßa t·ª´ng h√†ng
    - H·ªó tr·ª£ m·ªü r·ªông t·∫•t c·∫£ ho·∫∑c thu g·ªçn t·∫•t c·∫£
    - Gi·ªØ nguy√™n tr·∫°ng th√°i khi ph√¢n trang

- **Logic T·∫°o M√£ QR S·∫£n Ph·∫©m**:
  * **Ki·ªÉm tra ƒëi·ªÅu ki·ªán**: 
    - Validate SKU exists v√† kh√¥ng null
    - Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o database
    - Hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu s·∫£n ph·∫©m ch∆∞a c√≥ SKU
  * **T·∫°o d·ªØ li·ªáu QR Code**: 
    - T·∫°o `ProductSearchResponseDTO` v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin s·∫£n ph·∫©m
    - Bao g·ªìm: T√™n s·∫£n ph·∫©m, Gi√°, Th∆∞∆°ng hi·ªáu, M√¥ t·∫£, H√¨nh ·∫£nh
    - Encode th√¥ng tin th√†nh URL ƒë·ªÉ qu√©t QR
  * **Hi·ªÉn th·ªã QR Code**: 
    - Modal hi·ªÉn th·ªã QR Code v·ªõi k√≠ch th∆∞·ªõc ph√π h·ª£p
    - Cho ph√©p download QR Code d∆∞·ªõi d·∫°ng h√¨nh ·∫£nh
    - Hi·ªÉn th·ªã th√¥ng tin s·∫£n ph·∫©m b√™n c·∫°nh QR Code

**ProductPages/CreateOrUpdateProduct.razor - T·∫°o M·ªõi/C·∫≠p Nh·∫≠t S·∫£n Ph·∫©m**
- **Logic Ki·ªÉm Tra T√≠nh H·ª£p L·ªá Form**:
  * **C√°c tr∆∞·ªùng b·∫Øt bu·ªôc**: 
    - Name: T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng
    - BrandId: Ph·∫£i ch·ªçn th∆∞∆°ng hi·ªáu
    - CategoryIds: Ph·∫£i ch·ªçn √≠t nh·∫•t m·ªôt danh m·ª•c
    - SeasonIds: Ph·∫£i ch·ªçn √≠t nh·∫•t m·ªôt m√πa
    - MaterialIds: Ph·∫£i ch·ªçn √≠t nh·∫•t m·ªôt ch·∫•t li·ªáu
  * **Ki·ªÉm tra media upload**: 
    - Validate √≠t nh·∫•t 1 ·∫£nh ƒë∆∞·ª£c upload
    - Ki·ªÉm tra ƒë·ªãnh d·∫°ng file h·ª£p l·ªá (image/*, video/*)
    - Validate k√≠ch th∆∞·ªõc file kh√¥ng v∆∞·ª£t qu√° gi·ªõi h·∫°n
  * **Ki·ªÉm tra bi·∫øn th·ªÉ s·∫£n ph·∫©m**: 
    - Validate √≠t nh·∫•t 1 bi·∫øn th·ªÉ ƒë∆∞·ª£c t·∫°o
    - Ki·ªÉm tra kh√¥ng c√≥ bi·∫øn th·ªÉ tr√πng l·∫∑p (c√πng m√†u + k√≠ch th∆∞·ªõc)
    - Validate th√¥ng tin v·∫≠n chuy·ªÉn cho t·ª´ng bi·∫øn th·ªÉ

- **Logic Upload Media (H√¨nh ·∫¢nh/Video)**:
  * **Ch·∫•p nh·∫≠n ƒë·ªãnh d·∫°ng file**: 
    - Accept: image/* (jpg, png, gif, webp)
    - Accept: video/* (mp4, avi, mov)
    - Reject c√°c ƒë·ªãnh d·∫°ng kh√¥ng h·ªó tr·ª£
  * **Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng**: 
    - T·ªëi ƒëa 8 h√¨nh ·∫£nh
    - T·ªëi ƒëa 2 video
    - T·ªïng dung l∆∞·ª£ng kh√¥ng qu√° 10MB
  * **X·ª≠ l√Ω file upload**: 
    - Convert file th√†nh Base64 ƒë·ªÉ preview
    - Hi·ªÉn th·ªã thumbnail v√† progress bar
    - Validate k√≠ch th∆∞·ªõc v√† ƒë·ªãnh d·∫°ng tr∆∞·ªõc khi upload
  * **Chuy·ªÉn ƒë·ªïi khi l∆∞u**: 
    - Convert Base64 to FormFile khi g·ªçi API
    - T·ªëi ∆∞u h√≥a h√¨nh ·∫£nh tr∆∞·ªõc khi l∆∞u
    - L∆∞u metadata c·ªßa file (t√™n, k√≠ch th∆∞·ªõc, lo·∫°i)

- **Logic Qu·∫£n L√Ω Bi·∫øn Th·ªÉ S·∫£n Ph·∫©m**:
  * **Th√™m bi·∫øn th·ªÉ m·ªõi**: 
    - `AddVariant()`: Check duplicate (ColorId + SizeId)
    - Validate m√†u s·∫Øc v√† k√≠ch th∆∞·ªõc ƒë√£ ƒë∆∞·ª£c ch·ªçn
    - T·∫°o SKU t·ª± ƒë·ªông d·ª±a tr√™n ProductId + ColorId + SizeId
  * **Gi√° tr·ªã m·∫∑c ƒë·ªãnh**: 
    - Price: 100,000 VNƒê
    - OutOfStock: 5 (c·∫£nh b√°o khi c√≤n 5 s·∫£n ph·∫©m)
    - Weight: 500g (tr·ªçng l∆∞·ª£ng m·∫∑c ƒë·ªãnh)
    - Dimensions: 15x15x15cm (k√≠ch th∆∞·ªõc m·∫∑c ƒë·ªãnh)
    - ClosureType: LaceUp (ki·ªÉu ƒë√≥ng gi√†y)
    - AllowReturn: true (cho ph√©p ƒë·ªïi tr·∫£)
    - Status: Draft (tr·∫°ng th√°i nh√°p)
  * **X√≥a bi·∫øn th·ªÉ**: 
    - `RemoveVariant()`: Check dependencies (Orders, Cart, Promotions)
    - Validate kh√¥ng th·ªÉ x√≥a bi·∫øn th·ªÉ cu·ªëi c√πng
    - Ki·ªÉm tra bi·∫øn th·ªÉ ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong ƒë∆°n h√†ng
    - Hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu c√≥ r√†ng bu·ªôc d·ªØ li·ªáu

- **Logic Quy Tr√¨nh L∆∞u S·∫£n Ph·∫©m**:
  * **Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu binding**: 
    - Convert categoryIdsBinding ‚Üí CategoryIds (List<Guid>)
    - Convert seasonIdsBinding ‚Üí SeasonIds (List<Guid>)
    - Convert materialIdsBinding ‚Üí MaterialIds (List<Guid>)
  * **X·ª≠ l√Ω tr·∫°ng th√°i bi·∫øn th·ªÉ**: 
    - S·∫£n ph·∫©m m·ªõi: Set t·∫•t c·∫£ variants v·ªÅ Draft
    - S·∫£n ph·∫©m c≈©: Gi·ªØ nguy√™n tr·∫°ng th√°i ƒë√£ ch·ªçn
    - Validate tr·∫°ng th√°i h·ª£p l·ªá tr∆∞·ªõc khi l∆∞u
  * **Ki·ªÉm tra th√¥ng tin v·∫≠n chuy·ªÉn**: 
    - Weight: 1-50000g (1g ƒë·∫øn 50kg)
    - Length: 1-200cm (1cm ƒë·∫øn 2m)
    - Width: 1-200cm (1cm ƒë·∫øn 2m)
    - Height: 1-200cm (1cm ƒë·∫øn 2m)
  * **Ki·ªÉm tra gi·ªõi h·∫°n mua h√†ng**: 
    - MaxBuyPerOrder: 1-999 ho·∫∑c null (kh√¥ng gi·ªõi h·∫°n)
    - Validate kh√¥ng √¢m v√† kh√¥ng qu√° l·ªõn
  * **G·ªçi API l∆∞u d·ªØ li·ªáu**: 
    - CreateProductAsync() cho s·∫£n ph·∫©m m·ªõi
    - UpdateProductAsync() cho s·∫£n ph·∫©m c≈©
    - X·ª≠ l√Ω response v√† hi·ªÉn th·ªã th√¥ng b√°o k·∫øt qu·∫£

**ProductPages/DetailProductView.razor - Chi Ti·∫øt S·∫£n Ph·∫©m**
- **Logic Load Data**:
  * `GetProductByIdAsync(productId)` v·ªõi full details
  * Load ProductVariants v·ªõi InventoryQuantity
  * Load Media files v·ªõi ImageUrl
  * Load CategoryNames, MaterialNames, SeasonNames
- **Logic Display**:
  * Hi·ªÉn th·ªã t·∫•t c·∫£ variants trong table
  * Show stock status: Available/OutOfStock
  * Show price range: MinPrice - MaxPrice
  * Show sales statistics: SellNumber, ViewNumber

üìå 3. QU·∫¢N L√ù ƒê∆†N H√ÄNG
--------------------------------------------------------------------------------

**OrderPages/OrderList.razor - Qu·∫£n L√Ω Danh S√°ch ƒê∆°n H√†ng**
- **Logic L·ªçc V√† T√¨m Ki·∫øm ƒê∆°n H√†ng**:
  * **T√¨m ki·∫øm theo m√£ ƒë∆°n h√†ng**: 
    - LIKE search tr√™n tr∆∞·ªùng Order.Code
    - H·ªó tr·ª£ t√¨m ki·∫øm m·ªôt ph·∫ßn m√£ ƒë∆°n h√†ng
    - Hi·ªÉn th·ªã k·∫øt qu·∫£ real-time khi nh·∫≠p
  * **T√¨m ki·∫øm theo th√¥ng tin kh√°ch h√†ng**: 
    - CustomerNameFilter: LIKE search tr√™n Customer.Name
    - CustomerPhoneFilter: LIKE search tr√™n Customer.PhoneNumber
    - H·ªó tr·ª£ t√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
  * **L·ªçc theo kho·∫£ng th·ªùi gian**: 
    - DateRange: WHERE CreationTime BETWEEN StartDate AND EndDate
    - C√°c kho·∫£ng th·ªùi gian c√≥ s·∫µn: H√¥m nay, Tu·∫ßn n√†y, Th√°ng n√†y, T√πy ch·ªânh
    - Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng ƒë∆°n h√†ng trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn
  * **L·ªçc theo ph∆∞∆°ng th·ª©c thanh to√°n**: 
    - PaymentMethodFilter: WHERE PaymentMethod = selectedMethod
    - C√°c ph∆∞∆°ng th·ª©c: Ti·ªÅn m·∫∑t, Chuy·ªÉn kho·∫£n, VnPay
  * **L·ªçc theo tr·∫°ng th√°i ƒë∆°n h√†ng**: 
    - StatusFilter: WHERE Status = selectedStatus
    - C√°c tr·∫°ng th√°i: Ch·ªù x√°c nh·∫≠n, ƒê√£ x√°c nh·∫≠n, ƒêang giao, Ho√†n th√†nh, ƒê√£ h·ªßy

- **Logic Qu·∫£n L√Ω Tab Tr·∫°ng Th√°i**:
  * **Tab T·∫•t C·∫£**: 
    - Kh√¥ng filter theo status
    - Hi·ªÉn th·ªã t·ªïng s·ªë ƒë∆°n h√†ng
    - Cho ph√©p xem t·∫•t c·∫£ ƒë∆°n h√†ng trong h·ªá th·ªëng
  * **Tab Tr·∫°ng Th√°i C·ª• Th·ªÉ**: 
    - Filter theo EOrderStatus t∆∞∆°ng ·ª©ng
    - Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng ƒë∆°n h√†ng cho t·ª´ng tab
    - C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng real-time khi c√≥ thay ƒë·ªïi
  * **C·∫≠p nh·∫≠t metadata**: 
    - ƒê·∫øm s·ªë l∆∞·ª£ng ƒë∆°n h√†ng cho m·ªói tab
    - Hi·ªÉn th·ªã badge s·ªë l∆∞·ª£ng tr√™n tab
    - Refresh s·ªë l∆∞·ª£ng khi c√≥ ƒë∆°n h√†ng m·ªõi

- **Logic Thao T√°c H√†ng Lo·∫°t**:
  * **Ki·ªÉm tra t√≠nh h·ª£p l·ªá**: 
    - Validate selectedRows kh√¥ng empty
    - Hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu ch∆∞a ch·ªçn ƒë∆°n h√†ng
    - Cho ph√©p ch·ªçn t·∫•t c·∫£ ƒë∆°n h√†ng tr√™n trang
  * **Ki·ªÉm tra tr·∫°ng th√°i hi·ªán t·∫°i**: 
    - Ch·ªâ hi·ªÉn th·ªã actions ph√π h·ª£p v·ªõi tr·∫°ng th√°i:
      - Pending ‚Üí X√°c nh·∫≠n, H·ªßy ƒë∆°n
      - Confirmed ‚Üí Giao h√†ng, H·ªßy ƒë∆°n
      - InTransit ‚Üí Ho√†n th√†nh, H·ªßy ƒë∆°n
      - PendingReturn ‚Üí Ch·∫•p nh·∫≠n ho√†n tr·∫£, T·ª´ ch·ªëi ho√†n tr·∫£
  * **X·ª≠ l√Ω c·∫≠p nh·∫≠t tr·∫°ng th√°i**: 
    - `UpdateStatusOrderAsync()` v·ªõi danh s√°ch OrderIds
    - Validate business rules (kh√¥ng th·ªÉ chuy·ªÉn t·ª´ Completed v·ªÅ Pending)
    - Log l√Ω do khi h·ªßy ƒë∆°n h√†ng
    - C·∫≠p nh·∫≠t OrderHistory v·ªõi chi ti·∫øt h√†nh ƒë·ªông

- **Logic M·ªü R·ªông Chi Ti·∫øt ƒê∆°n H√†ng**:
  * **T·∫£i chi ti·∫øt ƒë∆°n h√†ng**: 
    - Load OrderDetails v·ªõi ProductName, SKU, Quantity, Price
    - Hi·ªÉn th·ªã th√¥ng tin ƒë·ªãa ch·ªâ giao h√†ng
    - T√≠nh to√°n t·ªïng ti·ªÅn: Subtotal, ShippingFee, DiscountPrice, TotalPrice
  * **Hi·ªÉn th·ªã th√¥ng tin s·∫£n ph·∫©m**: 
    - T√™n s·∫£n ph·∫©m v√† bi·∫øn th·ªÉ (m√†u s·∫Øc, k√≠ch th∆∞·ªõc)
    - Gi√° g·ªëc v√† gi√° sau gi·∫£m gi√°
    - S·ªë l∆∞·ª£ng v√† t·ªïng ti·ªÅn t·ª´ng s·∫£n ph·∫©m
  * **Th√¥ng tin v·∫≠n chuy·ªÉn**: 
    - ƒê·ªãa ch·ªâ giao h√†ng ƒë·∫ßy ƒë·ªß
    - Ph√≠ v·∫≠n chuy·ªÉn v√† ph∆∞∆°ng th·ª©c thanh to√°n
    - Th·ªùi gian giao h√†ng d·ª± ki·∫øn

**OrderPages/OrderDetail.razor - Chi Ti·∫øt ƒê∆°n H√†ng**
- **Logic Load Data**:
  * `GetOrderByIdAsync(orderId)` v·ªõi full details
  * Load OrderDetails v·ªõi ProductDetail info
  * Load OrderHistory v·ªõi timeline
  * Load Customer info v√† DeliveryAddress
- **Logic Status Management**:
  * Show current status v·ªõi color coding
  * Enable/disable actions based on current status
  * Validate status transitions theo business rules
- **Logic History Tracking**:
  * Log m·ªçi thay ƒë·ªïi status
  * Show timestamp v√† user th·ª±c hi·ªán
  * Display reason cho Cancel/Reject actions

**OrderPages/OrderAtCounter.razor - ƒê∆°n H√†ng T·∫°i Qu·∫ßy**
- **Logic Product Search**:
  * Search by SKU: Exact match
  * Search by Name: LIKE search
  * Filter ch·ªâ s·∫£n ph·∫©m ƒëang b√°n (Status = Selling)
- **Logic Cart Management**:
  * Add product v·ªõi quantity
  * Update quantity v·ªõi validation
  * Remove product kh·ªèi cart
  * Calculate totals real-time
- **Logic Checkout**:
  * Validate cart kh√¥ng empty
  * Select payment method: Cash/Transfer
  * Create order v·ªõi OrderType = Store
  * Generate order code t·ª± ƒë·ªông

üìå 4. QU·∫¢N L√ù KH√ÅCH H√ÄNG
--------------------------------------------------------------------------------

**CustomerPages/Customer.razor - Danh S√°ch Kh√°ch H√†ng**
- **Logic Filtering**:
  * NameFilter: LIKE search tr√™n Customer.Name
  * PhoneFilter: LIKE search tr√™n Customer.PhoneNumber
  * EmailFilter: LIKE search tr√™n Customer.Email
  * StatusFilter: WHERE Status = selectedStatus
- **Logic Status Management**:
  * Enable/Disable customer account
  * Lock customer account (t·∫°m kh√≥a)
  * Validate kh√¥ng th·ªÉ disable customer c√≥ ƒë∆°n h√†ng pending
- **Logic Customer Details**:
  * Show order history v·ªõi status
  * Show total spent amount
  * Show registration date v√† last login

**CustomerPages/CustomerDetail.razor - Chi Ti·∫øt Kh√°ch H√†ng**
- **Logic Load Data**:
  * Load customer profile info
  * Load order history v·ªõi pagination
  * Load delivery addresses
  * Calculate statistics: TotalOrders, TotalSpent, AvgOrderValue
- **Logic Order History**:
  * Group orders theo status
  * Show order timeline v·ªõi status changes
  * Link ƒë·∫øn OrderDetail page

üìå 5. QU·∫¢N L√ù NH√ÇN VI√äN
--------------------------------------------------------------------------------

**EmployeesPages/EmployeesPages.razor - Danh S√°ch Nh√¢n Vi√™n**
- **Logic Employee Management**:
  * CRUD operations cho Employee
  * Link v·ªõi User account (1-1 relationship)
  * Manage roles: Admin, Employee
- **Logic Role Assignment**:
  * Assign multiple roles cho employee
  * Validate role permissions
  * Check role conflicts

**EmployeesPages/AddEmployeesPages.razor - Th√™m Nh√¢n Vi√™n**
- **Logic User Creation**:
  * Create User account v·ªõi username/password
  * Generate random password ho·∫∑c allow custom
  * Send email v·ªõi login credentials
- **Logic Employee Profile**:
  * Create Employee record v·ªõi personal info
  * Link v·ªõi User account
  * Set default status = Active

üìå 6. QU·∫¢N L√ù T·ªíN KHO
--------------------------------------------------------------------------------

**ImportBatchPages/ImportBatch.razor - L√¥ Nh·∫≠p H√†ng**
- **Logic Import Batch**:
  * Create ImportBatch v·ªõi batch code
  * Add InventoryBatch items v·ªõi ProductDetail, Quantity, Price
  * Calculate total value v√† quantity
- **Logic Inventory Update**:
  * Update ProductDetail.InventoryQuantity
  * Create InventoryTransaction records
  * Update ProductDetail.Status n·∫øu h·∫øt h√†ng
- **Logic Validation**:
  * Validate ProductDetail exists
  * Validate Quantity > 0
  * Validate Price > 0
  * Check duplicate SKU trong batch

**InventoryPages/InventoryStatistics.razor - Th·ªëng K√™ T·ªìn Kho**
- **Logic Statistics Calculation**:
  * Total Products: COUNT(ProductDetail)
  * Low Stock: COUNT(*) WHERE InventoryQuantity <= OutOfStock
  * Out of Stock: COUNT(*) WHERE InventoryQuantity = 0
  * Total Value: SUM(InventoryQuantity * Price)
- **Logic Charts**:
  * Stock by Product: Pie chart v·ªõi ProductName v√† StockQuantity
  * Stock Trend: Line chart theo th·ªùi gian
  * Category Distribution: Bar chart theo Category

üìå 7. QU·∫¢N L√ù KHUY·∫æN M√ÉI
--------------------------------------------------------------------------------

**PromotionPages/Promotion.razor - Ch∆∞∆°ng Tr√¨nh Khuy·∫øn M√£i**
- **Logic Promotion Management**:
  * Create Promotion v·ªõi Title, StartDate, EndDate
  * Add PromotionDetail cho t·ª´ng ProductDetail
  * Set discount percentage ho·∫∑c fixed amount
- **Logic Validation**:
  * StartDate < EndDate
  * Kh√¥ng overlap v·ªõi promotion kh√°c c·ªßa c√πng s·∫£n ph·∫©m
  * Validate discount amount h·ª£p l·ªá
- **Logic Status Management**:
  * Active: Current date BETWEEN StartDate AND EndDate
  * Upcoming: Current date < StartDate
  * Expired: Current date > EndDate

**PromotionPages/PromotionCreate.razor - T·∫°o Khuy·∫øn M√£i**
- **Logic Product Selection**:
  * Multi-select ProductDetail v·ªõi search
  * Show current price v√† discount preview
  * Validate kh√¥ng conflict v·ªõi promotion kh√°c
- **Logic Discount Calculation**:
  * Percentage: Price * (1 - Discount/100)
  * Fixed Amount: Price - Discount
  * Show preview v·ªõi new price

üìå 8. QU·∫¢N L√ù VOUCHER
--------------------------------------------------------------------------------

**VoucherPages/Voucher.razor - M√£ Gi·∫£m Gi√°**
- **Logic Voucher Management**:
  * Create Voucher v·ªõi Code, Discount, MinOrder, MaxDiscount
  * Set usage limits: MaxUsage, MaxUsagePerUser
  * Set validity period: StartDate, EndDate
- **Logic Validation**:
  * Code unique trong h·ªá th·ªëng
  * MinOrder <= MaxDiscount
  * StartDate < EndDate
  * MaxUsage > 0
- **Logic Usage Tracking**:
  * Track usage count per voucher
  * Track usage per user
  * Validate eligibility khi apply

üìå 9. QU·∫¢N L√ù H·ªÜ TH·ªêNG
--------------------------------------------------------------------------------

**BrandPages/BrandPages.razor - Th∆∞∆°ng Hi·ªáu**
- **Logic Brand Management**:
  * CRUD operations cho Brand
  * Upload logo v·ªõi validation
  * Link v·ªõi Products (1-N relationship)
- **Logic Validation**:
  * Brand name unique
  * Logo file size limit
  * Validate kh√¥ng th·ªÉ x√≥a brand c√≥ products

**CategoryPages/CategoryPages.razor - Danh M·ª•c**
- **Logic Category Management**:
  * Hierarchical category structure
  * CRUD operations v·ªõi parent-child relationship
  * Link v·ªõi Products qua ProductCategory
- **Logic Tree Structure**:
  * Build category tree t·ª´ flat list
  * Support drag-drop ƒë·ªÉ reorder
  * Validate kh√¥ng th·ªÉ x√≥a category c√≥ subcategories

üìå 10. QU·∫¢N L√ù QUY·ªÄN H·∫†N
--------------------------------------------------------------------------------

**PermissionPages/Roles.razor - Vai Tr√≤**
- **Logic Role Management**:
  * Create Role v·ªõi Name v√† Description
  * Assign Permissions cho Role
  * Manage Role hierarchy
- **Logic Permission System**:
  * Granular permissions: Create, Read, Update, Delete
  * Module-based permissions: Product, Order, Customer, etc.
  * Validate permission conflicts

**PermissionPages/UserRoles.razor - Vai Tr√≤ Ng∆∞·ªùi D√πng**
- **Logic User Role Assignment**:
  * Assign multiple roles cho user
  * Validate role permissions
  * Check role conflicts v√† inheritance
- **Logic Permission Validation**:
  * Check user permissions tr∆∞·ªõc khi th·ª±c hi·ªán action
  * Deny access n·∫øu kh√¥ng c√≥ quy·ªÅn
  * Log permission violations

üìå 11. QU·∫¢N L√ù ƒê√ÅNH GI√Å
--------------------------------------------------------------------------------

**ProductReviewPages/ProductReviewManagement.razor - ƒê√°nh Gi√° S·∫£n Ph·∫©m**
- **Logic Review Management**:
  * Load reviews v·ªõi pagination
  * Filter theo Product, Rating, Status
  * Approve/Reject reviews
- **Logic Review Validation**:
  * Ch·ªâ customer ƒë√£ mua s·∫£n ph·∫©m m·ªõi ƒë∆∞·ª£c ƒë√°nh gi√°
  * Validate rating: 1-5 stars
  * Validate content kh√¥ng ch·ª©a spam
- **Logic Review Display**:
  * Show customer info (masked phone number)
  * Show product variant info (Size, Color)
  * Show review media (images, videos)
  * Show admin reply

üìå 12. QU·∫¢N L√ù C·∫§U H√åNH
--------------------------------------------------------------------------------

**SystemConfigPages/SystemConfigPages.razor - C·∫•u H√¨nh H·ªá Th·ªëng**
- **Logic Configuration Management**:
  * Store configuration trong database
  * Support different environments (Dev, Staging, Prod)
  * Validate configuration values
- **Logic Configuration Types**:
  * String, Number, Boolean, JSON
  * Encrypted values cho sensitive data
  * Default values v√† validation rules

üéØ LOGIC NGHI·ªÜP V·ª§ C√ÅC M√ÄN H√åNH PORTAL
================================================================================

üìå 1. TRANG CH·ª¶ KH√ÅCH H√ÄNG
--------------------------------------------------------------------------------

**Pages/Home.razor - Trang Ch·ªß Portal**
- **Logic Product Loading**:
  * Load products v·ªõi pagination (PageSize = 12)
  * Apply filters: Category, Brand, Material, Season, Size, Color, Price
  * Sort by: CreationTime, Name, Price, SellNumber, ViewNumber
- **Logic Filter Management**:
  * Real-time filtering v·ªõi debouncing
  * Reset filters v·ªÅ default values
  * Maintain filter state trong URL parameters
- **Logic Load More**:
  * Increment PageIndex ƒë·ªÉ load trang ti·∫øp theo
  * Append new products v√†o existing list
  * Check hasMoreProducts = products.Count < totalRecords
- **Logic Best Sellers**:
  * Load top 12 products v·ªõi highest SellNumber
  * Group by 4 products per carousel slide
  * Show discount percentage v√† price comparison
- **Logic Add to Cart**:
  * Check authentication status
  * Validate product availability
  * Add to cart v·ªõi quantity = 1
  * Update cart count trong header

üìå 2. X√ÅC TH·ª∞C NG∆Ø·ªúI D√ôNG
--------------------------------------------------------------------------------

**Pages/Login.razor - ƒêƒÉng Nh·∫≠p Kh√°ch H√†ng**
- **Logic Authentication**:
  * Validate form v·ªõi Required rules
  * G·ªçi `IAuthClientService.LoginAsync(loginModel)`
  * Check ResponseStatus == Success
- **Logic Session Management**:
  * Store JWT token trong localStorage
  * Set authentication state
  * Redirect v·ªÅ trang tr∆∞·ªõc ho·∫∑c home
- **Logic Remember Me**:
  * Store username trong localStorage
  * Auto-fill username khi load page
  * Clear sensitive data khi logout

**Pages/Register.razor - ƒêƒÉng K√Ω T√†i Kho·∫£n**
- **Logic Registration**:
  * Validate form v·ªõi email format, password strength
  * Check email kh√¥ng t·ªìn t·∫°i
  * Create Customer account v·ªõi User
  * Auto-login sau khi register th√†nh c√¥ng
- **Logic Validation**:
  * Email format validation
  * Password minimum 6 characters
  * Phone number format (10-11 digits, start with 0)
  * Terms and conditions acceptance

üìå 3. QU·∫¢N L√ù GI·ªé H√ÄNG
--------------------------------------------------------------------------------

**Pages/CartPages/Cart.razor - Trang Gi·ªè H√†ng Kh√°ch H√†ng**
- **Logic T·∫£i D·ªØ Li·ªáu Gi·ªè H√†ng**:
  * **T·∫£i gi·ªè h√†ng hi·ªán t·∫°i**: 
    - Load current cart v·ªõi `ICartClientService.GetCurrentCartAsync()`
    - Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m trong gi·ªè v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
    - T√≠nh to√°n t·ªïng ti·ªÅn real-time khi c√≥ thay ƒë·ªïi
  * **Hi·ªÉn th·ªã th√¥ng tin s·∫£n ph·∫©m**: 
    - T√™n s·∫£n ph·∫©m v√† SKU
    - H√¨nh ·∫£nh s·∫£n ph·∫©m v·ªõi fallback image
    - Th√¥ng tin bi·∫øn th·ªÉ (m√†u s·∫Øc, k√≠ch th∆∞·ªõc)
    - Gi√° g·ªëc v√† gi√° sau gi·∫£m gi√°
    - S·ªë l∆∞·ª£ng v√† t·ªïng ti·ªÅn t·ª´ng s·∫£n ph·∫©m

- **Logic Qu·∫£n L√Ω S·ªë L∆∞·ª£ng S·∫£n Ph·∫©m**:
  * **TƒÉng/gi·∫£m s·ªë l∆∞·ª£ng**: 
    - Increment/Decrement quantity v·ªõi validation
    - Validate quantity >= 1 v√† <= MaxBuyPerOrder
    - G·ªçi `UpdateQuantityAsync()` ƒë·ªÉ c·∫≠p nh·∫≠t database
    - Remove item kh·ªèi gi·ªè n·∫øu quantity = 0
  * **Nh·∫≠p s·ªë l∆∞·ª£ng tr·ª±c ti·∫øp**: 
    - Validate input v·ªõi min/max limits
    - Hi·ªÉn th·ªã c·∫£nh b√°o khi v∆∞·ª£t qu√° gi·ªõi h·∫°n
    - Auto-save khi ng∆∞·ªùi d√πng thay ƒë·ªïi s·ªë l∆∞·ª£ng
  * **Ki·ªÉm tra t·ªìn kho**: 
    - Validate s·ªë l∆∞·ª£ng kh√¥ng v∆∞·ª£t qu√° t·ªìn kho hi·ªán c√≥
    - Hi·ªÉn th·ªã c·∫£nh b√°o khi s·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng
    - Disable n√∫t tƒÉng s·ªë l∆∞·ª£ng khi h·∫øt h√†ng

- **Logic T√≠nh To√°n Gi√° C·∫£**:
  * **T√≠nh gi√° sau gi·∫£m gi√°**: 
    - C√¥ng th·ª©c: Price * (1 - Discount/100)
    - Hi·ªÉn th·ªã gi√° g·ªëc v√† gi√° ƒë√£ gi·∫£m
    - T√≠nh t·ªïng ti·ªÅn t·ª´ng d√≤ng: Quantity * PriceAfterDiscount
  * **T√≠nh t·ªïng ti·ªÅn**: 
    - Subtotal: T·ªïng c·ªßa t·∫•t c·∫£ c√°c d√≤ng s·∫£n ph·∫©m
    - √Åp d·ª•ng m√£ gi·∫£m gi√° n·∫øu c√≥
    - C·ªông ph√≠ v·∫≠n chuy·ªÉn
    - Hi·ªÉn th·ªã t·ªïng ti·ªÅn cu·ªëi c√πng

- **Logic √Åp D·ª•ng M√£ Gi·∫£m Gi√°**:
  * **T√¨m ki·∫øm m√£ gi·∫£m gi√°**: 
    - Search voucher by code v·ªõi validation
    - Ki·ªÉm tra voucher c√≥ t·ªìn t·∫°i v√† ƒëang ho·∫°t ƒë·ªông
    - Validate ƒëi·ªÅu ki·ªán s·ª≠ d·ª•ng: MinOrder, Status, Expiry
  * **T√≠nh to√°n gi·∫£m gi√°**: 
    - C√¥ng th·ª©c: Min(Subtotal * Discount%, MaxDiscount)
    - Hi·ªÉn th·ªã s·ªë ti·ªÅn ƒë∆∞·ª£c gi·∫£m
    - C·∫≠p nh·∫≠t t·ªïng ti·ªÅn cu·ªëi c√πng
  * **Qu·∫£n l√Ω voucher**: 
    - Cho ph√©p thay ƒë·ªïi ho·∫∑c x√≥a voucher ƒë√£ √°p d·ª•ng
    - Hi·ªÉn th·ªã th√¥ng tin voucher: m√£, t·ª∑ l·ªá gi·∫£m, ƒëi·ªÅu ki·ªán
    - Validate voucher c√≥ th·ªÉ s·ª≠ d·ª•ng cho ƒë∆°n h√†ng hi·ªán t·∫°i

- **Logic T√≠nh Ph√≠ V·∫≠n Chuy·ªÉn**:
  * **T√≠nh to√°n th√¥ng s·ªë v·∫≠n chuy·ªÉn**: 
    - T·ªïng tr·ªçng l∆∞·ª£ng t·ª´ c√°c s·∫£n ph·∫©m trong gi·ªè
    - T·ªïng th·ªÉ t√≠ch t·ª´ k√≠ch th∆∞·ªõc c√°c s·∫£n ph·∫©m
    - K√≠ch th∆∞·ªõc l·ªõn nh·∫•t t·ª´ t·∫•t c·∫£ s·∫£n ph·∫©m
  * **T√≠ch h·ª£p API GHN**: 
    - G·ªçi GHN API ƒë·ªÉ t√≠nh ph√≠ v·∫≠n chuy·ªÉn
    - Truy·ªÅn th√¥ng tin: tr·ªçng l∆∞·ª£ng, k√≠ch th∆∞·ªõc, ƒë·ªãa ch·ªâ giao h√†ng
    - Nh·∫≠n v·ªÅ ph√≠ v·∫≠n chuy·ªÉn v√† th·ªùi gian giao h√†ng
  * **C·∫≠p nh·∫≠t t·ªïng ti·ªÅn**: 
    - C·ªông ph√≠ v·∫≠n chuy·ªÉn v√†o t·ªïng ti·ªÅn
    - Hi·ªÉn th·ªã chi ti·∫øt ph√≠ v·∫≠n chuy·ªÉn
    - Cho ph√©p xem chi ti·∫øt c√°ch t√≠nh ph√≠

- **Logic Quy Tr√¨nh Thanh To√°n**:
  * **Ki·ªÉm tra ƒëi·ªÅu ki·ªán**: 
    - Validate selected items kh√¥ng empty
    - Validate ƒë·ªãa ch·ªâ giao h√†ng ƒë√£ ƒë∆∞·ª£c ch·ªçn
    - Ki·ªÉm tra t·∫•t c·∫£ s·∫£n ph·∫©m c√≤n t·ªìn kho
  * **T·∫°o ƒë∆°n h√†ng**: 
    - G·ªçi `CheckoutAsync()` ƒë·ªÉ t·∫°o ƒë∆°n h√†ng
    - T·∫°o ƒë∆°n h√†ng v·∫≠n chuy·ªÉn GHN
    - C·∫≠p nh·∫≠t t·ªìn kho s·∫£n ph·∫©m
  * **X·ª≠ l√Ω thanh to√°n**: 
    - Redirect ƒë·∫øn trang thanh to√°n n·∫øu ch·ªçn VnPay
    - Hi·ªÉn th·ªã th√¥ng tin chuy·ªÉn kho·∫£n n·∫øu ch·ªçn QR Code
    - Redirect ƒë·∫øn trang x√°c nh·∫≠n ƒë∆°n h√†ng

üìå 4. CHI TI·∫æT S·∫¢N PH·∫®M
--------------------------------------------------------------------------------

**Pages/ProductDetail/ProductDetail.razor - Chi Ti·∫øt S·∫£n Ph·∫©m**
- **Logic Product Loading**:
  * Load product v·ªõi full details: `GetProductWithDetailsAsync()`
  * Load media files v·ªõi ImageUrl
  * Load product variants v·ªõi inventory info
  * Load related products
- **Logic Variant Selection**:
  * Show all variants v·ªõi Size + Color combination
  * Highlight selected variant
  * Update price v√† availability khi select variant
  * Show stock status: Available/OutOfStock
- **Logic Quantity Management**:
  * Set maxPurchasableQuantity = Min(InventoryQuantity, MaxBuyPerOrder)
  * Validate quantity input v·ªõi min/max limits
  * Show warning khi exceed limits
- **Logic Add to Cart**:
  * Validate variant selected
  * Validate quantity > 0 v√† <= maxPurchasableQuantity
  * Add to cart v·ªõi `AddToCartAsync()`
  * Update cart count trong header
- **Logic Wishlist Management**:
  * Check wishlist status cho selected variant
  * Add/Remove from wishlist v·ªõi `ToggleWishlist()`
  * Update wishlist button state
- **Logic Review System**:
  * Load reviews v·ªõi pagination
  * Filter reviews theo rating (1-5 stars)
  * Show review statistics: Average rating, rating distribution
  * Enable review submission cho eligible customers
- **Logic Review Eligibility**:
  * Check customer ƒë√£ mua s·∫£n ph·∫©m n√†y
  * Check order status = Completed
  * Check ch∆∞a review variant n√†y
  * Show eligible variants t·ª´ completed orders
- **Logic Review Submission**:
  * Select variant ƒë·ªÉ review
  * Upload media files (4 images + 1 video)
  * Submit review v·ªõi rating, content, media
  * Reload reviews sau khi submit

üìå 5. QU·∫¢N L√ù ƒê∆†N H√ÄNG
--------------------------------------------------------------------------------

**Pages/OrderPages/CustomerOrder.razor - ƒê∆°n H√†ng Kh√°ch H√†ng**
- **Logic Order Loading**:
  * Load customer orders v·ªõi `GetMyOrdersAsync()`
  * Filter theo status v·ªõi tabs
  * Show order details v·ªõi pagination
- **Logic Order Status**:
  * Show status v·ªõi color coding
  * Enable actions based on status
  * Show order timeline v·ªõi status changes
- **Logic Order Tracking**:
  * Show current status v√† next steps
  * Display estimated delivery date
  * Show tracking information n·∫øu available

**Pages/OrderPages/OrderDetail.razor - Chi Ti·∫øt ƒê∆°n H√†ng**
- **Logic Order Details**:
  * Load order v·ªõi full details
  * Show order items v·ªõi product info
  * Display delivery address v√† payment info
- **Logic Order Actions**:
  * Cancel order n·∫øu status = Pending
  * Request return n·∫øu status = Completed
  * Track order n·∫øu status = InTransit
- **Logic Return Request**:
  * Select items ƒë·ªÉ return
  * Provide return reason
  * Upload return evidence (photos)
  * Submit return request

üìå 6. QU·∫¢N L√ù H·ªí S∆† KH√ÅCH H√ÄNG
--------------------------------------------------------------------------------

**Pages/ProfilePages/ProfileInfo.razor - Th√¥ng Tin C√° Nh√¢n**
- **Logic Profile Management**:
  * Load customer profile info
  * Update profile v·ªõi validation
  * Upload avatar v·ªõi size limit
- **Logic Password Change**:
  * Validate current password
  * Validate new password strength
  * Confirm new password match
  * Update password v·ªõi encryption

**Pages/ProfilePages/DeliveryAddresses.razor - ƒê·ªãa Ch·ªâ Giao H√†ng**
- **Logic Address Management**:
  * Load customer addresses
  * CRUD operations cho addresses
  * Set default address
- **Logic Address Validation**:
  * Validate phone number format
  * Validate address completeness
  * Check address uniqueness
- **Logic GHN Integration**:
  * Load provinces t·ª´ GHN API
  * Load districts based on province
  * Load communes based on district
  * Build full address string

**Pages/ProfilePages/Wishlist.razor - Danh S√°ch Y√™u Th√≠ch**
- **Logic Wishlist Management**:
  * Load wishlist items
  * Add/Remove items
  * Move items to cart
- **Logic Wishlist Actions**:
  * Add to cart t·ª´ wishlist
  * Remove from wishlist
  * Share wishlist (future feature)

**Pages/ProfilePages/ProductReviews.razor - ƒê√°nh Gi√° S·∫£n Ph·∫©m**
- **Logic Review Management**:
  * Load customer reviews
  * Edit reviews (n·∫øu ch∆∞a ƒë∆∞·ª£c reply)
  * Delete reviews (n·∫øu ch∆∞a ƒë∆∞·ª£c reply)
- **Logic Review Display**:
  * Show review details v·ªõi product info
  * Show admin replies
  * Show review status (Pending/Approved/Rejected)

üìå 7. C√ÅC M√ÄN H√åNH KH√ÅC
--------------------------------------------------------------------------------

**Pages/Compare.razor - So S√°nh S·∫£n Ph·∫©m**
- **Logic Product Comparison**:
  * Add products to comparison list
  * Remove products from comparison
  * Show comparison table v·ªõi specifications
- **Logic Comparison Features**:
  * Compare up to 4 products
  * Highlight differences
  * Show price comparison
  * Add to cart t·ª´ comparison

üîß LOGIC NGHI·ªÜP V·ª§ CHUNG V√Ä QUY T·∫ÆC H·ªÜ TH·ªêNG
================================================================================

üìå 1. LOGIC KI·ªÇM TRA T√çNH H·ª¢P L·ªÜ (VALIDATION LOGIC)
--------------------------------------------------------------------------------
- **Ki·ªÉm Tra Form ƒê·∫ßu V√†o**:
  * **Validation c√°c tr∆∞·ªùng b·∫Øt bu·ªôc**: 
    - Ki·ªÉm tra kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng c√°c tr∆∞·ªùng required
    - Hi·ªÉn th·ªã th√¥ng b√°o l·ªói c·ª• th·ªÉ cho t·ª´ng tr∆∞·ªùng
    - NgƒÉn ch·∫∑n submit form khi c√≥ l·ªói validation
  * **Validation ƒë·ªãnh d·∫°ng d·ªØ li·ªáu**: 
    - Email: Ki·ªÉm tra format email h·ª£p l·ªá
    - S·ªë ƒëi·ªán tho·∫°i: 10-11 s·ªë, b·∫Øt ƒë·∫ßu b·∫±ng 0
    - M·∫≠t kh·∫©u: T·ªëi thi·ªÉu 6 k√Ω t·ª±, c√≥ ch·ªØ v√† s·ªë
    - Ng√†y th√°ng: Format dd/MM/yyyy
  * **Validation quy t·∫Øc nghi·ªáp v·ª•**: 
    - Gi√° s·∫£n ph·∫©m ph·∫£i > 0
    - S·ªë l∆∞·ª£ng ph·∫£i >= 1
    - Ng√†y b·∫Øt ƒë·∫ßu < ng√†y k·∫øt th√∫c
    - S·ªë l∆∞·ª£ng kh√¥ng v∆∞·ª£t qu√° t·ªìn kho
  * **Validation li√™n quan gi·ªØa c√°c tr∆∞·ªùng**: 
    - Gi√° sau gi·∫£m gi√° < gi√° g·ªëc
    - S·ªë l∆∞·ª£ng t·ªëi ƒëa mua <= t·ªìn kho
    - ƒê·ªãa ch·ªâ giao h√†ng ph·∫£i ƒë·∫ßy ƒë·ªß th√¥ng tin

- **Ki·ªÉm Tra Quy T·∫Øc Nghi·ªáp V·ª•**:
  * **Ki·ªÉm tra t·ªìn kho**: 
    - Validate s·∫£n ph·∫©m c√≤n h√†ng tr∆∞·ªõc khi th√™m v√†o gi·ªè
    - Ki·ªÉm tra s·ªë l∆∞·ª£ng kh√¥ng v∆∞·ª£t qu√° t·ªìn kho hi·ªán c√≥
    - C·∫£nh b√°o khi s·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng
  * **Ki·ªÉm tra gi√° c·∫£**: 
    - Validate gi√° s·∫£n ph·∫©m ph·∫£i l√† s·ªë d∆∞∆°ng
    - Ki·ªÉm tra gi√° sau gi·∫£m gi√° h·ª£p l·ªá
    - Validate kh√¥ng ƒë∆∞·ª£c gi·∫£m gi√° √¢m
  * **Ki·ªÉm tra ng√†y th√°ng**: 
    - Ng√†y b·∫Øt ƒë·∫ßu khuy·∫øn m√£i < ng√†y k·∫øt th√∫c
    - Ng√†y t·∫°o ƒë∆°n h√†ng kh√¥ng ƒë∆∞·ª£c trong t∆∞∆°ng lai
    - Validate ng√†y h·∫øt h·∫°n voucher
  * **Ki·ªÉm tra s·ªë l∆∞·ª£ng**: 
    - S·ªë l∆∞·ª£ng s·∫£n ph·∫©m >= 1
    - S·ªë l∆∞·ª£ng kh√¥ng v∆∞·ª£t qu√° gi·ªõi h·∫°n mua h√†ng
    - Validate s·ªë l∆∞·ª£ng nh·∫≠p kho > 0

üìå 2. LOGIC QU·∫¢N L√ù TR·∫†NG TH√ÅI (STATE MANAGEMENT LOGIC)
--------------------------------------------------------------------------------
- **Tr·∫°ng Th√°i Component**:
  * **Tr·∫°ng th√°i c·ª•c b·ªô**: 
    - S·ª≠ d·ª•ng @bind-Value ƒë·ªÉ bind d·ªØ li·ªáu
    - C·∫≠p nh·∫≠t UI v·ªõi StateHasChanged() khi c√≥ thay ƒë·ªïi
    - Qu·∫£n l√Ω loading states cho c√°c thao t√°c async
  * **Tr·∫°ng th√°i form**: 
    - Track dirty state c·ªßa form
    - Validate real-time khi ng∆∞·ªùi d√πng nh·∫≠p li·ªáu
    - Reset form v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
  * **Tr·∫°ng th√°i modal/dialog**: 
    - Qu·∫£n l√Ω visibility c·ªßa modal
    - L∆∞u tr·∫°ng th√°i d·ªØ li·ªáu trong modal
    - X·ª≠ l√Ω cancel v√† save actions

- **Tr·∫°ng Th√°i To√†n C·ª•c**:
  * **Tr·∫°ng th√°i gi·ªè h√†ng**: 
    - CartStateService ƒë·ªÉ qu·∫£n l√Ω s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè
    - C·∫≠p nh·∫≠t real-time khi th√™m/x√≥a s·∫£n ph·∫©m
    - Persist gi·ªè h√†ng trong localStorage
  * **Tr·∫°ng th√°i x√°c th·ª±c**: 
    - AuthStateProvider ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
    - L∆∞u th√¥ng tin user v√† permissions
    - Auto-refresh token khi h·∫øt h·∫°n
  * **Tr·∫°ng th√°i ng∆∞·ªùi d√πng**: 
    - L∆∞u preferences trong localStorage
    - Remember c√°c filter v√† sort options
    - Cache d·ªØ li·ªáu static (categories, brands)

üìå 3. LOGIC X·ª¨ L√ù L·ªñI (ERROR HANDLING LOGIC)
--------------------------------------------------------------------------------
- **X·ª≠ L√Ω L·ªói API**:
  * **Try-catch blocks**: 
    - Wrap t·∫•t c·∫£ API calls trong try-catch
    - Catch c√°c lo·∫°i exception kh√°c nhau
    - Log chi ti·∫øt l·ªói ƒë·ªÉ debug
  * **Ki·ªÉm tra response status**: 
    - Check ResponseStatus == Success
    - X·ª≠ l√Ω c√°c m√£ l·ªói kh√°c nhau (400, 401, 403, 500)
    - Hi·ªÉn th·ªã th√¥ng b√°o l·ªói ph√π h·ª£p v·ªõi t·ª´ng tr∆∞·ªùng h·ª£p
  * **Hi·ªÉn th·ªã th√¥ng b√°o l·ªói**: 
    - User-friendly error messages
    - Kh√¥ng hi·ªÉn th·ªã technical details cho end user
    - Cung c·∫•p h∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c khi c√≥ th·ªÉ
  * **Log l·ªói ƒë·ªÉ debug**: 
    - Log chi ti·∫øt l·ªói v·ªõi stack trace
    - Include context information (user, action, timestamp)
    - Send error reports ƒë·∫øn monitoring system

- **X·ª≠ L√Ω L·ªói Validation**:
  * **Hi·ªÉn th·ªã l·ªói inline**: 
    - Show validation errors ngay d∆∞·ªõi field
    - Highlight field c√≥ l·ªói v·ªõi m√†u ƒë·ªè
    - Clear errors khi user s·ª≠a input
  * **NgƒÉn ch·∫∑n submit**: 
    - Disable submit button khi c√≥ l·ªói
    - Prevent form submission v·ªõi errors
    - Show summary errors ·ªü ƒë·∫ßu form
  * **X·ª≠ l√Ω l·ªói real-time**: 
    - Validate khi user blur kh·ªèi field
    - Clear errors khi user b·∫Øt ƒë·∫ßu s·ª≠a
    - Debounce validation ƒë·ªÉ tr√°nh spam

üìå 4. LOGIC T·ªêI ∆ØU HI·ªÜU SU·∫§T (PERFORMANCE OPTIMIZATION LOGIC)
--------------------------------------------------------------------------------
- **Lazy Loading**:
  * **T·∫£i d·ªØ li·ªáu theo y√™u c·∫ßu**: 
    - Load data ch·ªâ khi c·∫ßn thi·∫øt
    - Implement pagination cho large datasets
    - Load more data khi user scroll ƒë·∫øn cu·ªëi
  * **Virtual scrolling**: 
    - Render ch·ªâ items visible tr√™n m√†n h√¨nh
    - Recycle DOM elements ƒë·ªÉ ti·∫øt ki·ªám memory
    - Smooth scrolling cho danh s√°ch d√†i
  * **Image lazy loading**: 
    - Load images ch·ªâ khi v√†o viewport
    - Show placeholder trong khi loading
    - Progressive image loading

- **Caching Logic**:
  * **Cache API responses**: 
    - Cache static data (categories, brands, sizes)
    - Implement cache invalidation strategy
    - Use memory cache cho frequently accessed data
  * **Cache user preferences**: 
    - Cache filter v√† sort options
    - Remember user's last viewed products
    - Cache search results v·ªõi TTL
  * **Cache static data**: 
    - Cache dropdown data (provinces, districts)
    - Cache configuration settings
    - Cache computed values (shipping fees)

- **Debouncing**:
  * **Search input debouncing**: 
    - Delay API calls khi user ƒëang typing
    - Cancel previous requests khi c√≥ request m·ªõi
    - Reduce server load v√† improve UX
  * **Filter changes debouncing**: 
    - Debounce filter changes ƒë·ªÉ tr√°nh excessive API calls
    - Batch multiple filter changes
    - Show loading indicator trong khi debouncing
  * **Prevent excessive API calls**: 
    - Rate limiting cho API calls
    - Implement request queuing
    - Cancel redundant requests

üìå 5. LOGIC B·∫¢O M·∫¨T (SECURITY LOGIC)
--------------------------------------------------------------------------------
- **X√°c Th·ª±c (Authentication)**:
  * **JWT token validation**: 
    - Validate JWT token signature v√† expiry
    - Refresh token khi g·∫ßn h·∫øt h·∫°n
    - Handle token expiration gracefully
  * **Token refresh logic**: 
    - Auto-refresh token tr∆∞·ªõc khi h·∫øt h·∫°n
    - Retry failed requests v·ªõi new token
    - Logout user khi refresh token h·∫øt h·∫°n
  * **Session timeout handling**: 
    - Detect idle time v√† auto-logout
    - Show warning tr∆∞·ªõc khi logout
    - Save user's work tr∆∞·ªõc khi logout

- **Ph√¢n Quy·ªÅn (Authorization)**:
  * **Role-based access control**: 
    - Check user roles tr∆∞·ªõc khi th·ª±c hi·ªán action
    - Hide/disable UI elements based on permissions
    - Validate permissions ·ªü c·∫£ client v√† server
  * **Permission checking**: 
    - Granular permissions cho t·ª´ng feature
    - Check permissions real-time
    - Cache permissions ƒë·ªÉ improve performance
  * **Resource ownership validation**: 
    - Validate user owns resource tr∆∞·ªõc khi modify
    - Prevent access to other users' data
    - Audit access attempts

- **B·∫£o V·ªá D·ªØ Li·ªáu**:
  * **Input sanitization**: 
    - Sanitize t·∫•t c·∫£ user inputs
    - Escape special characters
    - Validate data types v√† formats
  * **SQL injection prevention**: 
    - Use parameterized queries
    - Validate input parameters
    - Escape special SQL characters
  * **XSS protection**: 
    - Encode output data
    - Use Content Security Policy
    - Validate v√† sanitize HTML content

üìå 6. LOGIC T√çCH H·ª¢P (INTEGRATION LOGIC)
--------------------------------------------------------------------------------
- **T√≠ch H·ª£p Thanh To√°n**:
  * **VnPay payment processing**: 
    - Generate payment URL v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
    - Handle payment callback v√† verify signature
    - Update order status sau khi thanh to√°n th√†nh c√¥ng
  * **QR Code generation**: 
    - Generate QR code v·ªõi th√¥ng tin chuy·ªÉn kho·∫£n
    - Include order code v√† amount
    - Auto-refresh QR code khi amount thay ƒë·ªïi
  * **Payment status tracking**: 
    - Poll payment status t·ª´ VnPay
    - Handle payment timeout
    - Send notification khi payment completed

- **T√≠ch H·ª£p V·∫≠n Chuy·ªÉn**:
  * **GHN API integration**: 
    - Calculate shipping fee d·ª±a tr√™n weight v√† dimensions
    - Create shipping order v·ªõi GHN
    - Track shipping status real-time
  * **Shipping fee calculation**: 
    - Calculate total weight t·ª´ cart items
    - Calculate total volume t·ª´ dimensions
    - Get shipping fee t·ª´ GHN API
  * **Order tracking**: 
    - Track order status t·ª´ GHN
    - Show delivery timeline
    - Send tracking updates ƒë·∫øn customer

- **T√≠ch H·ª£p Email**:
  * **Order confirmation emails**: 
    - Send email khi order ƒë∆∞·ª£c t·∫°o
    - Include order details v√† tracking info
    - Send updates khi order status changes
  * **Password reset emails**: 
    - Generate secure reset token
    - Send reset link v·ªõi expiry time
    - Validate reset token khi user clicks link
  * **Newsletter subscriptions**: 
    - Manage subscription preferences
    - Send marketing emails v·ªõi unsubscribe option
    - Track email open v√† click rates

üìå 7. LOGIC QUY T·∫ÆC NGHI·ªÜP V·ª§ (BUSINESS RULES LOGIC)
--------------------------------------------------------------------------------
- **X·ª≠ L√Ω ƒê∆°n H√†ng**:
  * **Order status workflow**: 
    - Pending ‚Üí Confirmed ‚Üí InTransit ‚Üí Completed
    - Allow cancellation trong Pending v√† Confirmed
    - Handle return requests t·ª´ Completed orders
  * **Inventory deduction**: 
    - Deduct inventory khi order confirmed
    - Restore inventory khi order cancelled
    - Handle partial fulfillment
  * **Payment processing**: 
    - Process payment theo method ƒë√£ ch·ªçn
    - Handle payment failures
    - Refund processing cho cancelled orders
  * **Shipping creation**: 
    - Create shipping order v·ªõi GHN
    - Generate tracking number
    - Send shipping notification

- **Qu·∫£n L√Ω S·∫£n Ph·∫©m**:
  * **Variant creation rules**: 
    - Unique combination c·ªßa Color + Size
    - Auto-generate SKU t·ª´ ProductId + ColorId + SizeId
    - Validate variant kh√¥ng duplicate
  * **Price calculation rules**: 
    - Apply promotions v√† discounts
    - Calculate final price v·ªõi tax
    - Handle bulk pricing
  * **Inventory management rules**: 
    - Track inventory theo variant
    - Set low stock alerts
    - Handle backorders
  * **Status transition rules**: 
    - Draft ‚Üí Pending ‚Üí Selling
    - Prevent invalid status transitions
    - Handle status dependencies

- **Qu·∫£n L√Ω Kh√°ch H√†ng**:
  * **Registration rules**: 
    - Validate unique email v√† phone
    - Send verification email
    - Auto-create customer profile
  * **Order eligibility rules**: 
    - Check customer status (active/locked)
    - Validate shipping address
    - Check order limits
  * **Review eligibility rules**: 
    - Only customers who purchased can review
    - One review per order item
    - Review period limitations
  * **Account status rules**: 
    - Lock account sau multiple failed logins
    - Suspend account cho violations
    - Reactivate account v·ªõi admin approval

üìå 8. LOGIC ƒê·∫¢M B·∫¢O T√çNH NH·∫§T QU√ÅN D·ªÆ LI·ªÜU (DATA CONSISTENCY LOGIC)
--------------------------------------------------------------------------------
- **Qu·∫£n L√Ω Transaction**:
  * **Database transactions**: 
    - Wrap related operations trong transaction
    - Rollback to√†n b·ªô khi c√≥ l·ªói
    - Ensure data consistency across tables
  * **Rollback on errors**: 
    - Automatic rollback khi exception occurs
    - Manual rollback cho business rule violations
    - Log rollback reasons
  * **Data consistency checks**: 
    - Validate foreign key constraints
    - Check data integrity rules
    - Prevent orphaned records

- **Ki·ªÉm So√°t ƒê·ªìng Th·ªùi**:
  * **Optimistic locking**: 
    - Use version fields ƒë·ªÉ detect conflicts
    - Handle concurrent modifications
    - Show conflict resolution UI
  * **Conflict resolution**: 
    - Detect data conflicts
    - Provide resolution options
    - Merge changes intelligently
  * **Data synchronization**: 
    - Sync data across multiple sources
    - Handle sync conflicts
    - Maintain data consistency

- **Audit Trail**:
  * **Log all changes**: 
    - Track who made changes
    - Log what was changed
    - Record when changes occurred
  * **Track user actions**: 
    - Log user activities
    - Track sensitive operations
    - Monitor for suspicious activities
  * **Maintain history records**: 
    - Keep historical data
    - Enable data recovery
    - Support compliance requirements

================================================================================
