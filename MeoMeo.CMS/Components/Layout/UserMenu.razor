@using MeoMeo.CMS.IServices
@using MeoMeo.Contract.DTOs.Auth
@using MeoMeo.Shared.IServices
@using MeoMeo.Shared.Utilities
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using ButtonType = AntDesign.ButtonType
@inject ICMSAuthService AuthService
@inject ICMSUserInfoService UserInfoService
@inject NavigationManager NavigationManager
@inject MessageModalService MessageModalService
@inject IConfiguration Configuration

<AuthorizeView>
    <Authorized Context="context">
        <div class="user-menu">
            <Dropdown>
                <ChildContent>
                    <Button Type="@ButtonType.Link" Class="user-button">
                        <Space>
                            <Avatar Size="AvatarSize.Small" Style="background-color: #667eea" Src="@GetUserAvatar()">
                            </Avatar>
                            <span class="user-name">@GetUserFullName()</span>
                            <Icon Type="down" />
                        </Space>
                    </Button>
                </ChildContent>
                <Overlay>
                    <Menu>
                        <MenuItem Key="profile">
                        <Icon Type="user" />
                        <a href="/profile">Hồ sơ cá nhân</a>
                        </MenuItem>
                        <MenuDivider />
                        <MenuItem Key="logout" OnClick="LogoutAsync">
                        <Icon Type="logout" />
                        Đăng xuất
                        </MenuItem>
                    </Menu>
                </Overlay>
            </Dropdown>
        </div>
    </Authorized>

    <NotAuthorized>
        <div class="auth-buttons">
            <Button Type="@ButtonType.Link" Class="login-link"
                OnClick="@(() => NavigationManager.NavigateTo("/cms/login"))">
                Đăng nhập
            </Button>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string backendUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to user info changes
        UserInfoService.OnUserInfoChanged += OnUserInfoChanged;

        // Load user info khi component khởi tạo
        await UserInfoService.LoadUserInfoAsync();

        // Get backend URL from configuration
        backendUrl = Configuration["ApiSettings:BaseUrl"] ?? "";
    }

    private void OnUserInfoChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private string GetUserFullName()
    {
        // Ưu tiên thông tin từ API, fallback về auth service
        if (UserInfoService.CurrentUser != null)
        {
            return !string.IsNullOrEmpty(UserInfoService.CurrentUser.FullName)
            ? UserInfoService.CurrentUser.FullName
            : UserInfoService.CurrentUser.UserName;
        }
        return "User";
    }

    private string GetUserAvatar()
    {
        // Ưu tiên thông tin từ API, fallback về auth service
        if (UserInfoService.CurrentUser != null && !string.IsNullOrEmpty(UserInfoService.CurrentUser.Avatar))
        {
            return backendUrl + "/" + UserInfoService.CurrentUser.Avatar;
        }
        return string.Empty;
    }

    private async Task LogoutAsync()
    {
        try
        {
            var refreshToken = await AuthService.GetRefreshTokenAsync();
            if (!string.IsNullOrEmpty(refreshToken))
            {
                await AuthService.LogoutAsync(new RefreshTokenRequest { RefreshToken = refreshToken });
            }
            else
            {
                await AuthService.ClearTokensAsync();
            }

            await MessageModalService.Success("Đăng xuất thành công!");
            NavigationManager.NavigateTo("/cms/login", forceLoad: true);
        }
        catch (Exception ex)
        {
            await MessageModalService.Error($"Có lỗi xảy ra trong quá trình đăng xuất: {ex.Message}");
            await AuthService.ClearTokensAsync();
            NavigationManager.NavigateTo("/cms/login", forceLoad: true);
        }
    }
}
