@page "/manage-promotion"
@* @attribute [Authorize(Roles = "Admin")] *@
@using AntDesign.TableModels
@using MeoMeo.Shared.IServices;
@using MeoMeo.Contract.Commons
@using MeoMeo.Contract.DTOs.Promotion
@using MeoMeo.Contract.DTOs.PromotionDetail
@using MeoMeo.Domain.Commons.Enums
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@using MeoMeo.Shared.Utilities
@using Microsoft.AspNetCore.Authorization
@using ButtonSize = AntDesign.ButtonSize
@using ButtonType = AntDesign.ButtonType
@inject MessageModalService MessageModalService

<div class="d-flex justify-content-between">
    <Breadcrumb>
        <BreadcrumbItem Href="/">Trang chủ</BreadcrumbItem>
        <BreadcrumbItem Href="/manage-promotion">Chương trình khuyến mãi</BreadcrumbItem>
    </Breadcrumb>
    <Button OnClick="AddPromotion" Type="ButtonType.Primary" Class="mb-2">
        <i class="fas fa-plus"></i> Thêm mới
    </Button>
</div>
<Tabs DefaultActiveKey="All" @bind-ActiveKey="@activeTab" OnChange="OnTabChange">
    <TabPane Key="All" Tab=@($"Tất cả ({metaData.TotalAll})") />
    <TabPane Key="NotHappenedYet" Tab=@($"Chưa diễn ra ({metaData.NotHappenedYet})") />
    <TabPane Key="IsGoingOn" Tab=@($"Đang diễn ra ({metaData.IsGoingOn})") />
    <TabPane Key="Ended" Tab=@($"Đã kết thúc ({metaData.Ended})") />
</Tabs>
<div class="d-flex justify-content-end gap-3 mb-2">
    <div style="width: 250px">
        <Input AllowClear="true" @bind-Value="filter.TitleFilter" Placeholder="Nhập tên khuyến mãi"
            OnClear="OnFilterChanged" />
    </div>
    <DatePicker Class="w-full" TValue="DateOnly ?" @bind-Value="filter.StartDateFilter" />
    <DatePicker Class="w-full" TValue="DateOnly ?" @bind-Value="filter.EndDateFilter" />
    <div style="width: 250px">
        <Input AllowClear="true" @bind-Value="filter.DescriptionFilter" Placeholder="Nhập mô tả"
            OnClear="OnFilterChanged" />
    </div>
    <Tooltip Title="Tìm kiếm">
        <Button @onclick="() => OnFilterChanged()" Type="ButtonType.Primary" Shape="ButtonShape.Circle"
            Icon="@IconType.Outline.Search" />
    </Tooltip>
</div>
<Table DataSource="listOfData" TItem="CreateOrUpdatePromotionDTO" Bordered TableLayout="fixed" OnChange="@OnPageChange"
    PageSize="@filter.PageSize" Total="@totalRecords" OnExpand="@OnRowExpand">
    <ChildContent Context="data">
        <Column TData="int" Title="STT">
            @{
                var index = listOfData.IndexOf(data);
                @((filter.PageIndex - 1) * filter.PageSize + index + 1)
            }
        </Column>
        <Column TData="string" Title="Tên chương trình">
            <a class="text-primary" style="cursor:pointer" @onclick="() => ViewPromotionDetail(data.Id.Value)">
                @data.Title
            </a>
        </Column>
        <Column TData="DateTime ?" Title="Ngày bắt đầu">
            @data.StartDate?.ToString("dd-MM-yyyy")
        </Column>
        <Column TData="DateTime ?" Title="Ngày kết thúc">
            @data.EndDate?.ToString("dd-MM-yyyy")
        </Column>
        <Column TData="string" Title="Mô tả">
            @data.Description
        </Column>
        <Column TData="string" Title="Trạng thái">
            @{
                var status = CalculatePromotionStatus(data.StartDate, data.EndDate);
                var statusInfo = GetStatusInfo(status);
            }
            <Tag Color="@statusInfo.Color">@statusInfo.Name</Tag>
        </Column>
        <ActionColumn Title="Thao tác" Class="text-end gap-2">
            <Tooltip Title="Sửa">
                <Button Size="ButtonSize.Small" @onclick="() => EditPromotion(data.Id.Value)"
                    Shape="ButtonShape.Circle">
                    <i class="fas fa-pen"></i>
                </Button>
            </Tooltip>

            <Popconfirm Title=@($"Bạn có chắc muốn xóa {data.Title}?") OnConfirm="() => DeletePromotion(data.Id.Value)"
                OkText="Đồng ý" CancelText="Hủy">
                <Tooltip Title="Xóa">
                    <Button Size="ButtonSize.Small" Danger Shape="ButtonShape.Circle">
                        <i class="fas fa-minus"></i>
                    </Button>
                </Tooltip>
            </Popconfirm>
        </ActionColumn>
    </ChildContent>
    <ExpandTemplate Context="data">
        <div>
            <h4>Sản phẩm trong chương trình khuyến mãi</h4>
            @if (expandedPromotionProducts.ContainsKey(data.Data.Id.Value) &&
                        expandedPromotionProducts[data.Data.Id.Value].Any())
            {
                <Table DataSource="expandedPromotionProducts[data.Data.Id.Value]" TItem="PromotionDetailWithProductInfoDTO"
                    Size="TableSize.Small">
                    <Column TData="string" Title="Ảnh" Width="80">
                        <Image Width="60" Height="60" Fallback="@(ApiBaseUrl + "/Images/fallback.jpeg")"
                            Src="@GetProductImageUrl(context.Thumbnail)" Class="search-result-image" />
                    </Column>
                    <Column TData="string" Title="Sản phẩm" Width="200">
                        <div>
                            <div><Text Strong>@context.ProductName</Text></div>
                            <div style="color: #666; font-size: 12px;">
                                <Tag>@context.ColourName</Tag>
                                <Tag>Size: @context.SizeName</Tag>
                            </div>
                        </div>
                    </Column>
                    <Column TData="decimal" Title="Giá gốc" Width="120" Align="@ColumnAlign.Right">
                        @($"{context.OriginalPrice:N0} ₫")
                    </Column>
                    <Column TData="decimal" Title="Giá khuyến mãi" Width="120" Align="@ColumnAlign.Right">
                        <Text Strong Style="color: #ff4d4f;">@($"{context.DiscountPrice:N0} ₫")</Text>
                    </Column>
                    <Column TData="decimal" Title="Giảm giá" Width="100" Align="@ColumnAlign.Center">
                        @{
                            var discountPercent = context.OriginalPrice > 0 ? ((context.OriginalPrice - context.DiscountPrice) /
                            context.OriginalPrice * 100) : 0;
                        }
                        <Tag>@discountPercent.ToString("F0")%</Tag>
                    </Column>
                </Table>
            }
            else
            {
                <div class="text-center p-3">
                    <p>Chưa có sản phẩm nào trong chương trình khuyến mãi này</p>
                </div>
            }
        </div>
    </ExpandTemplate>
</Table>

@code {
    [Inject] private IPromotionClientService PromotionClientService { get; set; } = default!;
    [Inject] private IPromotionDetailClientService PromotionDetailService { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] private IConfiguration Configuration { get; set; } = default!;

    private string activeTab = "All";
    private GetListPromotionResponseDTO metaData = new();
    private int totalRecords = 0;
    List<CreateOrUpdatePromotionDTO> listOfData = new();
    private Dictionary<Guid, List<PromotionDetailWithProductInfoDTO>> expandedPromotionProducts = new();
    private string ApiBaseUrl = string.Empty;

    GetListPromotionRequestDTO filter = new GetListPromotionRequestDTO()
    {
        TitleFilter = "",
        StartDateFilter = null,
        EndDateFilter = null,
        DescriptionFilter = "",
        PageIndex = 1,
        PageSize = 10
    };

    // Calculate promotion status based on dates
    private EPromotionStatus CalculatePromotionStatus(DateTime? startDate, DateTime? endDate)
    {
        if (!startDate.HasValue || !endDate.HasValue)
            return EPromotionStatus.NotHappenedYet;

        var now = DateTime.Now;

        if (startDate.Value > now)
            return EPromotionStatus.NotHappenedYet;
        else if (startDate.Value <= now && endDate.Value >= now)
            return EPromotionStatus.IsGoingOn;
        else
            return EPromotionStatus.Ended;
    }

    // Get status display info
    private (string Name, string Color) GetStatusInfo(EPromotionStatus status)
    {
        return status switch
        {
            EPromotionStatus.NotHappenedYet => ("Chưa diễn ra", "blue"),
            EPromotionStatus.IsGoingOn => ("Đang diễn ra", "green"),
            EPromotionStatus.Ended => ("Đã kết thúc", "red"),
            _ => (status.ToString(), "default")
        };
    }

    protected override async Task OnInitializedAsync()
    {
        ApiBaseUrl = Configuration["ApiSettings:BaseUrl"]?.TrimEnd('/') ?? string.Empty;
        await LoadDataAsync();
    }

    private async Task OnPageChange(QueryModel<CreateOrUpdatePromotionDTO> query)
    {
        filter.PageIndex = query.PageIndex;
        filter.PageSize = query.PageSize;
        await LoadDataAsync();
    }

    private void AddPromotion()
    {
        Navigation.NavigateTo("/promotion-create");
    }

    private async Task OnTabChange()
    {
        // Tab filtering is now handled by status calculation, no need to set StatusFilter
        await LoadDataAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadDataAsync()
    {
        var response = await PromotionClientService.GetAllPromotionAsync(filter);
        listOfData = response.Items;
        metaData = response.Metadata;
        totalRecords = response.TotalRecords;
        await InvokeAsync(StateHasChanged);
    }

    async void OnFilterChanged()
    {
        await LoadDataAsync();
    }

    void ViewPromotionDetail(Guid id)
    {
        Navigation.NavigateTo($"/promotion-detail/{id}");
    }

    void EditPromotion(Guid id)
    {
        Navigation.NavigateTo($"/promotion-create/{id}");
    }


    async Task DeletePromotion(Guid id)
    {
        var success = await PromotionClientService.DeletePromotionAsync(id);
        if (success)
        {
            listOfData.RemoveAll(x => x.Id == id);
            await MessageModalService.Success("Xoá thành công!");
            await LoadDataAsync();
        }
        else
        {
            await MessageModalService.Error("Xoá thất bại!");
        }
    }


    private async Task OnRowExpand(RowData<CreateOrUpdatePromotionDTO> args)
    {
        if (args.Expanded)
        {
            await LoadPromotionProducts(args.Data.Id.Value);
        }
    }

    private async Task LoadPromotionProducts(Guid promotionId)
    {
        try
        {
            Console.WriteLine($"Loading products for promotion: {promotionId}");

            if (!expandedPromotionProducts.ContainsKey(promotionId))
            {
                var request = new GetPromotionDetailWithProductInfoRequestDTO
                {
                    PromotionId = promotionId,
                    PageIndex = 1,
                    PageSize = 1000 // Load all products for this promotion
                };

                Console.WriteLine($"Calling GetPromotionDetailWithProductInfoAsync for promotion: {promotionId}");
                var response = await PromotionDetailService.GetPromotionDetailWithProductInfoAsync(request);

                Console.WriteLine($"Response received. Items count: {response?.Items?.Count ?? 0}");

                if (response?.Items != null && response.Items.Any())
                {
                    expandedPromotionProducts[promotionId] = response.Items.ToList();
                    Console.WriteLine($"Added {response.Items.Count} products to expanded list");
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine("No products found or response is null");
                    // Initialize empty list to prevent repeated calls
                    expandedPromotionProducts[promotionId] = new List<PromotionDetailWithProductInfoDTO>();
                }
            }
            else
            {
                Console.WriteLine($"Products already loaded for promotion: {promotionId}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Lỗi khi lấy danh sách sản phẩm trong promotion: " + ex.Message);
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private string GetProductImageUrl(string? imageUrl)
    {
        if (string.IsNullOrEmpty(imageUrl))
            return $"{ApiBaseUrl}/Images/fallback.jpeg";

        if (imageUrl.StartsWith("http"))
            return imageUrl;

        return $"{ApiBaseUrl}/{imageUrl.TrimStart('/')}";
    }
}