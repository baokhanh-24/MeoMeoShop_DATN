@page "/employees-changepassword"
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using MeoMeo.Contract.DTOs
@using MeoMeo.CMS.IServices
@using MeoMeo.Contract.Commons
@using MeoMeo.Contract.DTOs.Employees
@using MeoMeo.Domain.Commons.Enums
@using System.Net.Http.Json;
@using MeoMeo.Utilities
@inject MeoMeo.Utilities.MessageModalService MessageModalService
@rendermode InteractiveServer

@if (Visible)
{
    <Modal Title="Đổi mật khẩu nhân viên" Visible="true" OnCancel="OnCancel" Footer="null">
        <Form Model="@model" OnFinish="HandleValidSubmit">
            <FormItem Label="Mật khẩu mới">
                <Input @bind-Value="model.NewPassword" Password="true" />
            </FormItem>
            <FormItem Label="Xác nhận mật khẩu">
                <Input @bind-Value="confirmPassword" Password="true" />
            </FormItem>

            <div class="text-end">
                <Button OnClick="OnCancel" Type="ButtonType.Default" Class="me-2">Hủy</Button>
                <Button Type="ButtonType.Primary" HtmlType="submit">Lưu</Button>
            </div>
        </Form>
    </Modal>
}

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public Guid UserId { get; set; }

    [Inject] private IEmployeesClientService EmployeeService { get; set; } = default!;

    private ChangePasswordRequestDTO model = new();
    private string confirmPassword = "";

    protected override void OnParametersSet()
    {
        model = new ChangePasswordRequestDTO
            {
                UserId = UserId
            };
        confirmPassword = "";
    }

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrWhiteSpace(model.NewPassword))
        {
            await MessageModalService.Error("Vui lòng nhập mật khẩu.");
            return;
        }

        if (model.NewPassword != confirmPassword)
        {
            await MessageModalService.Error("Mật khẩu xác nhận không khớp.");
            return;
        }

        var result = await EmployeeService.ChangePasswordAsync(model);

        if (result.ResponseStatus == BaseStatus.Success)
        {
            await MessageModalService.Success("Đổi mật khẩu thành công!");
            await VisibleChanged.InvokeAsync(false);
        }
        else
        {
            await MessageModalService.Error(result.Message);
        }
    }

    private async Task OnCancel()
    {
        await VisibleChanged.InvokeAsync(false);
    }
}