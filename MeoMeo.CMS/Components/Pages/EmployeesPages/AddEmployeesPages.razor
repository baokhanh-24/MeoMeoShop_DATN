@page "/add-employees-pages"
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using MeoMeo.Contract.DTOs
@using MeoMeo.Shared.IServices;
@using MeoMeo.Contract.Commons
@using MeoMeo.Domain.Commons.Enums
@using ButtonType = AntDesign.ButtonType
@inject MeoMeo.Shared.Utilities.MessageModalService MessageModalService
@rendermode InteractiveServer

@if (Visible)
{
    <Modal Title="Thêm mới nhân viên" Visible="true" OnCancel="OnCancel" Footer="null" Width="800">
        <Form Model="@employee" OnFinish="HandleValidSubmit" Layout="@FormLayout.Vertical">
            <div class="row">
                <div class="col-md-12">
                    <FormItem Label="Họ và tên" Required>
                        <Input @bind-Value="employee.Name" Placeholder="Nhập họ và tên" MaxLength="100" />
                    </FormItem>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <FormItem Label="Số điện thoại" Required>
                        <Input @bind-Value="employee.PhoneNumber" Placeholder="Nhập số điện thoại" MaxLength="12" />
                    </FormItem>
                </div>
                <div class="col-md-6">
                    <FormItem Label="Email" Required>
                        <Input @bind-Value="employee.Email" Placeholder="Nhập email" />
                    </FormItem>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <FormItem Label="Ngày sinh">
                        <DatePicker Style="width: 100%" @bind-Value="employee.DateOfBird"
                            DisabledDate="date => date > DateTime.Today" />
                    </FormItem>
                </div>
                <div class="col-md-6">
                    <FormItem Label="Trạng thái" Required>
                        <Select TItem="(EEmployeesStatus Value, string Name)" TItemValue="EEmployeesStatus"
                            @bind-Value="employee.StatusEnum" DataSource="StatusList" ItemValue="item => item.Value"
                            ItemLabel="item => item.Name" Placeholder="Chọn trạng thái">
                        </Select>
                    </FormItem>
                </div>
            </div>

            <FormItem Label="Địa chỉ" Required>
                <TextArea @bind-Value="employee.Address" Placeholder="Nhập địa chỉ" Rows="3" MaxLength="255" />
            </FormItem>

            <FormItem Label="Mật khẩu" Required>
                <Input @bind-Value="employee.Password" Placeholder="Nhập mật khẩu" Password="true" />
            </FormItem>

            <div class="text-end">
                <Button OnClick="OnCancel" Type="ButtonType.Default" Class="me-2">Hủy</Button>
                <Button Type="ButtonType.Primary" HtmlType="submit">Lưu</Button>
            </div>
        </Form>
    </Modal>
}

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public EventCallback<CreateOrUpdateEmployeeDTO> OnSave { get; set; }
    [Parameter] public EventCallback OnSuccess { get; set; }

    private CreateOrUpdateEmployeeDTO employee = new();

    [Parameter] public List<(EEmployeesStatus Value, string Name)> StatusList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        employee.Status = 1;
    }

    private async Task HandleValidSubmit()
    {
        // Validation
        if (string.IsNullOrWhiteSpace(employee.Name))
        {
            await MessageModalService.Error("Vui lòng nhập họ và tên!");
            return;
        }

        if (string.IsNullOrWhiteSpace(employee.PhoneNumber))
        {
            await MessageModalService.Error("Vui lòng nhập số điện thoại!");
            return;
        }

        if (string.IsNullOrWhiteSpace(employee.Email))
        {
            await MessageModalService.Error("Vui lòng nhập email!");
            return;
        }

        if (!IsValidEmail(employee.Email))
        {
            await MessageModalService.Error("Email không đúng định dạng!");
            return;
        }

        if (string.IsNullOrWhiteSpace(employee.Address))
        {
            await MessageModalService.Error("Vui lòng nhập địa chỉ!");
            return;
        }

        if (string.IsNullOrWhiteSpace(employee.Password))
        {
            await MessageModalService.Error("Vui lòng nhập mật khẩu!");
            return;
        }

        // Validation ngày sinh
        if (employee.DateOfBird.HasValue && employee.DateOfBird.Value > DateTime.Today)
        {
            await MessageModalService.Error("Ngày sinh không được là ngày tương lai!");
            return;
        }

        await OnSave.InvokeAsync(employee);
        await InvokeAsync(StateHasChanged);
        // Gọi OnSuccess để parent component xử lý việc đóng modal và reset form
        await OnSuccess.InvokeAsync();
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private void ResetForm()
    {
        employee = new CreateOrUpdateEmployeeDTO();
    }

    private async Task OnCancel()
    {
        ResetForm(); // Reset form khi hủy
        await VisibleChanged.InvokeAsync(false);
    }
}