@page "/manage-product"
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Reflection
@using AntDesign.TableModels
@using MeoMeo.Contract.DTOs.Product
@using MeoMeo.Domain.Commons.Enums
@using MeoMeo.Shared.IServices
@using MeoMeo.Contract.Commons
@using MeoMeo.CMS.Components.Common
@using MeoMeo.Contract.DTOs
@using PinguApps.Blazor.QRCode
@using MeoMeo.Contract.DTOs.Size
@using MeoMeo.Shared.Services
@using MeoMeo.Shared.Utilities
@inject IBrandClientService BrandClientService
@inject ISizeClientService SizeClientService
@inject IMaterialClientService MaterialClientService
@inject ISeasonClientService SeasonClientService
@inject IColourClientService ColourClientService
@inject ICategoryClientService CategoryClientService
@inject IProductClientService ProductClientService
@inject MeoMeo.Shared.Utilities.MessageModalService MessageModalService
@inject NavigationManager Navigation
@using ButtonSize = AntDesign.ButtonSize
@using ButtonType = AntDesign.ButtonType
@inject IConfiguration Configuration
<div class="d-flex justify-content-between">
    <Breadcrumb>
        <BreadcrumbItem Href="/">Trang chủ</BreadcrumbItem>
        <BreadcrumbItem Href="/manage-product">Quản lý sản phẩm</BreadcrumbItem>
    </Breadcrumb>
    <div>
        @if (selectedRows != null && selectedRows.Any())
        {
            <Button Class="mb-2" OnClick="() => ShowPopUpConfirm(EProductStatus.Selling)">
                <i class="fa-solid fa-circle-check"></i> Kích hoạt
            </Button>
            <Button Class="mb-2" OnClick="() => ShowPopUpConfirm(EProductStatus.StopSelling)">
                <i class="fa-solid fa-pause"></i> Tạm ngưng
            </Button>
        }
        <Button OnClick="() => ExpandCollapseProduct()" Type="ButtonType.Primary" Class="mb-2">
            <i class="fa-solid @(isExpanded ? "fa-minimize" : "fa-up-right-and-down-left-from-center")"></i>
            @(isExpanded ? " Thu gọn" : " Mở rộng")
        </Button>
        <Button Type="ButtonType.Primary" Class="mb-2" OnClick="@(() => Navigation.NavigateTo("/product/create"))">
            <i class="fa-solid fa-plus"></i> Thêm sản phẩm
        </Button>
    </div>
</div>

<Modal Mask="true" Style="width: 40vw" Title="Xác nhận cập nhật trạng thái sản phẩm"
       Visible="@_visible"
       OnOk="@(productToDelete.HasValue ? ConfirmDelete : ConfirmProduct)"
       OnCancel="@cancelShowModel"
       ConfirmLoading="@_confirmLoading">
    <p>@_modalText</p>
</Modal>

<!-- Variant Status Update Modal -->
<Modal Mask="true" Style="width: 50vw" Title="Cập nhật trạng thái biến thể"
       Visible="@variantStatusModalVisible"
       OnOk="@ConfirmVariantStatusUpdate"
       OnCancel="@CancelVariantStatusUpdate"
       ConfirmLoading="@_confirmLoading">
    @if (variantToUpdate != null)
    {
        <div class="variant-status-modal">
            <div class="mb-3">
                <strong>Biến thể:</strong> @GetColorName(variantToUpdate.ColourId) - @GetSizeName(variantToUpdate.SizeId)
            </div>
            <div class="mb-3">
                <strong>SKU:</strong> @variantToUpdate.Sku
            </div>
            <div class="mb-3">
                <strong>Giá:</strong> @variantToUpdate.Price.ToString("N0") đ
            </div>
            <div class="mb-3">
                <label><strong>Trạng thái mới:</strong></label>
                <Select @bind-Value="currentVariantStatus" DataSource="productStatusList" 
                        ItemValue="s => s.Value" ItemLabel="s => s.Name" 
                        Style="width: 100%" />
            </div>
        </div>
    }
</Modal>

<Tabs DefaultActiveKey="All" @bind-ActiveKey="@activeTab" OnChange="OnTabChange">
    <TabPane Key="All" Tab=@($"Tất cả ({metaData.TotalAll})")/>
    <TabPane Key="Selling" Tab=@($"Đang bán ({metaData.Selling})")/>
    <TabPane Key="StopSelling" Tab=@($"Tạm ngưng ({metaData.StopSelling})")/>
    <TabPane Key="Pending" Tab=@($"Chờ duyệt ({metaData.Pending})")/>
</Tabs>

<div class="d-flex justify-content-end gap-3 mb-2">
    <div style="width: 150px">
        <Input AllowClear="true" OnClear="LoadProductsAsync" @bind-Value="filter.NameFilter"
               Placeholder="Nhập tên sản phẩm"/>
    </div>

    <div style="width: 150px">
        <Select TItem="SelectOption" TItemValue="Guid?"
                AllowClear
                OnSelectedItemChanged="LoadProductsAsync"
                DataSource="@brandOptions"
                @bind-Value="filter.BrandFilter"
                Placeholder="Chọn thương hiệu"
                ItemValue="x => x.Value"
                ItemLabel="x => x.Label">
        </Select>
    </div>

    <div style="width: 150px">
        <Select TItem="SelectOption" TItemValue="Guid?"
                AllowClear
                OnSelectedItemChanged="LoadProductsAsync"
                DataSource="@categoryOptions"
                @bind-Value="filter.CategoryFilter"
                Placeholder="Chọn danh mục"
                ItemValue="x => x.Value"
                ItemLabel="x => x.Label">
        </Select>
    </div>
    <div style="width: 150px">
        <Select TItem="SelectOption" TItemValue="Guid?"
                AllowClear
                OnSelectedItemChanged="LoadProductsAsync"
                DataSource="@sizeOptions"
                @bind-Value="filter.SizeFilter"
                Placeholder="Chọn size"
                ItemValue="x => x.Value"
                ItemLabel="x => x.Label">
        </Select>
    </div>


    <div style="width: 200px" class="d-flex gap-2">
        <AntDesign.InputNumber TValue="decimal?"
                               Placeholder="Từ giá"
                               @bind-Value="filter.MinPriceFilter"
                               OnChange="LoadProductsAsync"
                               Style="width: 90px"/>
        <AntDesign.InputNumber TValue="decimal?"
                               Placeholder="Đến giá"
                               @bind-Value="filter.MaxPriceFilter"
                               OnChange="LoadProductsAsync"
                               Style="width: 90px"/>
    </div>

    <div style="width: 150px">
        <Select TItem="(EProductStatus Value, string Name)"
                TItemValue="EProductStatus?"
                AllowClear
                OnSelectedItemChanged="LoadProductsAsync"
                DataSource="productStatusList"
                @bind-Value="filter.StatusFilter"
                Placeholder="Chọn trạng thái"
                ItemValue="c => (EProductStatus?)c.Value"
                ItemLabel="c => c.Name">
        </Select>
    </div>


    <div style="width: 150px">
        <Select TItem="(EProductSortField Value, string Name)"
                TItemValue="EProductSortField"
                DataSource="sortFieldOptions"
                @bind-Value="filter.SortField"
                Placeholder="Sắp xếp theo"
                ItemValue="c => c.Value"
                ItemLabel="c => c.Name"
                OnSelectedItemChanged="LoadProductsAsync">
        </Select>
    </div>

    <div style="width: 120px">
        <Select TItem="(ESortDirection Value, string Name)"
                TItemValue="ESortDirection"
                DataSource="sortDirectionOptions"
                @bind-Value="filter.SortDirection"
                Placeholder="Thứ tự"
                ItemValue="c => c.Value"
                ItemLabel="c => c.Name"
                OnSelectedItemChanged="LoadProductsAsync">
        </Select>
    </div>

    <Tooltip Title="Tìm kiếm">
        <Button @onclick="() => LoadProductsAsync()" Type="ButtonType.Primary" Shape="ButtonShape.Circle"
                Icon="@IconType.Outline.Search"/>
    </Tooltip>

    <Tooltip Title="Làm mới">
        <Button @onclick="() => ResetFilters()" Type="ButtonType.Default" Shape="ButtonShape.Circle"
                Icon="@IconType.Outline.Reload"/>
    </Tooltip>
</div>

<Table @ref="productTable" OnChange="@OnPageChange" PageSize="@filter.PageSize" Total="@totalRecords"
       @bind-SelectedRows="selectedRows" RowKey="x => x.Id" TItem="ProductResponseDTO" DataSource="products"
       RowExpandable="IsRowExpandable">
    <ColumnDefinitions>
        <Column TData="ProductResponseDTO" Title="STT">
            @{
                var indexInPage = products.IndexOf(context);
                var stt = (filter.PageIndex - 1) * filter.PageSize + indexInPage + 1;
            }
            @stt
        </Column>
        <PropertyColumn Property="p => p.Name" Title="Tên sản phẩm"/>
        <Column TData="ProductResponseDTO" Title="Ảnh thumbnail">
            <Image Width="150" Fallback="@(backendUrl + "/Images/fallback.jpeg")" Src="@(backendUrl + "/" + context.Thumbnail)"
                   Class="image-preview"/>
        </Column>
        <PropertyColumn Property="p => p.BrandName" Title="Thương hiệu"/>
        <PropertyColumn Property="p => p.ProductVariants.Count" Title="Số biến thể"/>

        <Column TData="ProductResponseDTO" Title="Giá từ">
            @{
                var minPrice = context.ProductVariants?.Any() == true
                    ? context.ProductVariants.Min(v => v.Price)
                    : 0;
            }
            @(FormatCurrency.ToVnCurrency((decimal)minPrice, true))
        </Column>

        <Column TData="ProductResponseDTO" Title="Giá đến">
            @{
                var maxPrice = context.ProductVariants?.Any() == true
                    ? context.ProductVariants.Max(v => v.Price)
                    : 0;
            }
            @(FormatCurrency.ToVnCurrency((decimal)maxPrice, true))
        </Column>
        <PropertyColumn Property="p => p.CreationTime" Title="Ngày tạo"/>
        <ActionColumn Title="Thao tác" Class="text-end gap-2" Width="200">
            <Tooltip Title="Chỉnh sửa">
                <Button Size="ButtonSize.Small" Shape="ButtonShape.Circle" OnClick="@(() => EditProduct(context.Id))">
                    <i class="fa-solid fa-edit text-primary"></i>
                </Button>
            </Tooltip>
            <Tooltip Title="Xem chi tiết">
                <Button Size="ButtonSize.Small" Shape="ButtonShape.Circle" OnClick="@(() => ViewProduct(context.Id))">
                    <i class="fa-solid fa-eye text-info"></i>
                </Button>
            </Tooltip>
            <Tooltip Title="Xóa">
                <Button Size="ButtonSize.Small" Shape="ButtonShape.Circle" OnClick="@(() => DeleteProduct(context.Id))">
                    <i class="fa-solid fa-trash text-danger"></i>
                </Button>
            </Tooltip>
        </ActionColumn>
    </ColumnDefinitions>

    <ExpandTemplate Context="expandedData">
        <div class="p-3">
            <h6 class="mb-3">Chi tiết biến thể sản phẩm: @expandedData.Data.Name</h6>
            <Table TItem="ProductDetailGrid" DataSource="@expandedData.Data.ProductVariants" Size="TableSize.Small">
                <ColumnDefinitions>
                    <PropertyColumn Property="p => p.Sku" Title="Sku"/>
                    <PropertyColumn Property="p => GetSizeName(p.SizeId)" Title="Size"/>
                    <PropertyColumn Property="p => GetColorName(p.ColourId)" Title="Màu sắc"/>
                    <Column TData="ProductDetailGrid" Title="Giá bán (Vnđ)">
                        @(FormatCurrency.ToVnCurrency((decimal)context.Price, true))
                    </Column>
                    <PropertyColumn Property="p => p.StockHeight" Title="Chiều cao đế (cm)"/>
                    <PropertyColumn Property="p => p.OutOfStock" Title="Số lượng cảnh báo hết hàng"/>
                    <PropertyColumn Property="p => GetClosureTypeName(p.ClosureType)" Title="Kiểu đóng"/>
                    <PropertyColumn Property="p => p.SellNumber" Title="Số lượng đã bán"/>
                    <PropertyColumn Property="p => p.ViewNumber" Title="Lượt xem"/>
                  
                    <Column TData="ProductDetailGrid" Title="Cho phép trả">
                        @(context.AllowReturn? "Có":"Không")
                    </Column>
                    <Column TData="ProductDetailGrid" Title="Trạng thái">
                        @GetStatusName((EProductStatus)context.Status)
                    </Column>
                    <ActionColumn Title="Thao tác" Width="150">
                        <Tooltip Title="Cập nhật trạng thái">
                            <Button Size="ButtonSize.Small" Shape="ButtonShape.Circle"
                                    OnClick="@(() => UpdateVariantStatus(context))">
                                <i class="fa-solid fa-edit text-primary"></i>
                            </Button>
                        </Tooltip>
                        <Tooltip Title="Tạo QR Code">
                            <Button Size="ButtonSize.Small" Shape="ButtonShape.Circle" 
                                    OnClick="@(() => ShowVariantQRCode(context, expandedData.Data))">
                                <i class="fa-solid fa-qrcode text-info"></i>
                            </Button>
                        </Tooltip>
                    </ActionColumn>
                </ColumnDefinitions>
            </Table>
        </div>
    </ExpandTemplate>
</Table>

<!-- QR Code Modal cho Product -->
<Modal Title="@($"QR Code - {selectedProductForQR?.SKU}")" 
       Visible="@qrModalVisible" 
       OnCancel="@CloseQRModal" 
       Footer="null"
       Width="400">
    @if (selectedProductForQR != null && !string.IsNullOrEmpty(selectedProductForQR.SKU))
    {
        <div style="text-align: center;">
            <QRCodeProduct Product="@selectedProductForQR" QrSize="250px" />
        </div>
    }
</Modal>

<!-- QR Code Modal cho Variant -->
<Modal Title="@($"QR Code - {selectedVariantForQR?.SKU}")" 
       Visible="@variantQRModalVisible" 
       OnCancel="@CloseVariantQRModal" 
       Footer="null"
       Width="400">
    @if (selectedVariantForQR != null && !string.IsNullOrEmpty(selectedVariantForQR.SKU))
    {
        <div style="text-align: center;">
            <QRCodeProduct Product="@selectedVariantForQR" QrSize="250px" />
        </div>
    }
</Modal>

@code {
    ITable productTable;
    List<ProductResponseDTO> products = new();
    private string activeTab = "All";
    private EProductStatus targetStatusProduct;
    private GetListProductResponseDTO metaData = new();
    private int totalRecords = 0;
    private bool isExpanded = false;
    IEnumerable<ProductResponseDTO> selectedRows;
    bool _visible = false;
    bool _confirmLoading = false;
    string _modalText = "";
    SelectionType selectionType = SelectionType.Checkbox;
    List<(EProductStatus Value, string Name)> productStatusList = new();
    Guid? productToDelete;
    private string backendUrl = "";
    
    // Variant status update variables
    private ProductDetailGrid? variantToUpdate;
    private EProductStatus currentVariantStatus;
    private bool variantStatusModalVisible = false;

    // QR Code modal variables
    private bool qrModalVisible = false;
    private ProductSearchResponseDTO? selectedProductForQR;
    
    // Variant QR Code modal variables
    private bool variantQRModalVisible = false;
    private ProductSearchResponseDTO? selectedVariantForQR;

    // Dropdown options
    private List<SelectOption> brandOptions = new();
    private List<SelectOption> categoryOptions = new();
    private List<SelectOption> colorOptions = new();
    private List<SelectOption> sizeOptions = new();
    private List<(EProductSortField Value, string Name)> sortFieldOptions = new();
    private List<(ESortDirection Value, string Name)> sortDirectionOptions = new();

    GetListProductRequestDTO filter = new GetListProductRequestDTO()
    {
        PageIndex = 1,
        PageSize = 10,
        NameFilter = "",
        BrandFilter = null,
        CategoryFilter = null,
        MaterialFilter = null,
        SeasonFilter = null,
        SizeFilter = null,
        ColourFilter = null,
        MinPriceFilter = null,
        MaxPriceFilter = null,
        MinStockHeightFilter = null,
        MaxStockHeightFilter = null,
        MinSellNumberFilter = null,
        MaxSellNumberFilter = null,
        ClosureTypeFilter = null,
        StatusFilter = null,
        AllowReturnFilter = null,
        SortField = EProductSortField.CreationTime,
        SortDirection = ESortDirection.Desc
    };

    protected override async Task OnInitializedAsync()
    {
        backendUrl = Configuration["ApiSettings:BaseUrl"] ?? "";
        productStatusList = Enum.GetValues(typeof(EProductStatus))
            .Cast<EProductStatus>()
            .Select(x => (
                x,
                x.GetType().GetMember(x.ToString())
                    .First()
                    .GetCustomAttribute<DisplayAttribute>()?.Name ?? x.ToString()
            ))
            .ToList();

        // Load sort field options with DisplayName
        sortFieldOptions = Enum.GetValues(typeof(EProductSortField))
            .Cast<EProductSortField>()
            .Select(x => (
                x,
                x.GetType().GetMember(x.ToString())
                    .First()
                    .GetCustomAttribute<DisplayAttribute>()?.Name ?? x.ToString()
            ))
            .ToList();

        // Load sort direction options with DisplayName
        sortDirectionOptions = Enum.GetValues(typeof(ESortDirection))
            .Cast<ESortDirection>()
            .Select(x => (
                x,
                x.GetType().GetMember(x.ToString())
                    .First()
                    .GetCustomAttribute<DisplayAttribute>()?.Name ?? x.ToString()
            ))
            .ToList();

        await LoadDropdownData();
        await LoadProductsAsync();
    }

    private async Task LoadDropdownData()
    {
        try
        {
            var brandTask = BrandClientService.GetAllBrandAsync(new GetListBrandRequestDTO { PageSize = Int32.MaxValue, PageIndex = 1 });
            var sizeTask = SizeClientService.GetAllSizeAsync(new GetListSizeRequestDTO { PageSize = Int32.MaxValue, PageIndex = 1 });
            var materialTask = MaterialClientService.GetAllMaterialsAsync(new GetListMaterialRequest { PageSize = Int32.MaxValue, PageIndex = 1 });
            var seasonTask = SeasonClientService.GetAllSeasonsAsync(new GetListSeasonRequestDTO { PageSize = Int32.MaxValue, PageIndex = 1 });
            var colourTask = ColourClientService.GetAllColoursAsync();
            var categoryTask = CategoryClientService.GetAllCategoriesAsync();
            await Task.WhenAll(brandTask, sizeTask, materialTask, seasonTask, colourTask, categoryTask);

            var brandResponse = await brandTask;
            brandOptions = brandResponse.Items?.Select(x => new SelectOption { Value = x.Id, Label = x.Name }).ToList() ?? new List<SelectOption>();

            var sizeResponse = await sizeTask;
            sizeOptions = sizeResponse.Items?.Select(x => new SelectOption { Value = x.Id, Label = x.Value }).ToList() ?? new List<SelectOption>();
            var colours = await colourTask;
            colorOptions = colours?.Select(x => new SelectOption { Value = x.Id, Label = x.Name }).ToList() ?? new List<SelectOption>();

            var categories = await categoryTask;
            categoryOptions = categories?.Select(x => new SelectOption { Value = x.Id, Label = x.Name }).ToList() ?? new List<SelectOption>();
        }
        catch (Exception ex)
        {
            await MessageModalService.Error($"Lỗi khi tải dữ liệu: {ex.Message}");
        }
    }


    private void ResetFilters()
    {
        filter = new GetListProductRequestDTO()
        {
            PageIndex = 1,
            PageSize = 10,
            NameFilter = "",
            BrandFilter = null,
            CategoryFilter = null,
            MaterialFilter = null,
            SeasonFilter = null,
            SizeFilter = null,
            ColourFilter = null,
            MinPriceFilter = null,
            MaxPriceFilter = null,
            MinStockHeightFilter = null,
            MaxStockHeightFilter = null,
            MinSellNumberFilter = null,
            MaxSellNumberFilter = null,
            ClosureTypeFilter = null,
            StatusFilter = null,
            AllowReturnFilter = null,
            SortField = EProductSortField.CreationTime,
            SortDirection = ESortDirection.Desc
        };
        selectedRows = new List<ProductResponseDTO>();
        LoadProductsAsync();
    }

    private void OnClickConfirm(EProductStatus status, ProductResponseDTO context)
    {
        selectedRows = new List<ProductResponseDTO>()
        {
            context
        };
        ShowPopUpConfirm(status);
    }

    private void ShowPopUpConfirm(EProductStatus status)
    {
        targetStatusProduct = status;

        // Get display name for action text
        var displayAttribute = status.GetType()
            .GetField(status.ToString())
            ?.GetCustomAttribute<DisplayAttribute>();

        string statusName = displayAttribute?.Name ?? status.ToString();
        string actionText = status switch
        {
            EProductStatus.Selling => "kích hoạt",
            EProductStatus.StopSelling => "tạm ngưng",
            EProductStatus.Pending => "chuyển về chờ duyệt",
            EProductStatus.Rejected => "từ chối",
            EProductStatus.Draft => "lưu tạm",
            _ => "thay đổi trạng thái"
        };

        _modalText = $"Bạn có chắc chắn muốn {actionText} sản phẩm {string.Join(",", selectedRows.Reverse().Select(c => c.Name))}";
        _visible = true;
    }

    private async void ExpandCollapseProduct()
    {
        isExpanded = !isExpanded;
        if (isExpanded)
        {
            productTable.ExpandAll();
        }
        else
        {
            productTable.CollapseAll();
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task cancelShowModel()
    {
        _visible = false;
        _confirmLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ConfirmProduct()
    {
        _confirmLoading = true;
        try
        {
            foreach (var product in selectedRows)
            {
                var updateStatus = new UpdateProductStatusDTO
                {
                    Id = product.Id,
                    Status = targetStatusProduct
                };

                var result = await ProductClientService.UpdateProductVariantStatusAsync(updateStatus);
                if (result.ResponseStatus != BaseStatus.Success)
                {
                    await MessageModalService.Error($"Lỗi cập nhật sản phẩm {product.Name}: {result.Message}");
                    return;
                }
            }

            await cancelShowModel();
            await MessageModalService.Success("Cập nhật trạng thái sản phẩm thành công");
            selectedRows = new List<ProductResponseDTO>();
            await LoadProductsAsync();
        }
        catch (Exception ex)
        {
            await MessageModalService.Error($"Lỗi: {ex.Message}");
        }
        finally
        {
            _confirmLoading = false;
        }
    }

    private async Task OnPageChange(QueryModel<ProductResponseDTO> query)
    {
        filter.PageIndex = query.PageIndex;
        filter.PageSize = query.PageSize;
        await LoadProductsAsync();
    }

    private async Task OnTabChange()
    {
        if (activeTab == "All")
        {
            filter.StatusFilter = null;
        }
        else if (Enum.TryParse<EProductStatus>(activeTab, out var status))
        {
            filter.StatusFilter = status;
        }

        selectedRows = new List<ProductResponseDTO>();
        await LoadProductsAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadProductsAsync()
    {
        filter.NameFilter = filter.NameFilter?.Trim();
        var response = await ProductClientService.GetAllProductAsync(filter);
        products = response.Items ?? new List<ProductResponseDTO>();
        metaData = response.Metadata ?? new GetListProductResponseDTO();
        totalRecords = response.TotalRecords;
        await InvokeAsync(StateHasChanged);
    }

    private void EditProduct(Guid productId)
    {
        Navigation.NavigateTo($"/product/update/{productId}");
    }

    private void ViewProduct(Guid productId)
    {
        Navigation.NavigateTo($"/product/detail/{productId}");
    }

    private async Task DeleteProduct(Guid productId)
    {
        _modalText = "Bạn có chắc chắn muốn xóa sản phẩm này?";
        _visible = true;
        productToDelete = productId;
    }

    private async Task ConfirmDelete()
    {
        if (productToDelete.HasValue)
        {
            var result = await ProductClientService.DeleteProductAsync(productToDelete.Value);
            if (result.ResponseStatus == BaseStatus.Success)
            {
                await MessageModalService.Success("Xóa sản phẩm thành công");
                await LoadProductsAsync();
            }
            else
            {
                await MessageModalService.Error($"Lỗi: {result.Message}");
            }

            productToDelete = null;
        }

        await cancelShowModel();
    }

    private async Task UpdateVariantStatus(ProductDetailGrid variant)
    {
        if (variant.Id.HasValue)
        {
            // Show modal to select new status
            await ShowVariantStatusModal(variant);
        }
        else
        {
            await MessageModalService.Warning("Không thể cập nhật trạng thái cho biến thể chưa được lưu");
        }
    }

    private async Task ShowVariantStatusModal(ProductDetailGrid variant)
    {
        variantToUpdate = variant;
        currentVariantStatus = variant.Status;
        variantStatusModalVisible = true;
        StateHasChanged();
    }

    private async Task ConfirmVariantStatusUpdate()
    {
        if (variantToUpdate == null || !variantToUpdate.Id.HasValue)
        {
            await MessageModalService.Error("Không có biến thể để cập nhật");
            return;
        }

        try
        {
            var updateRequest = new UpdateProductStatusDTO
            {
                Id = variantToUpdate.Id.Value,
                Status = currentVariantStatus
            };

            var result = await ProductClientService.UpdateProductVariantStatusAsync(updateRequest);
            if (result.ResponseStatus == BaseStatus.Success)
            {
                await MessageModalService.Success("Cập nhật trạng thái biến thể thành công");
                await LoadProductsAsync();
            }
            else
            {
                await MessageModalService.Error($"Lỗi cập nhật trạng thái: {result.Message}");
            }
        }
        catch (Exception ex)
        {
            await MessageModalService.Error($"Lỗi: {ex.Message}");
        }
        finally
        {
            variantStatusModalVisible = false;
            variantToUpdate = null;
            StateHasChanged();
        }
    }

    private void CancelVariantStatusUpdate()
    {
        variantStatusModalVisible = false;
        variantToUpdate = null;
        StateHasChanged();
    }

    private async Task ViewVariants(ProductResponseDTO product)
    {
        Navigation.NavigateTo($"/product/variants/{product.Id}");
    }

    private bool IsRowExpandable(RowData<ProductResponseDTO> rowData)
    {
        return rowData.Data.ProductVariants != null && rowData.Data.ProductVariants.Any();
    }

    string GetStatusName(EProductStatus status)
    {
        var displayAttribute = status.GetType()
            .GetField(status.ToString())
            ?.GetCustomAttribute<DisplayAttribute>();

        return displayAttribute?.Name ?? status.ToString();
    }

    string GetColorName(Guid colorId)
    {
        return colorOptions.FirstOrDefault(x => x.Value == colorId)?.Label ?? "N/A";
    }

    string GetSizeName(Guid sizeId)
    {
        return sizeOptions.FirstOrDefault(x => x.Value == sizeId)?.Label ?? "N/A";
    }

    string GetClosureTypeName(EClosureType closureType)
    {
        var displayAttribute = closureType.GetType()
            .GetField(closureType.ToString())
            ?.GetCustomAttribute<DisplayAttribute>();
        return displayAttribute?.Name ?? closureType.ToString();
    }

    public class SelectOption
    {
        public Guid Value { get; set; }
        public string Label { get; set; } = string.Empty;
    }

    // QR Code methods
    private void ShowQRCode(ProductResponseDTO product)
    {
        var firstVariant = product.ProductVariants?.FirstOrDefault();
        if (firstVariant == null || string.IsNullOrEmpty(firstVariant.Sku))
        {
            MessageModalService.Warning("Sản phẩm chưa có biến thể hoặc SKU");
            return;
        }
        
        selectedProductForQR = new ProductSearchResponseDTO
        {
            ProductDetailId = firstVariant.Id ?? Guid.Empty,
            ProductId = product.Id,
            SKU = firstVariant.Sku ?? string.Empty,
            ProductName = product.Name ?? string.Empty,
            Price = (decimal)firstVariant.Price,
            BrandName = product.BrandName ?? string.Empty,
            SizeValue = GetSizeName(firstVariant.SizeId),
            ColourName = GetColorName(firstVariant.ColourId),
            StockQuantity = 0,
            CategoryName = product.CategoryNames?.FirstOrDefault() ?? string.Empty,
            Material = product.MaterialNames?.FirstOrDefault() ?? string.Empty,
            Season = product.SeasonNames?.FirstOrDefault() ?? string.Empty,
            Thumbnail = product.Thumbnail ?? string.Empty,
            Description = string.Empty,
            Weight = firstVariant.Weight,
            Dimensions = $"{firstVariant.Length}x{firstVariant.Width}x{firstVariant.Height}",
            AllowReturn = firstVariant.AllowReturn,
            IsActive = firstVariant.Status == EProductStatus.Selling
        };
        qrModalVisible = true;
        StateHasChanged();
    }

    private void ShowVariantQRCode(ProductDetailGrid variant, ProductResponseDTO parentProduct)
    {
        if (string.IsNullOrEmpty(variant.Sku))
        {
            MessageModalService.Warning("Variant này chưa có SKU");
            return;
        }
        
        selectedVariantForQR = new ProductSearchResponseDTO
        {
            ProductDetailId = variant.Id ?? Guid.Empty,
            ProductId = parentProduct.Id,
            SKU = variant.Sku ?? string.Empty,
            ProductName = parentProduct.Name ?? string.Empty,
            Price = (decimal)variant.Price,
            BrandName = parentProduct.BrandName ?? string.Empty,
            SizeValue = GetSizeName(variant.SizeId),
            ColourName = GetColorName(variant.ColourId),
            StockQuantity = 0, // Không có stock trong ProductDetailGrid
            CategoryName = parentProduct.CategoryNames?.FirstOrDefault() ?? string.Empty,
            Material = parentProduct.MaterialNames?.FirstOrDefault() ?? string.Empty,
            Season = parentProduct.SeasonNames?.FirstOrDefault() ?? string.Empty,
            Thumbnail = parentProduct.Thumbnail ?? string.Empty,
            Description = string.Empty,
            Weight = variant.Weight,
            Dimensions = $"{variant.Length}x{variant.Width}x{variant.Height}",
            AllowReturn = variant.AllowReturn,
            IsActive = variant.Status == EProductStatus.Selling
        };
        variantQRModalVisible = true;
        StateHasChanged();
    }

    private void CloseQRModal()
    {
        qrModalVisible = false;
        selectedProductForQR = null;
        StateHasChanged();
    }
    
    private void CloseVariantQRModal()
    {
        variantQRModalVisible = false;
        selectedVariantForQR = null;
        StateHasChanged();
    }

}