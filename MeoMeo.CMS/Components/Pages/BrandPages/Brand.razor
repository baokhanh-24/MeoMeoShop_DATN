@page "/manage-brand"

@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using MeoMeo.Contract.DTOs
@using MeoMeo.CMS.IServices
@using MeoMeo.Contract.Commons
@using MeoMeo.Domain.Commons.Enums
@inject MeoMeo.Utilities.MessageModalService MessageModalService
@rendermode InteractiveServer

<div class="d-flex justify-content-between mb-2">
    <Button OnClick="AddNewBrand" Type="ButtonType.Primary">
        <i class="fas fa-plus"></i> Thêm mới
    </Button>
    <div style="width: 200px">
        <Input AllowClear="true" OnClear="OnFilterChanged" @bind-Value="filter.NameFilter" Placeholder="Nhập tên Brand" />
    </div>
    <Button @onclick="OnFilterChanged" Type="ButtonType.Primary" Shape="ButtonShape.Circle" Icon="@IconType.Outline.Search" />
</div>

<Table DataSource="listOfData" TItem="BrandDTO" Bordered TableLayout="fixed">
    <ChildContent Context="data">
        <Column TData="string" Title="Tên">
            @if (editCache.ContainsKey(data.Id) && !editCache[data.Id].edit)
            {
                @data.Name
            }
            else if (editCache.ContainsKey(data.Id))
            {
                <Input MaxLength="100" @bind-Value="editCache[data.Id].data.Name" />
            }
        </Column>
        <Column TData="string" Title="Mã Code">
            @if (editCache.ContainsKey(data.Id) && !editCache[data.Id].edit)
            {
                @data.Code
            }
            else if (editCache.ContainsKey(data.Id))
            {
                <Input MaxLength="50" @bind-Value="editCache[data.Id].data.Code" />
            }
        </Column>
        <Column TData="string" Title="Quốc gia">
            @if (editCache.ContainsKey(data.Id) && !editCache[data.Id].edit)
            {
                @data.Country
            }
            else if (editCache.ContainsKey(data.Id))
            {
                <Input MaxLength="50" @bind-Value="editCache[data.Id].data.Country" />
            }
        </Column>
        <Column TData="string" Title="Năm thành lập">
            @if (editCache.ContainsKey(data.Id) && !editCache[data.Id].edit)
            {
                @data.EstablishYear.ToString("yyyy")
            }
            else if (editCache.ContainsKey(data.Id))
            {
                <Input @bind-Value="editCache[data.Id].data.EstablishYear" Type="InputType.Date" />
            }
        </Column>
        <Column TData="string" Title="Mô tả">
            @if (editCache.ContainsKey(data.Id) && !editCache[data.Id].edit)
            {
                @data.Description
            }
            else if (editCache.ContainsKey(data.Id))
            {
                <Input MaxLength="500" @bind-Value="editCache[data.Id].data.Description" />
            }
        </Column>

        <ActionColumn Title="Thao tác" Class="text-end gap-2">
            @if (editCache.ContainsKey(data.Id) && !editCache[data.Id].edit)
            {
                <Button Size="ButtonSize.Small" @onclick="() => StartEdit(data.Id)" Shape="ButtonShape.Circle">
                    <i class="fas fa-pen"></i>
                </Button>
                <Button Size="ButtonSize.Small" @onclick="() => DeleteBrand(data.Id)" Danger Shape="ButtonShape.Circle">
                    <i class="fas fa-minus"></i>
                </Button>
            }
            else if (editCache.ContainsKey(data.Id))
            {
                <Button Size="ButtonSize.Small" @onclick="() => SaveEdit(data.Id)" Shape="ButtonShape.Circle">
                    <i class="fas fa-check"></i>
                </Button>
                <Button Size="ButtonSize.Small" @onclick="() => CancelEdit(data.Id)" Shape="ButtonShape.Circle">
                    <i class="fa-solid fa-xmark"></i>
                </Button>
            }
        </ActionColumn>
    </ChildContent>
</Table>

@code {
    [Inject] private IBrandClientService BrandClientService { get; set; } = default!;

    IDictionary<Guid, (bool edit, BrandDTO data)> editCache = new Dictionary<Guid, (bool, BrandDTO)>();
    List<BrandDTO> listOfData = new();

    GetListBrandRequestDTO filter = new GetListBrandRequestDTO
        {
            NameFilter = "",
            PageIndex = 1,
            PageSize = 10
        };

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        var response = await BrandClientService.GetAllBrandAsync(filter);

        if (response?.Items != null)
        {
            listOfData = response.Items;
            editCache = listOfData.ToDictionary(
                item => item.Id,
                item => (false, CloneBrand(item))
            );
        }
        else
        {
            listOfData = new List<BrandDTO>();
            editCache = new Dictionary<Guid, (bool, BrandDTO)>();
        }

        await InvokeAsync(StateHasChanged);
    }

    async Task OnFilterChanged()
    {
        await LoadDataAsync();
    }

    async Task AddNewBrand()
    {
        var newBrand = new BrandDTO
            {
                Id = Guid.Empty,
                Name = "",
                Code = "",
                Country = "",
                Description = "",
                EstablishYear = DateTime.UtcNow
            };

        listOfData.Insert(0, newBrand);
        editCache[newBrand.Id] = (true, CloneBrand(newBrand));
        await InvokeAsync(StateHasChanged);
    }

    async Task StartEdit(Guid id)
    {
        if (editCache.ContainsKey(id))
        {
            editCache[id] = (true, editCache[id].data);
            await InvokeAsync(StateHasChanged);
        }
    }

    async Task CancelEdit(Guid id)
    {
        if (id == Guid.Empty)
        {
            listOfData.RemoveAll(x => x.Id == id);
            editCache.Remove(id);
        }
        else
        {
            var original = listOfData.First(x => x.Id == id);
            editCache[id] = (false, CloneBrand(original));
        }
        await InvokeAsync(StateHasChanged);
    }

    async Task SaveEdit(Guid id)
    {
        var dto = editCache[id].data;
        bool success = false;

        try
        {
            // ✅ Kiểm tra năm thành lập
            if (dto.EstablishYear.Year > 1900 || dto.EstablishYear.Year > DateTime.Now.Year)
            {
                await MessageModalService.Error("Năm thành lập không hợp lệ. Vui lòng nhập từ 1900 đến hiện tại.");
                return;
            }

            if (dto.Id == Guid.Empty)
            {
                var created = await BrandClientService.CreateBrandAsync(new CreateOrUpdateBrandDTO
                    {
                        Id = dto.Id,
                        Name = dto.Name,
                        Code = dto.Code,
                        Country = dto.Country,
                        Description = dto.Description,
                        EstablishYear = dto.EstablishYear
                    });
                success = created != null && created.Id != Guid.Empty;
            }
            else
            {
                var updated = await BrandClientService.UpdateBrandAsync(new CreateOrUpdateBrandDTO
                    {
                        Id = dto.Id,
                        Name = dto.Name,
                        Code = dto.Code,
                        Country = dto.Country,
                        Description = dto.Description,
                        EstablishYear = dto.EstablishYear
                    });
                success = updated != null && updated.ResponseStatus == BaseStatus.Success;
            }

            if (success)
            {
                await MessageModalService.Success("Lưu Brand thành công!");
                await LoadDataAsync();
            }
            else
            {
                await MessageModalService.Error("Lưu Brand thất bại");
            }
        }
        catch (Exception ex)
        {
            await MessageModalService.Error($"Lỗi khi lưu Brand: {ex.Message}");
        }
    }


    async Task DeleteBrand(Guid id)
    {
        bool success = await BrandClientService.DeleteBrandAsync(id);
        if (success)
        {
            listOfData.RemoveAll(x => x.Id == id);
            editCache.Remove(id);
            await MessageModalService.Success("Xóa Brand thành công!");
        }
        else
        {
            await MessageModalService.Error("Xóa Brand thất bại");
        }
        await InvokeAsync(StateHasChanged);
    }

    BrandDTO CloneBrand(BrandDTO dto)
    {
        return new BrandDTO
            {
                Id = dto.Id,
                Name = dto.Name,
                Code = dto.Code,
                Country = dto.Country,
                Description = dto.Description,
                Logo = dto.Logo,
                EstablishYear = dto.EstablishYear
            };
    }
}