@* @page "/product/edit/{Id:guid}" *@
@* @using AntDesign *@
@* @using MeoMeo.Shared.Utilities *@
@* @using MeoMeo.Contract.DTOs.ProductDetail *@
@* @using MeoMeo.Domain.Commons.Enums *@
@* @using Microsoft.AspNetCore.Http *@
@* @using MeoMeo.Contract.Commons *@
@* @using MeoMeo.Shared.IServices *@
@* @using MeoMeo.Contract.DTOs *@
@* @using MeoMeo.Contract.DTOs.Size *@
@* @using System.ComponentModel.DataAnnotations *@
@* @using System.Reflection *@
@* @using ButtonSize = AntDesign.ButtonSize *@
@* @using ButtonType = AntDesign.ButtonType *@
@* @inject IProductDetailClientService ProductDetailClientService *@
@* @inject NavigationManager Navigation *@
@* @inject MessageModalService MessageModalService *@
@* @inject IBrandClientService BrandClientService *@
@* @inject ISizeClientService SizeClientService *@
@* @inject IMaterialClientService MaterialClientService *@
@* @inject ISeasonClientService SeasonClientService *@
@* @inject IColourClientService ColourClientService *@
@* @inject ICategoryClientService CategoryClientService *@
@* *@
@* <div class="d-flex justify-content-between mb-3"> *@
@*     <Breadcrumb> *@
@*         <BreadcrumbItem Href="/">Trang chủ</BreadcrumbItem> *@
@*         <BreadcrumbItem Href="/manage-product-detail">Quản lý sản phẩm</BreadcrumbItem> *@
@*         <BreadcrumbItem Href="/manage-product-detail">Chỉnh sửa sản phẩm</BreadcrumbItem> *@
@*     </Breadcrumb> *@
@*     <div> *@
@*         <Button Icon="@IconType.Outline.Close" OnClick="ResetData">Hủy</Button> *@
@*         <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Check" HtmlType="submit" *@
@*             OnClick="@(() => HandleSave(0))" Loading="@isLoading">Lưu</Button> *@
@*         <Button Icon="@IconType.Outline.Send" OnClick="@(() => HandleSave(3))" Loading="@isLoading">Gửi duyệt</Button> *@
@*         <Button Icon="@IconType.Outline.ArrowLeft" OnClick="GoBack">Quay lại</Button> *@
@*     </div> *@
@* </div> *@
@* *@
@* @if (isLoading) *@
@* { *@
@*     <div class="text-center mt-5"> *@
@*         <Spin Size="SpinSize.Large" /> *@
@*         <div style="margin-top: 8px;">Đang tải dữ liệu sản phẩm...</div> *@
@*     </div> *@
@* } *@
@* else if (productDetail == null) *@
@* { *@
@*     <div class="alert alert-danger mt-4" role="alert"> *@
@*         Không tìm thấy sản phẩm. *@
@*     </div> *@
@* } *@
@* else *@
@* { *@
@*     <Form Model="@productModel" Layout="@FormLayout.Vertical" ValidateOnChange="true" ValidateMode="FormValidateMode.Rules" *@
@*         @ref="form"> *@
@*         <Card Title="Thông tin chung" Style="margin-bottom: 24px;"> *@
@*             <Row Gutter="16"> *@
@*                 <Col Span="6"> *@
@*                 <FormItem Label="Tên sản phẩm" Required="true" *@
@*                     Rules="@(new[] { new FormValidationRule { Required = true, Message = "Tên sản phẩm không được phép để trống" } })"> *@
@*                     <Input @bind-Value="@context.ProductName" Placeholder="Nhập tên sản phẩm..." /> *@
@*                 </FormItem> *@
@*     </Col> *@
@*                 <Col Span="6"> *@
@*                 <FormItem Label="Thương hiệu" Required="true" *@
@*                     Rules="@(new[] { new FormValidationRule { Required = true, Message = "Thương hiệu không được phép để trống" } })"> *@
@*                     <Select TItem="SelectOption" TItemValue="Guid" DataSource="@brandOptions" @bind-Value="@context.BrandId" *@
@*                         Placeholder="Chọn thương hiệu" ShowSearch="true" AllowClear="true" ItemValue="x => x.Value" *@
@*                         ItemLabel="x => x.Label" /> *@
@*                 </FormItem> *@
@*     </Col> *@
@*                 <Col Span="6"> *@
@*                 <FormItem Label="Giá bán (đ)" Required="true" *@
@*                     Rules="@(new[] { new FormValidationRule { Required = true, Type = FormFieldType.Number, Min = 1, Message = "Giá bán không được phép để trống và phải lớn hơn 0" } })"> *@
@*                     <AntDesign.InputNumber TValue="float" @bind-Value="@context.Price" Placeholder="Nhập giá..." Min="1" *@
@*                         Style="width: 100%;" /> *@
@*                 </FormItem> *@
@*     </Col> *@
@*                 <Col Span="6"> *@
@*                 <FormItem Label="Size" Required="true" *@
@*                     Rules="@(new[] { new FormValidationRule { Required = true, Type = FormFieldType.Array, Message = "Size không được phép để trống" } })"> *@
@*                     <Select TItem="SelectOption" TItemValue="Guid" DataSource="@sizeOptions" @bind-Values="@context.SizeIds" *@
@*                         Mode="SelectMode.Multiple" Placeholder="Chọn size" ShowSearch="true" AllowClear="true" *@
@*                         ItemValue="x => x.Value" ItemLabel="x => x.Label" /> *@
@*                 </FormItem> *@
@*     </Col> *@
@*     </Row> *@
@*             <Row Gutter="16"> *@
@*                 <Col Span="24"> *@
@*                 <FormItem Label="Mô tả"> *@
@*                     <TextArea @bind-Value="@context.Description" Placeholder="Nhập mô tả sản phẩm..." Rows="3" /> *@
@*                 </FormItem> *@
@*     </Col> *@
@*     </Row> *@
@*     </Card> *@
@*         <Card Title="Thông tin cơ bản" Style="margin-bottom: 200px;"> *@
@*             <Row Gutter="16"> *@
@*                 <Col Span="6"> *@
@*                 <FormItem Label="Danh mục" Required="true" *@
@*                     Rules="@(new[] { new FormValidationRule { Required = true, Type = FormFieldType.Array, Message = "Danh mục không được phép để trống" } })"> *@
@*                     <Select TItem="SelectOption" TItemValue="Guid" DataSource="@categoryOptions" *@
@*                         @bind-Values="@context.CategoryIds" Mode="SelectMode.Multiple" Placeholder="Chọn danh mục" *@
@*                         ShowSearch="true" AllowClear="true" ItemValue="x => x.Value" ItemLabel="x => x.Label" /> *@
@*                 </FormItem> *@
@*     </Col> *@
@*                 <Col Span="6"> *@
@*                 <FormItem Label="Màu sắc" Required="true" *@
@*                     Rules="@(new[] { new FormValidationRule { Required = true, Type = FormFieldType.Array, Message = "Màu sắc không được phép để trống" } })"> *@
@*                     <Select TItem="SelectOption" TItemValue="Guid" DataSource="@colorOptions" *@
@*                         @bind-Values="@context.ColourIds" Mode="SelectMode.Multiple" Placeholder="Chọn màu sắc" *@
@*                         ShowSearch="true" AllowClear="true" ItemValue="x => x.Value" ItemLabel="x => x.Label" /> *@
@*                 </FormItem> *@
@*     </Col> *@
@*                 <Col Span="6"> *@
@*                 <FormItem Label="Mùa" Required="true" *@
@*                     Rules="@(new[] { new FormValidationRule { Required = true, Type = FormFieldType.Array, Message = "Mùa không được phép để trống" } })"> *@
@*                     <Select TItem="SelectOption" TItemValue="Guid" DataSource="@seasonOptions" *@
@*                         @bind-Values="@context.SeasonIds" Mode="SelectMode.Multiple" Placeholder="Chọn mùa" *@
@*                         ShowSearch="true" AllowClear="true" ItemValue="x => x.Value" ItemLabel="x => x.Label" /> *@
@*                 </FormItem> *@
@*     </Col> *@
@*                 <Col Span="6"> *@
@*                 <FormItem Label="Chất liệu" Required="true" *@
@*                     Rules="@(new[] { new FormValidationRule { Required = true, Type = FormFieldType.Array, Message = "Chất liệu không được phép để trống" } })"> *@
@*                     <Select TItem="SelectOption" TItemValue="Guid" DataSource="@materialOptions" *@
@*                         @bind-Values="@context.MaterialIds" Mode="SelectMode.Multiple" Placeholder="Chọn chất liệu" *@
@*                         ShowSearch="true" AllowClear="true" ItemValue="x => x.Value" ItemLabel="x => x.Label" /> *@
@*                 </FormItem> *@
@*     </Col> *@
@*     </Row> *@
@*             <Row Gutter="16"> *@
@*                 <Col Span="6"> *@
@*                 <FormItem Label="Giới tính" Required="true"> *@
@*                     <Select TItem="IntSelectOption" TItemValue="int" DataSource="@genderOptions" *@
@*                         Value="@((int)productModel.Gender)" *@
@*                         OnChange="@((int value) => productModel.Gender = (EProductDetailGender)value)" *@
@*                         Placeholder="Chọn giới tính" AllowClear="true" ItemValue="x => x.Value" ItemLabel="x => x.Label" /> *@
@*                 </FormItem> *@
@*     </Col> *@
@*                 <Col Span="6"> *@
@*                 <FormItem Label="Chiều cao đế (cm)" Required="true" *@
@*                     Rules="@(new[] { new FormValidationRule { Required = true, Type = FormFieldType.Number, Min = (decimal)0.1, Message = "Chiều cao đế không được phép để trống và phải lớn hơn 0" } })"> *@
@*                     <AntDesign.InputNumber TValue="float" @bind-Value="@context.StockHeight" *@
@*                         Placeholder="Nhập chiều cao đế..." Min="0" Step="0.1f" Style="width: 100%;" /> *@
@*                 </FormItem> *@
@*     </Col> *@
@*                 <Col Span="6"> *@
@*                 <FormItem Label="Loại giày" Required="true" *@
@*                     Rules="@(new[] { new FormValidationRule { Required = true, Message = "Kiểu đóng không được phép để trống" } })"> *@
@*                     <Select TItem="(EClosureType Value, string Name)" TItemValue="EClosureType" *@
@*                         DataSource="closureTypeOptions" @bind-Value="@context.ClosureType" Placeholder="Chọn loại giày" *@
@*                         ItemValue="c => c.Value" ItemLabel="c => c.Name"> *@
@*                     </Select> *@
@*                 </FormItem> *@
@*     </Col> *@
@*                 <Col Span="6"> *@
@*                 <FormItem Label="Cảnh báo hết hàng" Required="true" *@
@*                     Rules="@(new[] { new FormValidationRule { Required = true, Type = FormFieldType.Number, Min = 0, Message = "Cảnh báo hết hàng không được phép để trống và phải lớn hơn hoặc bằng 0" } })"> *@
@*                     <AntDesign.InputNumber TValue="int" @bind-Value="@context.OutOfStock" *@
@*                         Placeholder="Nhập số lượng cảnh báo..." Min="0" Style="width: 100%;" /> *@
@*                 </FormItem> *@
@*     </Col> *@
@*     </Row> *@
@*             <Row Gutter="16"> *@
@*                 <Col Span="6"> *@
@*                 <FormItem Label="Cho phép trả hàng"> *@
@*                     <Checkbox @bind-Value="@context.AllowReturn">Được phép trả hàng</Checkbox> *@
@*                 </FormItem> *@
@*     </Col> *@
@*     </Row> *@
@*     </Card> *@
@*     </Form> *@
@* } *@
@* *@
@* @code { *@
@*     [Parameter] public Guid Id { get; set; } *@
@* *@
@*     private CreateOrUpdateProductDetailDTO productModel = new(); *@
@*     private ProductDetailDetailDTO? productDetail; *@
@*     private Form<CreateOrUpdateProductDetailDTO> form; *@
@* *@
@*     // Dropdown options *@
@*     private List<SelectOption> brandOptions = new(); *@
@*     private List<SelectOption> sizeOptions = new(); *@
@*     private List<SelectOption> colorOptions = new(); *@
@*     private List<SelectOption> seasonOptions = new(); *@
@*     private List<SelectOption> materialOptions = new(); *@
@*     private List<SelectOption> categoryOptions = new(); *@
@*     private List<IntSelectOption> genderOptions = new(); *@
@*     private List<(EClosureType Value, string Name)> closureTypeOptions = new(); *@
@* *@
@*     private bool isLoading = true; *@
@* *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         await LoadDropdownData(); *@
@*         await LoadProductDetail(); *@
@*     } *@
@* *@
@*     private async Task LoadProductDetail() *@
@*     { *@
@*         try *@
@*         { *@
@*             isLoading = true; *@
@*             StateHasChanged(); *@
@* *@
@*             // Sử dụng hàm GetByIdDetail mới *@
@*             productDetail = await ProductDetailClientService.GetByIdDetail(Id); *@
@* *@
@*             if (productDetail != null) *@
@*             { *@
@*                 // Bind dữ liệu ngược lại cho form *@
@*                 productModel = new CreateOrUpdateProductDetailDTO *@
@*                 { *@
@*                     Id = productDetail.Id, *@
@*                     ProductId = productDetail.ProductId, *@
@*                     ProductName = productDetail.ProductName, *@
@*                     Price = productDetail.Price, *@
@*                     Description = productDetail.Description, *@
@*                     Gender = productDetail.Gender, *@
@*                     StockHeight = productDetail.StockHeight, *@
@*                     ClosureType = productDetail.ClosureType, *@
@*                     OutOfStock = productDetail.OutOfStock, *@
@*                     AllowReturn = productDetail.AllowReturn, *@
@*                     Status = productDetail.Status, *@
@*                     BrandId = productDetail.BrandId, *@
@*                     SizeIds = productDetail.SizeIds, *@
@*                     ColourIds = productDetail.ColourIds, *@
@*                     SeasonIds = productDetail.SeasonIds, *@
@*                     MaterialIds = productDetail.MaterialIds, *@
@*                     CategoryIds = productDetail.CategoryIds, *@
@*                     MediaUploads = new List<ProductMediaUpload>() // Không load lại media trong edit *@
@*                 }; *@
@*             } *@
@*         } *@
@*         catch (Exception ex) *@
@*         { *@
@*             await MessageModalService.Error($"Lỗi khi tải dữ liệu sản phẩm: {ex.Message}"); *@
@*         } *@
@*         finally *@
@*         { *@
@*             isLoading = false; *@
@*             StateHasChanged(); *@
@*         } *@
@*     } *@
@* *@
@*     private async Task LoadDropdownData() *@
@*     { *@
@*         try *@
@*         { *@
@*             var brandTask = BrandClientService.GetAllBrandAsync(new GetListBrandRequestDTO *@
@*             { *@
@*                 PageSize = Int32.MaxValue, *@
@*                 PageIndex = *@
@*             1 *@
@*             }); *@
@*             var sizeTask = SizeClientService.GetAllSizeAsync(new GetListSizeRequestDTO *@
@*             { *@
@*                 PageSize = Int32.MaxValue, *@
@*                 PageIndex = 1 *@
@*             }); *@
@*             var materialTask = MaterialClientService.GetAllMaterialsAsync(new GetListMaterialRequest *@
@*             { *@
@*                 PageSize = Int32.MaxValue, *@
@*                 PageIndex = 1 *@
@*             }); *@
@*             var seasonTask = SeasonClientService.GetAllSeasonsAsync(new GetListSeasonRequestDTO *@
@*             { *@
@*                 PageSize = Int32.MaxValue, *@
@*                 PageIndex = 1 *@
@*             }); *@
@*             var colourTask = ColourClientService.GetAllColoursAsync(); *@
@*             var categoryTask = CategoryClientService.GetAllCategoriesAsync(); *@
@* *@
@*             await Task.WhenAll(brandTask, sizeTask, materialTask, seasonTask, colourTask, categoryTask); *@
@* *@
@*             var brandResponse = await brandTask; *@
@*             brandOptions = brandResponse.Items?.Select(x => new SelectOption { Value = x.Id, Label = x.Name }).ToList() ?? new *@
@*             List<SelectOption>(); *@
@* *@
@*             var sizeResponse = await sizeTask; *@
@*             sizeOptions = sizeResponse.Items?.Select(x => new SelectOption { Value = x.Id, Label = x.Value }).ToList() ?? new *@
@*             List<SelectOption>(); *@
@* *@
@*             var materialResponse = await materialTask; *@
@*             materialOptions = materialResponse.Items?.Select(x => new SelectOption { Value = x.Id, Label = x.Name }).ToList() ?? new *@
@*             List<SelectOption>(); *@
@* *@
@*             var seasonResponse = await seasonTask; *@
@*             seasonOptions = seasonResponse.Items?.Select(x => new SelectOption { Value = x.Id, Label = x.Name }).ToList() ?? new *@
@*             List<SelectOption>(); *@
@* *@
@*             var colours = await colourTask; *@
@*             colorOptions = colours?.Select(x => new SelectOption { Value = x.Id, Label = x.Name }).ToList() ?? new *@
@*             List<SelectOption>(); *@
@* *@
@*             var categories = await categoryTask; *@
@*             categoryOptions = categories?.Select(x => new SelectOption { Value = x.Id, Label = x.Name }).ToList() ?? new *@
@*             List<SelectOption>(); *@
@* *@
@*             closureTypeOptions = Enum.GetValues(typeof(EClosureType)) *@
@*             .Cast<EClosureType>() *@
@*             .Select(x => ( *@
@*             x, *@
@*             x.GetType().GetMember(x.ToString()) *@
@*             .First() *@
@*             .GetCustomAttribute<DisplayAttribute>()?.Name ?? x.ToString() *@
@*             )) *@
@*             .ToList(); *@
@* *@
@*             // Static *@
@*             genderOptions = new List<IntSelectOption> *@
@* { *@
@* new IntSelectOption { Value = (int)EProductDetailGender.Men, Label = "Nam" }, *@
@* new IntSelectOption { Value = (int)EProductDetailGender.Women, Label = "Nữ" }, *@
@* new IntSelectOption { Value = (int)EProductDetailGender.Unisex, Label = "Unisex" } *@
@* }; *@
@* *@
@*             await InvokeAsync(StateHasChanged); *@
@*         } *@
@*         catch (Exception ex) *@
@*         { *@
@*             await MessageModalService.Error($"Lỗi khi tải dữ liệu: {ex.Message}"); *@
@*         } *@
@*     } *@
@* *@
@*     private async Task HandleSave(int status) *@
@*     { *@
@*         if (form == null) *@
@*         { *@
@*             await MessageModalService.Error("Form không được khởi tạo!"); *@
@*             return; *@
@*         } *@
@* *@
@*         var validationResult = form.Validate(); *@
@* *@
@*         if (!validationResult) *@
@*         { *@
@*             await MessageModalService.Warning("Vui lòng kiểm tra lại thông tin form!"); *@
@*             return; *@
@*         } *@
@* *@
@*         isLoading = true; *@
@*         try *@
@*         { *@
@*             productModel.Status = status; *@
@* *@
@*             var response = await ProductDetailClientService.UpdateProductDetailAsync(productModel); *@
@* *@
@*             if (response.ResponseStatus == BaseStatus.Success) *@
@*             { *@
@*                 await MessageModalService.Success("Cập nhật sản phẩm thành công"); *@
@*                 Navigation.NavigateTo("/manage-product-detail"); *@
@*             } *@
@*             else *@
@*             { *@
@*                 await MessageModalService.Error($"Lỗi: {response.Message}"); *@
@*             } *@
@*         } *@
@*         catch (Exception ex) *@
@*         { *@
@*             await MessageModalService.Error("Có lỗi xảy ra trong quá trình xử lý!"); *@
@*         } *@
@*         finally *@
@*         { *@
@*             isLoading = false; *@
@*         } *@
@*     } *@
@* *@
@*     private async void ResetData() *@
@*     { *@
@*         await LoadProductDetail(); *@
@*         form?.Reset(); *@
@*     } *@
@* *@
@*     private void GoBack() *@
@*     { *@
@*         Navigation.NavigateTo("/manage-product-detail"); *@
@*     } *@
@* *@
@*     public class SelectOption *@
@*     { *@
@*         public Guid Value { get; set; } *@
@*         public string Label { get; set; } = string.Empty; *@
@*     } *@
@* *@
@*     public class IntSelectOption *@
@*     { *@
@*         public int Value { get; set; } *@
@*         public string Label { get; set; } = string.Empty; *@
@*     } *@
@* } *@