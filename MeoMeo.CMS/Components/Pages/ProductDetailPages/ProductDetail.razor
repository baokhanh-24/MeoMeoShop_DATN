@page "/manage-product"
@using MeoMeo.Contract.DTOs.ProductDetail
@using MeoMeo.Contract.DTOs;
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Reflection
@using MeoMeo.Shared.IServices;
@using MeoMeo.Contract.Commons
@using MeoMeo.Domain.Commons.Enums
@using ButtonSize = AntDesign.ButtonSize
@using ButtonType = AntDesign.ButtonType
@inject MeoMeo.Shared.Utilities.MessageModalService MessageModalService
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IConfiguration Configuration
<div class="d-flex justify-content-between">
    <Breadcrumb>
        <BreadcrumbItem Href="/">Trang chủ</BreadcrumbItem>
        <BreadcrumbItem Href="/manage-product">Quản lý sản phẩm</BreadcrumbItem>
    </Breadcrumb>
    <Button OnClick="AddNewProductDetail" Type="ButtonType.Primary" Class="mb-2">
        <i class="fas fa-plus"></i> Thêm mới
    </Button>
</div>
<div class="d-flex justify-content-end gap-3 mb-2">

    <div style="width: 120px">
        <Input AllowClear="true" OnClear="OnFilterChanged" @bind-Value="filter.ProductNameFilter" Placeholder="Nhập theo tên" />
    </div>
    <div style="width: 120px">
        <Input AllowClear="true" OnClear="OnFilterChanged" @bind-Value="filter.SKUFilter" Placeholder="Nhập mã sku" />
    </div>
    <div style="width: 120px">
        <Input AllowClear="true" OnClear="OnFilterChanged" @bind-Value="filter.PriceFilter" Placeholder="Nhập giá" />
    </div>
    <div style="width: 120px">
        <Input AllowClear="true" OnClear="OnFilterChanged" @bind-Value="filter.DescriptionFilter" Placeholder="Nhập mô tả" />
    </div>
    <div style="width: 120px">
        <Input AllowClear="true" OnClear="OnFilterChanged" @bind-Value="filter.StockHeightFilter" Placeholder="Nhập chiều cao cổ" />
    </div>
    <div style="width: 120px">
        <Select TItem="(EClosureType Value, string Name)"
                TItemValue="EClosureType?"
                AllowClear
                DataSource="closureTypeList"
                @bind-Value="filter.ClosureTypeFilter"
                Placeholder="Chọn kiểu đóng"
                ItemValue="c => (EClosureType?)c.Value"
                ItemLabel="c => c.Name">
        </Select>
    </div>
    <div style="width: 120px">
        <Input AllowClear="true" OnClear="OnFilterChanged" @bind-Value="filter.OutOfStockFilter" Placeholder="Nhập số lượng tồn" />
    </div>
    <div style="width: 120px">
        <Select TItem="(EProductDetailGender Value, string Name)"
                TItemValue="EProductDetailGender?"
                AllowClear
                DataSource="productGenderList"
                @bind-Value="filter.GenderFilter"
                Placeholder="Chọn trạng thái"
                ItemValue="c => (EProductDetailGender?)c.Value"
                ItemLabel="c => c.Name">
        </Select>
    </div>
    <Tooltip Title="Tìm kiếm">
        <Button @onclick="() => OnFilterChanged()" Type="ButtonType.Primary" Shape="ButtonShape.Circle" Icon="@IconType.Outline.Search" />
    </Tooltip>
</div>
<Table DataSource="listOfData" TItem="ProductDetailDTO" RowClassName="@(_ => "editable-row")" Bordered TableLayout="fixed">
    <ChildContent Context="data">
        <Column TData="string" Title="Tên sản phẩm">
           
                @data.ProductName
        </Column>
        <Column TData="string" Title="Ảnh thumbnail">
          
                <Image Fallback="@(backendUrl+"/Images/fallback.webp")" Src="@(backendUrl+"/" +data.Thumbnail)" Class="image-preview" />
            
        </Column>
        <Column TData="string" Title="Sku">
            @data.Sku
        </Column>
        <Column TData="int" Title="Giá gốc (VNĐ)">
            @string.Format(new CultureInfo("vi-VN"), "{0:C0}", data.Price)
        </Column>   
        <Column TData="int" Title="Giảm giá">
            @(data.Discount>0 ?data.Discount +" %" :"")
        </Column>
        <Column TData="int" Title="Số lượng tồn kho">
            @data.InventoryQuantity
        </Column>      
        <Column TData="string" Title="Size">
            @String.Join(",", data.Sizes)
        </Column>
        <Column TData="string" Title="Danh mục">
            @String.Join(",", data.Categories)
        </Column>     
        <Column TData="string" Title="Màu sắc">
            @String.Join(",", data.Colours)
        </Column>       
        <Column TData="string" Title="Chất liệu">
            @String.Join(",", data.Materials)
        </Column>

        <Column TData="float" Title="Chiều cao đế (cm)">
            @string.Format(new CultureInfo("vi-VN"), "{0:C2}", @data.StockHeight) 
        </Column>
        <Column TData="EClosureType" Title="Kiểu đóng">
            @if (editCache.ContainsKey(data.Id) && !editCache[data.Id].edit)
            {
                @closureTypeList.FirstOrDefault(x => x.Value == data.ClosureType).Name
            }
            else if (editCache.ContainsKey(data.Id))
            {
                <Select TItem="(EClosureType Value, string Name)"
                        TItemValue="EClosureType"
                        DataSource="closureTypeList"
                        @bind-Value="editCache[data.Id].data.ClosureType"
                        ItemValue="c => c.Value"
                        ItemLabel="c => c.Name">
                </Select>
            }
        </Column>
        <Column TData="int" Title="Số lượng cảnh báo hết hàng">
            @data.OutOfStock
        </Column>
        <ActionColumn Title="Thao tác" Class="text-end gap-2">
            <Tooltip Title="Sửa">
                <Button Size="ButtonSize.Small" @onclick="() => EditProduct(data.Id)" Shape="ButtonShape.Circle">
                    <i class="fas fa-pen"></i>
                </Button>
            </Tooltip>

            <Popconfirm Title=@($"Bạn có chắc muốn xóa sản phẩm {data.ProductName}?")
                        OnConfirm="() => DeleteProductDetail(data.Id)"
                        OkText="Đồng ý"
                        CancelText="Hủy">

                <Tooltip Title="Xóa">
                    <Button Size="ButtonSize.Small" Danger Shape="ButtonShape.Circle">
                        <i class="fas fa-minus"></i>
                    </Button>
                </Tooltip>
            </Popconfirm>
        </ActionColumn>

    </ChildContent>
</Table>
@code {
    private string backendUrl = "";
    [Inject] private IProductDetailClientService ProductDetailClientService { get; set; } = default! ;
    IDictionary<Guid, (bool edit, ProductDetailDTO data)> editCache = new Dictionary<Guid, (bool, ProductDetailDTO)>();
    List<ProductDetailDTO> listOfData = new();
    List<(EProductDetailGender Value, string Name)> productGenderList = new();
    List<(EClosureType Value, string Name)> closureTypeList = new();
    GetListProductDetailRequestDTO filter = new GetListProductDetailRequestDTO()
    {
       ProductNameFilter = "",
       PriceFilter = null,
       DescriptionFilter = "",
       SKUFilter = "",
       GenderFilter = null,
       StockHeightFilter = null,
       ClosureTypeFilter = null,
       OutOfStockFilter = null,
       PageIndex = 1,
       PageSize = 20

    };

    protected override async Task OnInitializedAsync()
    {
        backendUrl = Configuration["ApiSettings:BaseUrl"] ?? "";
        productGenderList = Enum.GetValues(typeof(EProductDetailGender))
              .Cast<EProductDetailGender>()
              .Select(x => (
                x,
                x.GetType().GetMember(x.ToString())
                    .First()
                    .GetCustomAttribute<DisplayAttribute>()?.Name ?? x.ToString()
            ))
            .ToList();
        closureTypeList = Enum.GetValues(typeof(EClosureType))
              .Cast<EClosureType>()
              .Select(x => (
                x,
                x.GetType().GetMember(x.ToString())
                    .First()
                    .GetCustomAttribute<DisplayAttribute>()?.Name ?? x.ToString()
            ))
            .ToList();
        await LoadDataAsync();
    }
    private async Task OnGenderChanged(EProductDetailGender? value)
    {
        filter.GenderFilter = value;
        filter.PageIndex = 1;
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        var response = await ProductDetailClientService.GetAllProductDetailAsync(filter);
        listOfData = response.Items;
        await InvokeAsync(StateHasChanged);
    }
    async void OnFilterChanged()
    {
        await LoadDataAsync();
    }
    async Task AddNewProductDetail()
    {
        Navigation.NavigateTo("/product/create");
    }

    async Task EditProduct(Guid id)
    {
        Navigation.NavigateTo($"/product/edit/{id}");
    }
    
    async Task DeleteProductDetail(Guid id)
    {
        var success = await ProductDetailClientService.DeleteProductDetailAsync(id);
        if (success)
        {
           
            listOfData.RemoveAll(p => p.Id == id);
            editCache.Remove(id);
            await MessageModalService.Success("Xóa sản phẩm thành công!");
        }
        else
        {
            await MessageModalService.Error("Xóa sản phẩm thất bại");
        }
    }

   
}
