@page "/product/create"
@page "/product/update/{id:guid?}"
@using AntDesign
@using MeoMeo.Shared.Utilities
@using MeoMeo.Contract.DTOs.Product
@using MeoMeo.Domain.Commons.Enums
@using Microsoft.AspNetCore.Http
@using MeoMeo.Contract.Commons
@using MeoMeo.Shared.IServices
@using MeoMeo.Contract.DTOs
@using MeoMeo.Contract.DTOs.Size
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using MeoMeo.Shared.Services
@using ButtonType = AntDesign.ButtonType
@using ProductMediaUpload = MeoMeo.Contract.DTOs.Product.ProductMediaUpload
@inject IProductClientService ProductClientService
@inject NavigationManager Navigation
@inject MessageModalService MessageModalService
@inject IBrandClientService BrandClientService
@inject ISizeClientService SizeClientService
@inject IMaterialClientService MaterialClientService
@inject ISeasonClientService SeasonClientService
@inject IColourClientService ColourClientService
@inject ICategoryClientService CategoryClientService
@inject IConfiguration Configuration

<div class="d-flex justify-content-between mb-3">
    <Breadcrumb>
        <BreadcrumbItem Href="/">Trang chủ</BreadcrumbItem>
        <BreadcrumbItem Href="/manage-product">Quản lý sản phẩm</BreadcrumbItem>
        <BreadcrumbItem Href="/manage-product">@(Id.HasValue ? "Cập nhật sản phẩm" : "Thêm mới sản phẩm")</BreadcrumbItem>
    </Breadcrumb>
    <div>
        <Button Icon="@IconType.Outline.Close" OnClick="ResetData">Hủy</Button>
        <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Check" HtmlType="submit"
                OnClick="@(() => HandleSave(0))"
                Loading="@isLoading">Lưu
        </Button>
        <Button Icon="@IconType.Outline.Send" OnClick="@(() => HandleSave(EProductStatus.Pending))" Loading="@isLoading">Gửi duyệt</Button>
        <Button Icon="@IconType.Outline.ArrowLeft" OnClick="GoBack">Quay lại</Button>
    </div>
</div>

<Form Model="@productModel" Layout="@FormLayout.Vertical" ValidateOnChange="true" 
      ValidateMode="FormValidateMode.Rules"
      @ref="form">
    <div class="row">
        <div class="col-lg-5">
            <Card Title="Thông tin chung" Style="margin-bottom: 24px;">
                <Row Gutter="16">
                    <Col Span="8">
                        <FormItem Label="Tên sản phẩm" Required="true"
                                  Rules="@(new[] { new FormValidationRule { Required = true, Message = "Tên sản phẩm không được phép để trống" } })">
                            <Input @bind-Value="@productModel.Name" Placeholder="Nhập tên sản phẩm..."/>
                        </FormItem>
                    </Col>
                    <Col Span="8">
                        <FormItem Label="Thương hiệu" Required="true"
                                  Rules="@(new[] { new FormValidationRule { Required = true, Message = "Thương hiệu không được phép để trống" } })">
                            <Select TItem="SelectOption" TItemValue="Guid" DataSource="@brandOptions"
                                    @bind-Value="@productModel.BrandId" Placeholder="Chọn thương hiệu" ShowSearch="true"
                                    AllowClear="true" ItemValue="x => x.Value" ItemLabel="x => x.Label"/>
                        </FormItem>
                    </Col>
                    <Col Span="8">
                        <FormItem Label="Danh mục" Required="true"
                                  Rules="@(new[] { new FormValidationRule { Required = true, Type = FormFieldType.Array, Message = "Danh mục không được phép để trống" } })">
                            <Select TItem="SelectOption" TItemValue="Guid" DataSource="@categoryOptions"
                                    @bind-Values="@categoryIdsBinding" Mode="SelectMode.Multiple"
                                    Placeholder="Chọn danh mục"
                                    ShowSearch="true" AllowClear="true" ItemValue="x => x.Value" ItemLabel="x => x.Label"/>
                        </FormItem>
                    </Col>
                </Row>
                <Row Gutter="16">
                    <Col Span="8">
                        <FormItem Label="Mùa" Required="true"
                                  Rules="@(new[] { new FormValidationRule { Required = true, Type = FormFieldType.Array, Message = "Mùa không được phép để trống" } })">
                            <Select TItem="SelectOption" TItemValue="Guid" DataSource="@seasonOptions"
                                    @bind-Values="@seasonIdsBinding" Mode="SelectMode.Multiple" Placeholder="Chọn mùa"
                                    ShowSearch="true" AllowClear="true" ItemValue="x => x.Value" ItemLabel="x => x.Label"/>
                            
                        </FormItem>
                    </Col>
                    <Col Span="8">
                        <FormItem Label="Chất liệu" Required="true"
                                  Rules="@(new[] { new FormValidationRule { Required = true, Type = FormFieldType.Array, Message = "Chất liệu không được phép để trống" } })">
                            <Select TItem="SelectOption" TItemValue="Guid" DataSource="@materialOptions"
                                    @bind-Values="@materialIdsBinding" Mode="SelectMode.Multiple"
                                    Placeholder="Chọn chất liệu"
                                    ShowSearch="true" AllowClear="true" ItemValue="x => x.Value" ItemLabel="x => x.Label"/>
                        </FormItem>
                        
                    </Col>
                </Row>
                <Row Gutter="16">
                    <Col Span="24">
                        <FormItem Label="Hình ảnh và Video sản phẩm">
                            <div class="image-upload-container" style="position: relative;">
                                <div class="image-upload-area @(isProcessingImages ? "processing" : "")"
                                     style="cursor: pointer;">
                                    @if (isProcessingImages)
                                    {
                                        <div style="display: flex; flex-direction: column; align-items: center;">
                                            <Spin Size="SpinSize.Large"/>
                                            <div style="margin-top: 8px; color: #666;">Đang xử lý file...</div>
                                        </div>
                                    }
                                    else
                                    {
                                        <Icon Type="@IconType.Outline.Upload" Style="font-size: 24px; color: #999;"/>
                                        <div style="margin-top: 8px; color: #666;">Tải ảnh và video (Tối đa 8 ảnh + 2
                                            video)
                                        </div>
                                        <div style="font-size: 12px; color: #999;">Click để chọn file</div>
                                    }
                                </div>

                                <InputFile @ref="fileInput" OnChange="OnFileSelected" multiple accept="image/*,video/*"
                                           disabled="@isProcessingImages" style="
                               position: absolute;
                               top: 0;
                               left: 0;
                               width: 100%;
                               height: 100%;
                               opacity: 0;
                               cursor: pointer;
                           "/>
                            </div>

                            <div style="margin-top: 8px; font-size: 12px; color: #666;">
                                @GetUsageInfo()
                            </div>

                            @if (productModel.MediaUploads != null && productModel.MediaUploads.Any())
                            {
                                <div class="image-preview-container">
                                    @for (int i = 0; i < productModel.MediaUploads.Count; i++)
                                    {
                                        var index = i;
                                        var media = productModel.MediaUploads[i];
                                        <div class="image-preview-item">
                                            @if (media.ContentType.StartsWith("video/"))
                                            {
                                                <video controls class="image-preview">
                                                    <source src="@GetImagePreviewUrl(media)" type="video/mp4"/>
                                                    Trình duyệt của bạn không hỗ trợ video.
                                                </video>
                                            }
                                            else
                                            {
                                                <Image Src=@GetImagePreviewUrl(media) Class="image-preview"/>
                                            }
                                            <div class="image-actions">
                                                <Button Type="@ButtonType.Dashed" Color="Color.Red6"
                                                        Size="@AntDesign.ButtonSize.Small"
                                                        Icon="@IconType.Outline.Delete"
                                                        OnClick="@(() => RemoveImage(index))"/>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </FormItem>
                    </Col>
                </Row>
            </Card>
        </div>
        
        <div class="col-lg-7">
            <Card Title="Quản lý biến thể sản phẩm" Style="margin-bottom: 24px;">
                <div style="margin-bottom: 16px;">
                    <Row Gutter="16">
                        <Col Span="8">
                            <FormItem Label="Màu sắc">
                                <Select TItem="SelectOption" TItemValue="Guid" DataSource="@colorOptions"
                                        @bind-Value="@selectedColorId" Placeholder="Chọn màu sắc để thêm" ShowSearch="true"
                                        AllowClear="true" ItemValue="x => x.Value" ItemLabel="x => x.Label"
                                        OnChange="OnColorSelected"/>
                            </FormItem>
                        </Col>
                        <Col Span="8">
                            <FormItem Label="Size">
                                <Select TItem="SelectOption" TItemValue="Guid" DataSource="@sizeOptions"
                                        @bind-Value="@selectedSizeId" Placeholder="Chọn size để thêm" ShowSearch="true"
                                        AllowClear="true" ItemValue="x => x.Value" ItemLabel="x => x.Label"
                                        OnChange="OnSizeSelected"/>
                            </FormItem>
                        </Col>
                        <Col Span="8" Style="display: flex; align-items: end;">
                            <FormItem Label="Thao tác">
                                <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Plus" OnClick="AddVariant"
                                        Disabled="@(selectedColorId == Guid.Empty || selectedSizeId == Guid.Empty)">
                                    Thêm biến thể
                                </Button>
                            </FormItem>

                        </Col>
                    </Row>
                </div>

                @if (productModel.ProductVariants != null && productModel.ProductVariants.Any())
                {
                    <Table TItem="ProductDetailGrid" DataSource="@productModel.ProductVariants" Bordered="true">
                        <ChildContent Context="data">
                            <PropertyColumn Property="c => GetColorName(c.ColourId)" Title="Màu sắc"/>
                            <PropertyColumn Property="c => GetSizeName(c.SizeId)" Title="Size"/>
                            <PropertyColumn Property="c => c.Price" Title="Giá (đ)">
                                <AntDesign.InputNumber TValue="float" @bind-Value="@data.Price" Min="0"
                                                       Style="width: 100%;"/>
                            </PropertyColumn>
                            <PropertyColumn Property="c => c.OutOfStock" Title="Cảnh báo hết hàng">
                                <AntDesign.InputNumber TValue="int" @bind-Value="@data.OutOfStock" Min="0"
                                                       Style="width: 100%;"/>
                            </PropertyColumn>
                            <PropertyColumn Property="c => c.StockHeight" Title="Chiều cao đế (cm)">
                                <AntDesign.InputNumber TValue="float" @bind-Value="@data.StockHeight" Min="0"
                                                       Step="0.1f"
                                                       Style="width: 100%;"/>
                            </PropertyColumn>
                            <PropertyColumn Property="c => c.ClosureType" Title="Loại giày">
                                <Select TItem="(EClosureType Value, string Name)" TItemValue="EClosureType"
                                        DataSource="closureTypeOptions" @bind-Value="@data.ClosureType"
                                        ItemValue="c => c.Value"
                                        ItemLabel="c => c.Name" Style="width: 100%;"/>
                            </PropertyColumn>
                            <PropertyColumn Property="c => c.AllowReturn" Title="Cho phép trả hàng">
                                <Checkbox @bind-Value="@data.AllowReturn"/>
                            </PropertyColumn>
                            <ActionColumn Title="Thao tác">
                                <Space>
                                    <SpaceItem>
                                        <Button Type="@ButtonType.Dashed" Color="Color.Red6"
                                                Size="@AntDesign.ButtonSize.Small"
                                                Icon="@IconType.Outline.Delete" OnClick="@(() => RemoveVariant(data))"/>
                                    </SpaceItem>
                                </Space>
                            </ActionColumn>
                        </ChildContent>
                    </Table>
                }
                else
                {
                    <Empty/>
                }
            </Card><Card Title="Mô tả sản phẩm" Style="margin-bottom: 24px;">
                <div style="margin-bottom: 16px;">
                    <Row Gutter="16">
                        <Col Span="24">
                            <FormItem Label="Mô tả">
     
                                <RadzenHtmlEditor                 
                                    @bind-Value=@context.Description
                                                  style="height: 450px; max-width: 100%" UploadUrl="upload/image"/>
                            </FormItem>
                        </Col>
                    </Row>
                </div>
            </Card>
        </div>
    </div>


</Form>

@code {
    private CreateOrUpdateProductDTO productModel = new CreateOrUpdateProductDTO()
    {
       
        Name = "",
        Description = "",
        SeasonIds = new List<Guid>(),
        MaterialIds = new List<Guid>(),
        CategoryIds = new List<Guid>(),
        ProductVariants = new List<ProductDetailGrid>(),
        MediaUploads = new List<ProductMediaUpload>()
    };
    private Form<CreateOrUpdateProductDTO> form;
    private string backendUrl = "";
    private Guid selectedColorId = Guid.Empty;
    private Guid selectedSizeId = Guid.Empty;
    private InputFile fileInput;
    
    // Binding properties for multiple selects
    private IEnumerable<Guid> categoryIdsBinding;
    private IEnumerable<Guid> seasonIdsBinding;
    private IEnumerable<Guid> materialIdsBinding;
    // Dropdown options
    private List<SelectOption> brandOptions = new();
    private List<SelectOption> sizeOptions = new();
    private List<SelectOption> colorOptions = new();
    private List<SelectOption> seasonOptions = new();
    private List<SelectOption> materialOptions = new();
    private List<SelectOption> categoryOptions = new();
    private List<(EClosureType Value, string Name)> closureTypeOptions = new();

    private bool isLoading = false;
    private bool isProcessingImages = false;
    [Parameter] public Guid? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        backendUrl = Configuration["ApiSettings:BaseUrl"] ?? "";
        await LoadDropdownData();

        if (Id.HasValue)
        {
            var detail = await ProductClientService.GetProductDetailAsync(Id.Value);
            productModel = detail;
            categoryIdsBinding = detail.CategoryIds ?? new List<Guid>();
            seasonIdsBinding = detail.SeasonIds ?? new List<Guid>();
            materialIdsBinding = detail.MaterialIds ?? new List<Guid>();
        }
        else
        {
            productModel = new CreateOrUpdateProductDTO
            {
                MediaUploads = new List<ProductMediaUpload>(),
                SeasonIds = new List<Guid>(),
                MaterialIds = new List<Guid>(),
                CategoryIds = new List<Guid>(),
                ProductVariants = new List<ProductDetailGrid>()
            };
            categoryIdsBinding = new List<Guid>();
            seasonIdsBinding = new List<Guid>();
            materialIdsBinding = new List<Guid>();
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadDropdownData()
    {
        try
        {
            var brandTask = BrandClientService.GetAllBrandAsync(new GetListBrandRequestDTO { PageSize = Int32.MaxValue, PageIndex = 1 });
            var sizeTask = SizeClientService.GetAllSizeAsync(new GetListSizeRequestDTO { PageSize = Int32.MaxValue, PageIndex = 1 });
            var materialTask = MaterialClientService.GetAllMaterialsAsync(new GetListMaterialRequest { PageSize = Int32.MaxValue, PageIndex = 1 });
            var seasonTask = SeasonClientService.GetAllSeasonsAsync(new GetListSeasonRequestDTO { PageSize = Int32.MaxValue, PageIndex = 1 });
            var colourTask = ColourClientService.GetAllColoursAsync();
            var categoryTask = CategoryClientService.GetAllCategoriesAsync();

            await Task.WhenAll(brandTask, sizeTask, materialTask, seasonTask, colourTask, categoryTask);

            var brandResponse = await brandTask;
            brandOptions = brandResponse.Items?.Select(x => new SelectOption { Value = x.Id, Label = x.Name }).ToList() ?? new List<SelectOption>();

            var sizeResponse = await sizeTask;
            sizeOptions = sizeResponse.Items?.Select(x => new SelectOption { Value = x.Id, Label = x.Value }).ToList() ?? new List<SelectOption>();

            var materialResponse = await materialTask;
            materialOptions = materialResponse.Items?.Select(x => new SelectOption { Value = x.Id, Label = x.Name }).ToList() ?? new List<SelectOption>();

            var seasonResponse = await seasonTask;
            seasonOptions = seasonResponse.Items?.Select(x => new SelectOption { Value = x.Id, Label = x.Name }).ToList() ?? new List<SelectOption>();

            var colours = await colourTask;
            colorOptions = colours?.Select(x => new SelectOption { Value = x.Id, Label = x.Name }).ToList() ?? new List<SelectOption>();

            var categories = await categoryTask;
            categoryOptions = categories?.Select(x => new SelectOption { Value = x.Id, Label = x.Name }).ToList() ?? new List<SelectOption>();

            closureTypeOptions = Enum.GetValues(typeof(EClosureType))
                .Cast<EClosureType>()
                .Select(x => (
                    x,
                    x.GetType().GetMember(x.ToString())
                        .First()
                        .GetCustomAttribute<DisplayAttribute>()?.Name ?? x.ToString()
                ))
                .ToList();
        }
        catch (Exception ex)
        {
            await MessageModalService.Error($"Lỗi khi tải dữ liệu: {ex.Message}");
        }
    }

    private void OnColorSelected(Guid colorId)
    {
        selectedColorId = colorId;
        StateHasChanged();
    }

    private void OnSizeSelected(Guid sizeId)
    {
        selectedSizeId = sizeId;
        StateHasChanged();
    }

    private void AddVariant()
    {
        if (selectedColorId == Guid.Empty || selectedSizeId == Guid.Empty)
        {
            return;
        }

        // Check if variant already exists
        var existingVariant = productModel.ProductVariants?.FirstOrDefault(v => 
            v.ColourId == selectedColorId && v.SizeId == selectedSizeId);

        if (existingVariant != null)
        {
            MessageModalService.Warning("Biến thể này đã tồn tại!");
            return;
        }

        var newVariant = new ProductDetailGrid
        {
            ColourId = selectedColorId,
            SizeId = selectedSizeId,
            Price = 100000,
            OutOfStock = 5,
            StockHeight = 2,
            ClosureType = EClosureType.LaceUp,
            AllowReturn = true,
            Status = 0
        };

        if (productModel.ProductVariants == null)
            productModel.ProductVariants = new List<ProductDetailGrid>();

        productModel.ProductVariants.Add(newVariant);

        // Reset selections
        selectedColorId = Guid.Empty;
        selectedSizeId = Guid.Empty;

        StateHasChanged();
    }

    private void RemoveVariant(ProductDetailGrid variant)
    {
        if (productModel.ProductVariants != null)
        {
            productModel.ProductVariants.Remove(variant);
            StateHasChanged();
        }
    }

    private string GetColorName(Guid colorId)
    {
        return colorOptions.FirstOrDefault(x => x.Value == colorId)?.Label ?? "N/A";
    }

    private string GetSizeName(Guid sizeId)
    {
        return sizeOptions.FirstOrDefault(x => x.Value == sizeId)?.Label ?? "N/A";
    }

    private async Task HandleSave(EProductStatus status)
    {
        if (form == null)
        {
            await MessageModalService.Error("Form không được khởi tạo!");
            return;
        }

        var validationResult = form.Validate();

        var hasImage = productModel.MediaUploads?.Any(x => x.ContentType.StartsWith("image/")) ?? false;
        if (!hasImage)
        {
            await MessageModalService.Warning("Vui lòng tải lên ít nhất 1 ảnh!");
            return;
        }

        if (productModel.ProductVariants == null || !productModel.ProductVariants.Any())
        {
            await MessageModalService.Warning("Vui lòng thêm ít nhất 1 biến thể sản phẩm!");
            return;
        }

        if (!validationResult)
        {
            await MessageModalService.Warning("Vui lòng kiểm tra lại thông tin form!");
            return;
        }

        isLoading = true;
        try
        {
            // Set status for all variants
            foreach (var variant in productModel.ProductVariants)
            {
                variant.Status= status;
            }

            // Convert binding properties to List<Guid> for saving
            productModel.CategoryIds = categoryIdsBinding?.ToList() ?? new List<Guid>();
            productModel.SeasonIds = seasonIdsBinding?.ToList() ?? new List<Guid>();
            productModel.MaterialIds = materialIdsBinding?.ToList() ?? new List<Guid>();

            if (productModel.MediaUploads != null && productModel.MediaUploads.Any())
            {
                var convertedImages = new List<ProductMediaUpload>();
                foreach (var image in productModel.MediaUploads)
                {
                    if (!string.IsNullOrEmpty(image.Base64Data))
                    {
                        var formFile = await ConvertBase64ToFormFile(image.Base64Data, image.FileName, image.ContentType);
                        convertedImages.Add(new ProductMediaUpload
                        {
                            Id = image.Id,
                            UploadFile = formFile,
                            ImageUrl = image.ImageUrl,
                            Base64Data = image.Base64Data,
                            FileName = image.FileName,
                            ContentType = image.ContentType
                        });
                    }
                }

                if (!Id.HasValue)
                {
                    productModel.MediaUploads = convertedImages;
                }
                else
                {
                    productModel.MediaUploads.RemoveAll(x => convertedImages.Any(y => y.Id == x.Id));
                    productModel.MediaUploads.AddRange(convertedImages);
                }
            }

            BaseResponse response;
            if (Id.HasValue)
            {
                response = await ProductClientService.UpdateProductAsync(productModel);
            }
            else
            {
                response = await ProductClientService.CreateProductAsync(productModel);
            }

            if (response.ResponseStatus == BaseStatus.Success)
            {
                await MessageModalService.Success("Lưu sản phẩm thành công");
                Navigation.NavigateTo("/manage-product");
            }
            else
            {
                await MessageModalService.Error($"Lỗi: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            await MessageModalService.Error("Có lỗi xảy ra trong quá trình xử lý!");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async void ResetData()
    {
        productModel = new CreateOrUpdateProductDTO
        {
            MediaUploads = new List<ProductMediaUpload>(),
            SeasonIds = new List<Guid>(),
            MaterialIds = new List<Guid>(),
            CategoryIds = new List<Guid>(),
            ProductVariants = new List<ProductDetailGrid>()
        };
        form.Reset();
        selectedColorId = Guid.Empty;
        selectedSizeId = Guid.Empty;
        categoryIdsBinding = new List<Guid>();
        seasonIdsBinding = new List<Guid>();
        materialIdsBinding = new List<Guid>();
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/manage-product");
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        InvokeAsync(async () =>
        {
            try
            {
                isProcessingImages = true;
                StateHasChanged();

                foreach (var file in e.GetMultipleFiles(10))
                {
                    if (!file.ContentType.StartsWith("image/") && !file.ContentType.StartsWith("video/"))
                    {
                        await MessageModalService.Error($"File {file.Name} không phải là ảnh hoặc video.");
                        continue;
                    }

                    // Check current counts
                    var currentImages = productModel.MediaUploads?.Count(x => x.ContentType.StartsWith("image/")) ?? 0;
                    var currentVideos = productModel.MediaUploads?.Count(x => x.ContentType.StartsWith("video/")) ?? 0;

                    if (file.ContentType.StartsWith("image/"))
                    {
                        if (currentImages >= 8)
                        {
                            await MessageModalService.Warning("Bạn chỉ có thể tải tối đa 8 ảnh!");
                            continue;
                        }

                        var totalImageSize = productModel.MediaUploads?
                            .Where(x => x.ContentType.StartsWith("image/"))
                            .Sum(x => x.Base64Data != null ? Convert.FromBase64String(x.Base64Data).Length : 0) ?? 0;

                        if (totalImageSize + file.Size > 10 * 1024 * 1024)
                        {
                            await MessageModalService.Error($"Tổng dung lượng 8 ảnh không được vượt quá 10MB!");
                            continue;
                        }
                    }
                    else if (file.ContentType.StartsWith("video/"))
                    {
                        if (currentVideos >= 2)
                        {
                            await MessageModalService.Warning("Bạn chỉ có thể tải tối đa 2 video!");
                            continue;
                        }

                        if (file.Size > 10 * 1024 * 1024)
                        {
                            await MessageModalService.Error($"Video không được vượt quá 10MB!");
                            continue;
                        }
                    }

                    var base64Data = await ConvertToBase64(file);

                    var mediaUpload = new ProductMediaUpload
                    {
                        Id = null,
                        UploadFile = null,
                        ImageUrl = "",
                        Base64Data = base64Data,
                        FileName = file.Name,
                        ContentType = file.ContentType
                    };

                    if (productModel.MediaUploads == null)
                        productModel.MediaUploads = new List<ProductMediaUpload>();

                    productModel.MediaUploads.Add(mediaUpload);
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                await MessageModalService.Error($"Lỗi khi xử lý file: {ex.Message}");
            }
            finally
            {
                isProcessingImages = false;
                StateHasChanged();
            }
        });
    }

    private async Task<string> ConvertToBase64(IBrowserFile file)
    {
        var maxSize = file.ContentType.StartsWith("video/") ? 10 * 1024 * 1024 : 10 * 1024 * 1024;
        using var stream = file.OpenReadStream(maxAllowedSize: maxSize);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        var bytes = memoryStream.ToArray();
        return Convert.ToBase64String(bytes);
    }

    private async Task<IFormFile> ConvertBase64ToFormFile(string base64Data, string fileName, string contentType)
    {
        var bytes = Convert.FromBase64String(base64Data);
        var stream = new MemoryStream(bytes);

        return new FormFile(stream, 0, bytes.Length, fileName, fileName)
        {
            Headers = new HeaderDictionary(),
            ContentType = contentType
        };
    }

    private string GetImagePreviewUrl(ProductMediaUpload image)
    {
        if (!string.IsNullOrEmpty(image.Base64Data))
        {
            return $"data:{image.ContentType};base64,{image.Base64Data}";
        }

        return backendUrl + "/" + image.ImageUrl;
    }

    private void RemoveImage(int index)
    {
        if (productModel.MediaUploads != null && index >= 0 && index < productModel.MediaUploads.Count)
        {
            productModel.MediaUploads.RemoveAt(index);
            StateHasChanged();
        }
    }

    private string GetUsageInfo()
    {
        if (productModel.MediaUploads == null || !productModel.MediaUploads.Any())
            return "Chưa có file nào được chọn";

        var imageCount = productModel.MediaUploads.Count(x => x.ContentType.StartsWith("image/"));
        var videoCount = productModel.MediaUploads.Count(x => x.ContentType.StartsWith("video/"));

        var totalImageSize = productModel.MediaUploads
            .Where(x => x.ContentType.StartsWith("image/"))
            .Sum(x => x.Base64Data != null ? Convert.FromBase64String(x.Base64Data).Length : 0);

        var imageSizeMB = Math.Round(totalImageSize / (1024.0 * 1024.0), 2);

        return $"Đã chọn: {imageCount}/8 ảnh ({imageSizeMB}MB/10MB), {videoCount}/2 video";
    }

    public class SelectOption
    {
        public Guid Value { get; set; }
        public string Label { get; set; } = string.Empty;
    }
}