@page "/product-reviews"
@using MeoMeo.Contract.DTOs.ProductReview
@using MeoMeo.Contract.Commons
@using MeoMeo.Domain.Commons
@using MeoMeo.Shared.IServices
@using AntDesign
@using ButtonSize = AntDesign.ButtonSize
@using ButtonType = AntDesign.ButtonType
@using AntDesign.TableModels
@inject IProductReviewClientService ProductReviewClientService
@inject IMessageService MessageService
@inject IConfiguration Configuration

<div class="d-flex justify-content-between mb-3">
    <Breadcrumb>
        <BreadcrumbItem Href="/">Trang ch·ªß</BreadcrumbItem>
        <BreadcrumbItem Href="/product-reviews">Qu·∫£n l√Ω ƒë√°nh gi√° s·∫£n ph·∫©m</BreadcrumbItem>
    </Breadcrumb>
</div>

<div class="product-review-management">
    <Form Model="@filterModel" Layout="@FormLayout.Inline" OnFinish="OnFilterSubmit" Class="mb-3">
        <FormItem Label="T√¨m ki·∫øm">
            <Input @bind-Value="@filterModel.SearchTerm" Placeholder="T√™n kh√°ch h√†ng, n·ªôi dung ƒë√°nh gi√°..."
                Style="width: 200px;" />
        </FormItem>
        <FormItem Label="Tr·∫°ng th√°i">
            <Select TItemValue="bool?" TItem="SelectItem<bool?>" @bind-Value="@filterModel.IsHidden"
                DataSource="@statusOptions" ValueName="Value" LabelName="Label" Placeholder="Ch·ªçn tr·∫°ng th√°i"
                Style="width: 150px;" AllowClear>
            </Select>
        </FormItem>
        <FormItem Label="ƒê√°nh gi√°">
            <Select TItemValue="decimal?" TItem="SelectItem<decimal?>" @bind-Value="@filterModel.MinRating"
                DataSource="@ratingOptions" ValueName="Value" LabelName="Label" Placeholder="T·ª´" Style="width: 100px;"
                AllowClear>
            </Select>
        </FormItem>
        <FormItem Label="C√≥ tr·∫£ l·ªùi">
            <Select TItemValue="bool?" TItem="SelectItem<bool?>" @bind-Value="@filterModel.HasReply"
                DataSource="@replyOptions" ValueName="Value" LabelName="Label" Placeholder="Ch·ªçn" Style="width: 120px;"
                AllowClear>
            </Select>
        </FormItem>
        <FormItem>
            <Button Type="@ButtonType.Primary" HtmlType="submit" Icon="search">T√¨m ki·∫øm</Button>
        </FormItem>
        <FormItem>
            <Button OnClick="ClearFilters" Icon="clear">X√≥a b·ªô l·ªçc</Button>
        </FormItem>
    </Form>
    <div>
        <Table @ref="reviewTable" OnChange="@OnPageChangeHandler" PageSize="@filterModel.PageSize" Total="@totalRecords"
            DataSource="@reviews" Loading="@loading" Bordered="true" >
            <Column TData="ProductReviewDTO" Title="STT" Width="60" Align="@ColumnAlign.Center">
                @{
                    var indexInPage = reviews.IndexOf(context);
                    var stt = (filterModel.PageIndex - 1) * filterModel.PageSize + indexInPage + 1;
                }
                @stt
            </Column>
            <Column TData="ProductReviewDTO" Title="Ng√†y ƒë√°nh gi√°" Width="120">
                <div>
                    <div><strong>@context.CreationTime.ToString("dd/MM/yyyy")</strong></div>
                    <div style="color: #666; font-size: 12px;">@context.CreationTime.ToString("HH:mm")</div>
                </div>
            </Column>
            <Column TData="ProductReviewDTO" Title="Kh√°ch h√†ng" Width="150">
                <div>
                    <div><strong>@context.CustomerName</strong></div>
                    <div style="color: #666; font-size: 12px;">@context.CustomerPhone</div>
                </div>
            </Column>
            <Column TData="ProductReviewDTO" Title="ƒê∆°n h√†ng" Width="120">
                <div>
                    <div><strong>#@context.OrderCode</strong></div>
                </div>
            </Column>
            <Column TData="ProductReviewDTO" Title="S·∫£n ph·∫©m" Width="200">
                <div style="display: flex; align-items: center; gap:16px">
                    <Image Src="@GetProductImageUrl(context.ProductThumbnail)" 
                           Fallback="@(ApiBaseUrl + "/Images/fallback.jpeg")"
                           Width="80" Height="80"
                           Style="margin-right: 8px; border-radius: 4px; object-fit: cover;" />
                    <div style="flex: 1">
                        <div><strong>@context.ProductName</strong></div>
                        <div style="color: #666; font-size: 12px;">
                            @context.ColourName - @context.SizeName
                        </div>
                    </div>
                </div>
            </Column>
            <Column TData="ProductReviewDTO" Title="ƒê√°nh gi√°" Width="100" Align="@ColumnAlign.Center">
                <Rate Disabled Value="@((int)context.Rating)" Style="font-size: 14px;" />
            </Column>
            <Column TData="ProductReviewDTO" Title="N·ªôi dung" Width="300">
                <div>
                    <Paragraph Ellipsis Class="paragraph-ellipsis">
                        @context.Content
                    </Paragraph>
                    @if (context.ProductReviewFiles?.Any() == true)
                    {
                        <div style="margin-top: 8px; display: flex; flex-wrap: wrap; gap: 4px;">
                            @foreach (var file in context.ProductReviewFiles)
                            {
                                @if (file.FileType == 0) // Image
                                {
                                    <Image Src="@GetProductImageUrl(file.FileUrl)" 
                                           Fallback="@(ApiBaseUrl + "/Images/fallback.jpeg")"
                                           Width="60" Height="60"
                                           Style="border-radius: 4px; object-fit: cover;" />
                                }
                                else // Video
                                {
                                    <div style="position: relative; width: 60px; height: 60px; border-radius: 4px; overflow: hidden; background: #f0f0f0;">
                                        <video style="width: 100%; height: 100%; object-fit: cover;">
                                            <source src="@GetProductImageUrl(file.FileUrl)" type="video/mp4" />
                                        </video>
                                        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: #666; font-size: 12px;">
                                            üìπ
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    }
                </div>
            </Column>
            <Column TData="ProductReviewDTO" Title="Tr·∫£ l·ªùi" Width="250">
                @if (!string.IsNullOrEmpty(context.Answer))
                {
                    <div>
                        <Paragraph Class="paragraph-ellipsis" Style="background: #f6f6f6; padding: 8px; border-radius: 4px;">
                            @context.Answer
                        </Paragraph>

                        <div style="color: #666; font-size: 12px;">
                            @context.ReplyDate?.ToString("dd/MM/yyyy HH:mm")
                        </div>
                    </div>
                }
                else
                {
                    <span style="color: #ccc;">Ch∆∞a tr·∫£ l·ªùi</span>
                }
            </Column>
            <Column TData="ProductReviewDTO" Title="Tr·∫°ng th√°i" Width="100" Align="@ColumnAlign.Center">
                <Tag Color="@(context.IsHidden ? "red" : "green")">
                    @(context.IsHidden ? "ƒê√£ ·∫©n" : "Hi·ªÉn th·ªã")
                </Tag>
            </Column>
            <ActionColumn Title="Thao t√°c" Width="120" Fixed="ColumnFixPlacement.Right">
                <Space>
                    <SpaceItem>
                        <Button Size="@ButtonSize.Small" Type="@ButtonType.Primary" Icon="message"
                            OnClick="() => ShowReplyModal(context)">
                            Tr·∫£ l·ªùi
                        </Button>
                    </SpaceItem>
                    <SpaceItem>
                        <Button Size="@ButtonSize.Small"
                            Type="@(context.IsHidden? ButtonType.Default: ButtonType.Dashed)"
                            Icon="@(context.IsHidden ? "eye" : "eye-invisible")"
                            OnClick="() => ToggleVisibility(context)">
                            @(context.IsHidden ? "Hi·ªÉn th·ªã" : "·∫®n")
                        </Button>
                    </SpaceItem>
                </Space>
            </ActionColumn>
        </Table>
    </div>
</div>

<!-- Reply Modal -->
<Modal Title="Tr·∫£ l·ªùi ƒë√°nh gi√°" @bind-Visible="replyModalVisible" OnOk="SubmitReply" OnCancel="CancelReply" Width="600"
    ConfirmLoading="@replyLoading">
    @if (selectedReview != null)
    {
        <div style="margin-bottom: 16px;">
            <h4>ƒê√°nh gi√° c·ªßa kh√°ch h√†ng:</h4>
            <div style="background: #f6f6f6; padding: 12px; border-radius: 4px; margin-bottom: 16px;">
                <div style="margin-bottom: 8px;">
                    <Rate Disabled Value="@((int)selectedReview.Rating)" Style="font-size: 14px;" />
                    <span style="margin-left: 8px; color: #666;">@selectedReview.CustomerName</span>
                </div>
                <div>@selectedReview.Content</div>
            </div>

            <h4>Tr·∫£ l·ªùi c·ªßa shop:</h4>
            <TextArea @bind-Value="replyContent" Placeholder="Nh·∫≠p c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n..." Rows="4" MaxLength="1000"
                ShowCount="true" />
        </div>
    }
</Modal>


@code {
    // SelectItem classes for Select DataSource
    public class SelectItem<T>
    {
        public T? Value { get; set; }
        public string Label { get; set; } = string.Empty;
    }

    private Table<ProductReviewDTO>? reviewTable;
    private List<ProductReviewDTO> reviews = new();
    private GetListProductReviewForAdminDTO filterModel = new() { PageIndex = 1, PageSize = 10 };
    private bool loading = false;
    private int totalRecords = 0;

    // API Base URL for images
    private string ApiBaseUrl = string.Empty;

    // Reply modal
    private bool replyModalVisible = false;
    private bool replyLoading = false;
    private ProductReviewDTO? selectedReview;
    private string replyContent = string.Empty;

    // Select data sources
    private List<SelectItem<bool?>> statusOptions = new()
{
new SelectItem<bool?> { Value = false, Label = "Hi·ªÉn th·ªã" },
new SelectItem<bool?> { Value = true, Label = "ƒê√£ ·∫©n" }
};

    private List<SelectItem<decimal?>> ratingOptions = new()
{
new SelectItem<decimal?> { Value = 1m, Label = "1 sao" },
new SelectItem<decimal?> { Value = 2m, Label = "2 sao" },
new SelectItem<decimal?> { Value = 3m, Label = "3 sao" },
new SelectItem<decimal?> { Value = 4m, Label = "4 sao" },
new SelectItem<decimal?> { Value = 5m, Label = "5 sao" }
};

    private List<SelectItem<bool?>> replyOptions = new()
{
new SelectItem<bool?> { Value = true, Label = "ƒê√£ tr·∫£ l·ªùi" },
new SelectItem<bool?> { Value = false, Label = "Ch∆∞a tr·∫£ l·ªùi" }
};

    protected override async Task OnInitializedAsync()
    {
        ApiBaseUrl = Configuration["ApiSettings:BaseUrl"] ?? string.Empty;
        await LoadData();
    }

    private async Task LoadData()
    {
        loading = true;
        try
        {
            var result = await ProductReviewClientService.GetAllReviewsForAdminAsync(filterModel);
            reviews = result.Items?.ToList() ?? new List<ProductReviewDTO>();
            totalRecords = result.TotalRecords;
        }
        catch (Exception ex)
        {
            MessageService.Error($"C√≥ l·ªói x·∫£y ra: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task OnFilterSubmit()
    {
        filterModel.PageIndex = 1;
        await LoadData();
    }

    private async Task ClearFilters()
    {
        filterModel = new GetListProductReviewForAdminDTO { PageIndex = 1, PageSize = 10 };
        await LoadData();
    }

    private EventCallback<QueryModel<ProductReviewDTO>> OnPageChangeHandler =>
    EventCallback.Factory.Create<QueryModel<ProductReviewDTO>>(this, OnPageChange);

    private async Task OnPageChange(QueryModel<ProductReviewDTO> query)
    {
        filterModel.PageIndex = query.PageIndex;
        filterModel.PageSize = query.PageSize;
        await LoadData();
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private string GetProductImageUrl(string? imageUrl)
    {
        if (string.IsNullOrEmpty(imageUrl))
            return ApiBaseUrl + "/Images/fallback.jpeg";
        
        if (imageUrl.StartsWith("http"))
            return imageUrl;
            
        return ApiBaseUrl + "/" + imageUrl;
    }

    private void ShowReplyModal(ProductReviewDTO review)
    {
        selectedReview = review;
        replyContent = review.Answer ?? string.Empty;
        replyModalVisible = true;
    }

    private void CancelReply()
    {
        replyModalVisible = false;
        selectedReview = null;
        replyContent = string.Empty;
    }

    private async Task SubmitReply()
    {
        if (selectedReview == null || string.IsNullOrWhiteSpace(replyContent))
        {
            MessageService.Warning("Vui l√≤ng nh·∫≠p n·ªôi dung tr·∫£ l·ªùi");
            return;
        }

        replyLoading = true;
        try
        {
            var result = await ProductReviewClientService.ReplyToReviewAsync(selectedReview.Id, replyContent.Trim());
            if (result.ResponseStatus == BaseStatus.Success)
            {
                MessageService.Success("Tr·∫£ l·ªùi ƒë√°nh gi√° th√†nh c√¥ng");
                replyModalVisible = false;
                await LoadData();
            }
            else
            {
                MessageService.Error(result.Message ?? "C√≥ l·ªói x·∫£y ra");
            }
        }
        catch (Exception ex)
        {
            MessageService.Error($"C√≥ l·ªói x·∫£y ra: {ex.Message}");
        }
        finally
        {
            replyLoading = false;
        }
    }

    private async Task ToggleVisibility(ProductReviewDTO review)
    {
        try
        {
            var result = await ProductReviewClientService.ToggleReviewVisibilityAsync(review.Id);
            if (result.ResponseStatus == BaseStatus.Success)
            {
                MessageService.Success(result.Message ?? "Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng");
                await LoadData();
            }
            else
            {
                MessageService.Error(result.Message ?? "C√≥ l·ªói x·∫£y ra");
            }
        }
        catch (Exception ex)
        {
            MessageService.Error($"C√≥ l·ªói x·∫£y ra: {ex.Message}");
        }
    }
}
