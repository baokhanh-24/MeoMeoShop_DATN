@page "/order-at-counter"
@using System.ComponentModel.DataAnnotations
@using AntDesign
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Configuration
@using MeoMeo.Contract.DTOs
@using MeoMeo.Contract.DTOs.Order
@using MeoMeo.Contract.DTOs.OrderDetail
@using MeoMeo.Contract.DTOs.Product
@using MeoMeo.Domain.Commons.Enums
@using MeoMeo.Shared.Utilities
@inject IMessageService MessageService
@inject IJSRuntime JSRuntime
@inject MeoMeo.Shared.IServices.ICustomerClientService CustomerClientService
@inject MeoMeo.Shared.IServices.IProductClientService ProductClientService
@inject MeoMeo.Shared.IServices.IGhnClientService GhnService
@inject MeoMeo.Shared.IServices.IOrderClientService OrderClientService
@inject MeoMeo.Shared.IServices.IVoucherClientService VoucherClientService
@inject IApiCaller ApiCaller
@inject NavigationManager Navigation
@inject IConfiguration Configuration

<div class="content-background layout-container">

    <div class="group-breadcumb d-flex justify-content-between mb-3">
        <Breadcrumb>
            <BreadcrumbItem>Quản lý hệ thống</BreadcrumbItem>
            <BreadcrumbItem>
                <a class="current">Đơn hàng tại quầy</a>
            </BreadcrumbItem>
        </Breadcrumb>
        <div>
            <Button Class="btn-reset w-100px" Icon="close" OnClick="HandleCancel">Hủy</Button>
            <Button Class="btn-reset" Icon="photo_album" OnClick="() => HandleSave(true)">@(CurrentOrderId.HasValue ? "Cập nhật" : "Lưu tạm")</Button>
            <Button Class="btn-save" Icon="check" OnClick="() => HandleSave(false)">@(CurrentOrderId.HasValue ? "Hoàn thành đơn hàng" : "Thanh toán đơn hàng")</Button>

            <Button Class="btn-save" Icon="printer" OnClick="HandlePaymentAndPrint"
                Disabled="@(!Products.Any())">Thanh toán & In hóa đơn
            </Button>

            <Button Class="btn-back" Icon="arrow-left" OnClick="HandleGoBack">Quay lại</Button>
        </div>
    </div>
    
    <!-- Panel đơn hàng đang xử lý -->
    <div class="pending-orders-panel"
        style="margin-bottom: 16px; padding: 16px; background: #f8f9fa; border-radius: 8px; border: 1px solid #e8e8e8;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px;">
            <div style="display: flex; align-items: center; gap: 8px;">
            <h6 style="margin: 0; color: #333; font-weight: 600;">
                <Icon Type="clock-circle" Style="margin-right: 8px;" />
                Đơn hàng đang xử lý (@PendingOrders.Count)
            </h6>
                @if (PendingOrders.Count > 3)
                {
                                            <div style="font-size: 12px; color: #666; display: flex; align-items: center; gap: 4px;">
                                                <Icon Type="swap" />
                                                Kéo ngang để xem thêm
                                            </div>
                }
            </div>
            <Button Type="@AntDesign.ButtonType.Link" Icon="reload" OnClick="LoadPendingOrders"
                Loading="@LoadingPendingOrders">
                Làm mới
            </Button>
        </div>
        
        @if (PendingOrders.Any())
        {
                                    <div class="pending-orders-container">
                                        <div class="pending-orders-scroll">
                                            @foreach (var order in PendingOrders)
                                            {
                                                                        <div class="pending-order-item">
                                                                            <div @onclick="() => ResumeOrder(order)" class="pending-order-content">
                                                                                <div class="pending-order-code">@order.Code</div>
                                                                                <div class="pending-order-customer">@order.CustomerName</div>
                                                                                <div class="pending-order-amount">@order.TotalAmount.ToString("N0") đ</div>
                                                                                <div class="pending-order-time">@order.CreationTime.ToString("HH:mm dd/MM")</div>
                                </div>
                                                                             <div class="pending-order-actions">
                                                                                 <Popconfirm Title="Hủy đơn hàng này?" OnConfirm="() => CancelPendingOrder(order)" OkText="Hủy đơn"
                                                                                     CancelText="Không">
                                                                                     <Icon Type="stop" class="cancel-icon" />
                                                                                 </Popconfirm>
                                </div>
                            </div>
                    }
                        </div>
                </div>
        }
        else
        {
                <div style="text-align: center; color: #999; padding: 20px;">
                    <Icon Type="inbox" Style="font-size: 24px; margin-bottom: 8px;" />
                    <div>Chưa có đơn hàng nào đang xử lý</div>
                </div>
        }
    </div>
    
    <Form Model="OrderModel" Layout="@AntDesign.FormLayout.Vertical" RequiredMark="@AntDesign.FormRequiredMark.Required"
        OnFinish="OnFinish" OnFinishFailed="OnFinishFailed">
        <div class="order-section-general">
            <div class="order-section-general-header">
                <div class="txt-18-n-600 order-section-general-title">Thông tin chung</div>
            </div>
            <Row Gutter="16">
                <AntDesign.Col Lg="12">
                    <FormItem Label="Loại" Required="true">
                        <Select TItem="SelectOption" TItemValue="int" DataSource="@TypeOptions"
                            @bind-Value="@OrderModel.Type" Placeholder="Chọn loại..." ItemValue="x => x.Value"
                            ItemLabel="x => x.Label" OnSelectedItemChanged="HandleTypeChange" ShowSearch="true"
                            AllowClear="true" />
                    </FormItem>
                </AntDesign.Col>
                <AntDesign.Col Lg="12">
                    <FormItem Label="Tên khách hàng" Required="@(OrderType == 2)">
                        <div style="display: flex; gap: 4px;">
                            <Select TItem="Customer" TItemValue="Guid ?" DataSource="@Customers"
                                @bind-Value="@OrderModel.CustomerId" Placeholder="Chọn khách hàng..."
                                ItemValue="x => x.Id" ItemLabel="x => x.Name" ShowSearch="true" FilterOption="false"
                                OnSelectedItemChanged="@(e => OnCustomerChanged((Customer)e))" Loading="@CustomersLoading"
                                Style="flex: 1" AllowClear="true">
                                <NotFoundContent>
                                    @if (CustomersLoading)
                                    {
                                            <Spin Size="@AntDesign.SpinSize.Default" />
                                    }
                                    else
                                    {
                                            <div style="text-align: center; padding: 8px 0;">Không có dữ liệu phù hợp</div>
                                    }
                                </NotFoundContent>
                            </Select>
                            <Icon Type="plus" OnClick="HandleAddNewCustomer" />
                        </div>
                    </FormItem>
                </AntDesign.Col>
            </Row>
        </div>

        @if (OrderType == 2)
        {
                <div class="order-section-delivery">
                    <div class="order-section-delivery-header">
                        <div class="txt-18-n-600">Thông tin nhận hàng</div>
                        <Checkbox @bind-Checked="@UseDefaultAddress" Disabled="@(SelectedCustomer == null)"
                            class="order-checkbox-default-address">
                            <span class="txt-16-n-400 order-checkbox-default-address-label"
                                style="color: @(SelectedCustomer?.Id == Guid.Empty ? "#999" : "#22313F")">
                                Giao đến địa chỉ mặc định
                            </span>
                        </Checkbox>
                    </div>
                    <Row Gutter="16" class="order-section-delivery-row-margin">
                        <AntDesign.Col Lg="8">
                            <FormItem Label="Tên người nhận" Required="true">
                                <Input @bind-Value="@OrderModel.Delivery.ConsigneeName" Placeholder="Nhập" MaxLength="255" />
                            </FormItem>
                        </AntDesign.Col>
                        <AntDesign.Col Lg="8">
                            <FormItem Label="Số điện thoại" Required="true">
                                <Input @bind-Value="@OrderModel.Delivery.ConsigneePhone" Placeholder="Nhập" />
                            </FormItem>
                        </AntDesign.Col>
                    </Row>
                    <Row Gutter="16" class="order-section-delivery-row-margin">
                        <AntDesign.Col Lg="8">
                            <FormItem Label="Tỉnh/Thành phố" Required="true">
                                <Select TItem="Province" TItemValue="int?" DataSource="@Provinces"
                                    @bind-Value="@OrderModel.Delivery.ProvinceId" Placeholder="Chọn tỉnh/thành phố..."
                                    ItemValue="x => x.Id" ItemLabel="x => x.Name" ShowSearch="true" FilterOption="false"
                                    OnSelectedItemChanged="@(e => HandleProvinceChange(e))" Loading="@ProvincesLoading"
                                    AllowClear="true" />
                            </FormItem>
                        </AntDesign.Col>
                        <AntDesign.Col Lg="8">
                            <FormItem Label="Quận/Huyện" Required="true">
                                <Select TItem="District" TItemValue="int?" DataSource="@Districts"
                                    @bind-Value="@OrderModel.Delivery.DistrictId" Placeholder="Chọn quận/huyện..."
                                    ItemValue="x => x.Id" ItemLabel="x => x.Name" Disabled="@(SelectedProvinceId == 0)"
                                    ShowSearch="true" FilterOption="false"
                                    OnSelectedItemChanged="@(e => HandleDistrictChange(e))" Loading="@DistrictsLoading"
                                    AllowClear="true" />
                            </FormItem>
                        </AntDesign.Col>
                        <AntDesign.Col Lg="8">
                            <FormItem Label="Phường/Xã" Required="true">
                                <Select TItem="Commune" TItemValue="int?" DataSource="@Communes"
                                    @bind-Value="@OrderModel.Delivery.CommuneId" Placeholder="Chọn phường/xã..."
                                    ItemValue="x => x.Id" ItemLabel="x => x.Name"
                                    Disabled="@(SelectedDistrictId == 0 || SelectedProvinceId == 0)" ShowSearch="true"
                                    FilterOption="false" OnSelectedItemChanged="@(e => HandleCommuneChange(e))"
                                    Loading="@CommunesLoading" AllowClear="true" />
                            </FormItem>
                        </AntDesign.Col>
                    </Row>
                    <Row Gutter="16">
                        <AntDesign.Col Lg="16">
                            <FormItem Label="Địa chỉ chi tiết" Required="true">
                                <Input @bind-Value="@OrderModel.Delivery.ConsigneeAddress" Placeholder="Nhập" MaxLength="200" />
                            </FormItem>
                        </AntDesign.Col>
                        <AntDesign.Col Lg="8">
                            <FormItem Label="Ghi chú">
                                <Input @bind-Value="@OrderModel.Delivery.ConsigneeNote" Placeholder="Nhập" MaxLength="500" />
                            </FormItem>
                        </AntDesign.Col>
                    </Row>
                </div>
        }
        <div class="order-section-product-search">
            <div class="order-section-product-search-header">
                <div class="order-section-product-search-header-left">
                    @if (SelectedProducts.Any())
                    {
                            <Tooltip Title="Xóa sản phẩm đã chọn">
                                <Icon Type="delete" OnClick="HandleRemoveSelectedProducts" class="order-icon-delete-selected" />
                            </Tooltip>
                    }
                    <span class="txt-18-n-500">Danh sách sản phẩm (@Products.Count)</span>
                    <div class="search-controls">
                        <Button Type="@AntDesign.ButtonType.Default" Icon="qr_code" OnClick="StartQRCodeScan"
                            class="qr-scan-btn" Disabled="@IsQRCodeScanning">
                            <Icon Type="qr_code" />
                            Quét QR Code (F3)
                        </Button>
                        <div class="order-section-product-search-input">
                            <Tooltip Title="Tìm kiếm sản phẩm (F1)">
                                <Search @bind-Value="@ProductSearchKeyword" Width="600"
                                    Placeholder="Nhập barcode, mã sản phẩm, tên sản phẩm để tìm kiếm"
                                    OnSearch="OnProductSearch" OnClear="OnSearchClear" Loading="@SearchingProduct"
                                    class="order-search-input" Id="product-search-input" />
                            </Tooltip>
                            @if (SearchResults.Any() && SearchDropdownVisible)
                            {
                                    <div class="search-results-dropdown">
                                        @foreach (var product in SearchResults.Take(5))
                                        {
                                                <div class="search-result-item" @onclick="() => AddProductToOrder(product)">
                                                    <Image Fallback="@(ApiBaseUrl + "/Images/fallback.jpeg")"
                                                        Src="@(ApiBaseUrl + "/" + product.Thumbnail)" Class="search-result-image" />
                                                    <div class="search-result-info">
                                                        <div class="search-result-name">@product.ProductName</div>
                                                        <div class="search-result-sku">SKU: @product.SKU</div>
                                                        <div class="search-result-sku">Màu sắc: @product.ColourName - Size:
                                                            @product.SizeValue</div>
                                                        <div class="search-result-price">
                                                            @if (product.SalePrice.HasValue && product.SalePrice < product.Price)
                                                            {
                                                                    <span
                                                                        style="text-decoration: line-through; color: #999; margin-right: 8px;">@product.Price.ToString("N0")
                                                                        đ</span>
                                                                    <span
                                                                        style="color: #ff4d4f; font-weight: bold;">@product.SalePrice.Value.ToString("N0")
                                                                        đ</span>
                                                                    @if (product.MaxDiscount.HasValue)
                                                                    {
                                                                            <span
                                                                                style="background: #ff4d4f; color: white; padding: 2px 4px; border-radius: 2px; font-size: 10px; margin-left: 4px;">-@product.MaxDiscount.Value.ToString("0")%</span>
                                                                    }
                                                            }
                                                            else
                                                            {
                                                                    @(product.Price.ToString("N0") + "đ")
                                                            }
                                                        </div>
                                                    </div>
                                                    <div class="search-result-stock">
                                                        <Tag Color="@(product.StockQuantity > 0 ? "green" : "red")">
                                                            @(product.StockQuantity > 0 ? $"Còn {product.StockQuantity}" : "Hết hàng")
                                                        </Tag>
                                                    </div>
                                                </div>
                                        }
                                        @if (SearchResults.Count > 5)
                                        {
                                                <div class="search-result-more">
                                                                                            <Button Type="@AntDesign.ButtonType.Link" OnClick="async () => await ShowAllSearchResults()">
                                                        Xem thêm @(SearchResults.Count - 5) sản phẩm...
                                                    </Button>
                                                </div>
                                        }
                                    </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="order-section-product-search-right"></div>
        </div>
        <div class="order-section-product-table-summary">
            <div class="product-list order-section-product-table">
                <Table DataSource="@Products" @bind-SelectedRows="selectedRows" RowKey="x => x.ProductDetailId"
                    Loading="@ProductsLoading" Size="@AntDesign.TableSize.Small">
                    <ChildContent Context="product">
                        <Selection Type="@AntDesign.SelectionType.Checkbox" />
                        <Column TData="string" Title="SKU" Width="136">
                            <div>@product.Sku</div>
                        </Column>
                        <Column TData="string" Title="Ảnh sản phẩm" Width="116">
                            <Image Width="80" Height="80" Fallback="@(ApiBaseUrl + "/Images/fallback.jpeg")"
                                   Src="@(ApiBaseUrl + "/" + product.Image)" Class="search-result-image" />
                        </Column>
                        <Column TData="string" Title="Tên sản phẩm">
                            <div>@product.ProductName</div>
                        </Column>
                        <Column TData="string" Title="Size" Width="116" Align="@AntDesign.ColumnAlign.Right">
                            <div>@product.SizeName</div>
                        </Column>
                        <Column TData="string" Title="Màu sắc" Width="116" Align="@AntDesign.ColumnAlign.Right">
                            <div>@product.ColourName</div>
                        </Column>
                        <Column TData="decimal" Title="Đơn giá (đ)" Width="116" Align="@AntDesign.ColumnAlign.Right">
                            @if (product.Discount > 0)
                            {
                                    <div>
                                        <span
                                            style="text-decoration: line-through; color: #999; display: block; font-size: 11px;">@product.OriginalPrice.ToString("N0")
                                            đ</span>
                                                            <span style="color: #ff4d4f; font-weight: bold;">@product.Price.ToString("N0")
                                            đ</span>
                                    </div>
                            }
                            else
                            {
                                    @(product.Price.ToString("N0") + "đ")
                            }
                        </Column>
                        <Column TData="int" Title="Số lượng" Width="116" Align="@AntDesign.ColumnAlign.Center">
                            <AntDesign.InputNumber TValue="int" @bind-Value="product.Quantity" Min="1"
                                OnChange="@(value => UpdateProductQuantity(product, value))" />
                        </Column>
                        <Column TData="decimal" Title="Giảm giá (đ)" Width="116" Align="@AntDesign.ColumnAlign.Right">
                            @if (product.Discount > 0)
                            {
                                                        <span style="color: #52c41a;">-@product.Discount.ToString("N0") đ</span>
                            }
                            else
                            {
                                                        <span style="color: #999;">0 đ</span>
                            }
                        </Column>
                        <Column TData="decimal" Title="Giảm giá (%)" Width="116" Align="@AntDesign.ColumnAlign.Right">
                            @if (product.Discount > 0)
                            {
                                                        var discountPercent = Math.Round((product.Discount / product.OriginalPrice) * 100, 1);
                                                        <span style="color: #ff4d4f; font-weight: bold;">-@discountPercent%</span>
                            }
                            else
                            {
                                                        <span style="color: #999;">0%</span>
                            }
                        </Column>
                        <Column TData="decimal" Title="Thành tiền (đ)" Width="116" Align="@AntDesign.ColumnAlign.Right">
                            @(product.GrandTotal.ToString("N0") + "đ")
                        </Column>
                        <ActionColumn Title="Thao tác" Width="80" Align="@AntDesign.ColumnAlign.Right">
                            <Icon Type="delete" OnClick="() => RemoveProduct(product)"
                                Style="cursor: pointer; color: #ff4d4f;" />
                        </ActionColumn>
                    </ChildContent>
                </Table>
            </div>
            <div class="summary order-section-summary-panel">
                <div class="order-summary-row order-summary-row-total">
                    <div class="txt-14-n-400">Tổng tiền</div>
                    <div class="txt-14-n-500">@CalculateSubTotal().ToString("N0") đ</div>
                </div>
                <Divider class="order-summary-divider" />
                <div class="order-summary-row order-summary-row-shipping">
                    <div class="txt-14-n-400">Phí vận chuyển</div>
                    @if (OrderType == 2)
                    {
                            <AntDesign.InputNumber TValue="decimal" @bind-Value="@ShippingFee" Placeholder="Nhập..."
                                class="order-input-shipping-fee" />
                    }
                    else
                    {
                            <div class="txt-14-n-500">@ShippingFee.ToString("N0") đ</div>
                    }
                </div>
                <Divider class="order-summary-divider" />
                <div class="txt-14-n-500 order-summary-discount-label">Mã giảm giá/Voucher</div>
                <div class="order-summary-discount-row">
                    <Input @bind-Value="@SelectedVoucherCode" 
                           Placeholder="Chọn voucher" 
                           ReadOnly="true"
                           class="order-input-discount-code" 
                           OnClick="ShowVoucherModal" />
                    <Button OnClick="ShowVoucherModal" Icon="gift">
                        Chọn
                    </Button>
                    @if (SelectedVoucherId.HasValue)
                    {
                                                <Button OnClick="RemoveVoucher" Icon="close" Type="@AntDesign.ButtonType.Text" />
                    }
                </div>
                @if (!string.IsNullOrEmpty(DiscountCodeError))
                {
                        <div class="txt-12-i-400 order-summary-discount-error">
                            @DiscountCodeError
                        </div>
                }
                @if (DiscountCodeAmount > 0)
                {
                        <div class="order-summary-row order-summary-row-discount">
                                                <div class="txt-14-n-400">Giảm giá voucher:</div>
                            <div class="txt-14-n-500 order-summary-discount-amount">-@DiscountCodeAmount.ToString("N0") đ
                            </div>
                            <Icon Type="close" @onclick="RemoveDiscountCode" class="remove-discount-icon" />
                        </div>
                        <Divider class="order-summary-divider" />
                }

                <div class="order-summary-row order-summary-row-final">
                    <div class="order-summary-final-label">Thành tiền</div>
                    <div class="order-summary-final-amount">@CalculateTotal().ToString("N0") đ</div>
                </div>
                <Divider class="order-summary-divider" />
                <div class="order-summary-payment-method">
                    <div class="order-summary-payment-label">Hình thức thanh toán</div>
                    <div style="display: flex; gap: 8px;">
                        <Button Type="@(PaymentType == 0 ? AntDesign.ButtonType.Primary : AntDesign.ButtonType.Default)" 
                                OnClick="SelectCashPayment"
                                Style="flex: 1; height: 40px;">
                            <Icon Type="wallet" Style="margin-right: 4px;" />
                            Tiền mặt
                        </Button>
                        <Button Type="@(PaymentType == 1 ? AntDesign.ButtonType.Primary : AntDesign.ButtonType.Default)" 
                                OnClick="SelectTransferPayment"
                                Style="flex: 1; height: 40px;">
                            <Icon Type="bank" Style="margin-right: 4px;" />
                            Chuyển khoản
                        </Button>
                    </div>
                    
                </div>
            </div>
        </div>
    </Form>
    <Modal Title="Thêm khách hàng mới" Visible="@AddCustomerModalVisible" OnCancel="HandleCloseAddCustomerModal"
        Footer="null">
        <div style="padding: 8px 0;">
            <Form TModel="MeoMeo.Contract.DTOs.CreateQuickCustomerDTO" Model="newCustomerModel"
                Layout="@AntDesign.FormLayout.Vertical">
                <FormItem Label="Họ và tên" Required="true">
                    <Input @bind-Value="newCustomerModel.Name" Placeholder="Nhập họ và tên" MaxLength="255" />
                </FormItem>
                <FormItem Label="Số điện thoại" Required="true">
                    <Input @bind-Value="newCustomerModel.PhoneNumber" Placeholder="Nhập số điện thoại" MaxLength="20" />
                </FormItem>
                <FormItem Label="Địa chỉ">
                    <Input @bind-Value="newCustomerModel.Address" Placeholder="Nhập địa chỉ (tùy chọn)"
                        MaxLength="200" />
                </FormItem>
                <div class="d-flex" style="justify-content: flex-end; gap: 8px;">
                    <Button OnClick="HandleCloseAddCustomerModal">Hủy</Button>
                    <Button Type="AntDesign.ButtonType.Primary" Loading="@creatingCustomer"
                        OnClick="CreateQuickCustomerAsync">Tạo nhanh
                    </Button>
                </div>
            </Form>
        </div>
    </Modal>

    <!-- Voucher Selection Modal -->
    <Modal Title="@($"Chọn Voucher ({AvailableVouchers?.Count ?? 0} voucher khả dụng)")" 
           Visible="@VoucherModalVisible" 
           OnCancel="CloseVoucherModal"
           Width="900"
           Footer="null"
           Class="voucher-modal">
        <div style="max-height: 500px; overflow-y: auto;">
            @if (AvailableVouchers?.Any() == true)
            {
                                        <div class="voucher-list">
                                            @foreach (var voucher in AvailableVouchers)
                                            {
                                                                        <div class="voucher-item @(voucher.CanUse ? "voucher-usable" : "voucher-unusable") @(SelectedVoucherId == voucher.Id ? "voucher-selected" : "")"
                                                                             @onclick="@(() => SelectVoucher(voucher))">
                                                                            <div class="voucher-header">
                                                                                <div class="voucher-code">@voucher.Code</div>
                                                                                <div class="voucher-discount">
                                                                                    @if (voucher.Type == MeoMeo.Domain.Commons.Enums.EVoucherType.byPercentage)
                                                                                    {
                                                                                                                <span class="discount-percentage">Giảm @voucher.Discount%</span>
                                                                                                                @if (voucher.MaxDiscount > 0)
                                                                                                                {
                                                                                                                                            <span class="discount-max">(tối đa @voucher.MaxDiscount.ToString("N0") đ)</span>
                                                                                                                }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                                                <span class="discount-amount">Giảm @voucher.Discount.ToString("N0") đ</span>
                                                                                    }
                                                                                </div>
                                                                            </div>
                                                                            <div class="voucher-details">
                                                                                <div class="voucher-condition">
                                                                                    <Icon Type="shopping-cart" />
                                                                                    Đơn tối thiểu: @voucher.MinOrder.ToString("N0") đ
                                                                                </div>
                                                                                <div class="voucher-expiry">
                                                                                    <Icon Type="calendar" />
                                                                                    HSD: @voucher.EndDate.ToString("dd/MM/yyyy")
                                                                                </div>
                                                                                @if (voucher.MaxTotalUse.HasValue)
                                                                                {
                                                                                                            <div class="voucher-limit">
                                                                                                                <Icon Type="user" />
                                                                                                                Giới hạn: @voucher.MaxTotalUse lượt
                                                                                                            </div>
                                                                                }
                                                                                @if (voucher.MaxTotalUsePerCustomer.HasValue)
                                                                                {
                                                                                                            <div class="voucher-limit-per-customer">
                                                                                                                <Icon Type="team" />
                                                                                                                Mỗi khách: @voucher.MaxTotalUsePerCustomer lượt
                                                                                                            </div>
                                                                                }
                                                                            </div>
                                                                            @if (voucher.CanUse)
                                                                            {
                                                                                                        <div class="voucher-savings">
                                                                                                            Tiết kiệm: @voucher.CalculatedDiscountAmount.ToString("N0") đ
                                                                                                        </div>
                                                                            }
                                                                            else if (!string.IsNullOrEmpty(voucher.Reason))
                                                                            {
                                                                                                        <div class="voucher-error">
                                                                                                            <Icon Type="exclamation-circle" />
                                                                                                            @voucher.Reason
                                                                                                        </div>
                                                                            }
                                                                        </div>
                                            }
                                        </div>
            }
            else
            {
                                        <div class="voucher-empty-state">
                                            <div class="empty-icon">🎁</div>
                                            <div class="empty-title">Không có voucher nào khả dụng</div>
                                            <div class="empty-description">Vui lòng chọn khách hàng và đảm bảo đơn hàng đủ điều kiện để xem voucher</div>
                                            <div class="empty-tips">
                                                <div class="tip-item">💡 Đơn hàng cần đạt giá trị tối thiểu</div>
                                                <div class="tip-item">👤 Voucher có thể giới hạn theo khách hàng</div>
                                                <div class="tip-item">⏰ Kiểm tra thời gian hiệu lực của voucher</div>
                                            </div>
                                        </div>
            }
        </div>
    </Modal>

    <!-- Cancel Order Modal -->
    <Modal Title="Hủy đơn hàng" 
           Visible="@CancelOrderModalVisible" 
           OnOk="@(async () => await ConfirmCancelOrder())"
           OnCancel="CloseCancelOrderModal"
           Width="500">
        <div style="padding: 16px 0;">
            <div style="margin-bottom: 16px;">
                <strong>Đơn hàng:</strong> @OrderToCancel?.Code
            </div>
            <div style="margin-bottom: 16px;">
                <strong>Khách hàng:</strong> @OrderToCancel?.CustomerName
            </div>
            <div style="margin-bottom: 16px;">
                <strong>Tổng tiền:</strong> @OrderToCancel?.TotalPrice.ToString("N0") đ
            </div>
            <div style="margin-bottom: 16px;">
                <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                    Lý do hủy đơn hàng <span style="color: red;">*</span>
                </label>
                <TextArea @bind-Value="@CancelReason" 
                         Placeholder="Nhập lý do hủy đơn hàng..." 
                         Rows="4" 
                         MaxLength="500"
                         ShowCount="true" />
            </div>
        </div>
    </Modal>

    <!-- Payment Info Modal -->
    <Modal Title="Thông tin chuyển khoản" 
           Visible="@PaymentInfoModalVisible" 
           OnCancel="ClosePaymentInfoModal"
           Width="600"
           Footer="null">
        <div style="padding: 20px 0;">
            <div style="display: flex; gap: 24px; align-items: flex-start;">
                @if (!string.IsNullOrEmpty(QrBase64Image))
                {
                        <div style="text-align: center;">
                            <img src="@QrBase64Image" style="width: 200px; height: 200px; border: 1px solid #d9d9d9; border-radius: 8px;" />
                            <div style="margin-top: 12px; font-size: 14px; color: #666;">
                                Quét mã QR để chuyển khoản
                            </div>
                        </div>
                }
                <div style="flex: 1;">
                    <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #1890ff;">
                        <div style="margin-bottom: 16px;">
                            <div style="font-size: 16px; font-weight: 600; color: #1890ff; margin-bottom: 8px;">
                                Thông tin chuyển khoản
                            </div>
                        </div>
                        
                        <div style="margin-bottom: 12px;">
                            <div style="display: flex; align-items: center; margin-bottom: 8px;">
                                <Icon Type="credit-card" Style="margin-right: 8px; color: #1890ff;" />
                                <span style="font-weight: 500; color: #333;">Số tài khoản:</span>
                            </div>
                            <div style="background: white; padding: 8px 12px; border-radius: 4px; border: 1px solid #d9d9d9;">
                                <span style="font-weight: bold; font-size: 16px; color: #1890ff;">@AccountNumber</span>
                            </div>
                        </div>

                        <div style="margin-bottom: 12px;">
                            <div style="display: flex; align-items: center; margin-bottom: 8px;">
                                <Icon Type="bank" Style="margin-right: 8px; color: #1890ff;" />
                                <span style="font-weight: 500; color: #333;">Ngân hàng:</span>
                            </div>
                            <div style="background: white; padding: 8px 12px; border-radius: 4px; border: 1px solid #d9d9d9;">
                                <span style="font-weight: bold; color: #333;">Vietcombank - VCB</span>
                            </div>
                        </div>

                        <div style="margin-bottom: 12px;">
                            <div style="display: flex; align-items: center; margin-bottom: 8px;">
                                <Icon Type="user" Style="margin-right: 8px; color: #1890ff;" />
                                <span style="font-weight: 500; color: #333;">Chủ tài khoản:</span>
                            </div>
                            <div style="background: white; padding: 8px 12px; border-radius: 4px; border: 1px solid #d9d9d9;">
                                <span style="font-weight: bold; color: #333;">BACH HONG LIEN</span>
                            </div>
                        </div>

                        <div style="margin-bottom: 12px;">
                            <div style="display: flex; align-items: center; margin-bottom: 8px;">
                                <Icon Type="file-text" Style="margin-right: 8px; color: #1890ff;" />
                                <span style="font-weight: 500; color: #333;">Nội dung:</span>
                            </div>
                            <div style="background: white; padding: 8px 12px; border-radius: 4px; border: 1px solid #d9d9d9;">
                                <span style="font-weight: bold; color: #333;">@AddInfo</span>
                            </div>
                        </div>

                        <div style="margin-bottom: 16px;">
                            <div style="display: flex; align-items: center; margin-bottom: 8px;">
                                <Icon Type="dollar" Style="margin-right: 8px; color: #ff4d4f;" />
                                <span style="font-weight: 500; color: #333;">Số tiền:</span>
                            </div>
                            <div style="background: #fff2f0; padding: 12px; border-radius: 4px; border: 1px solid #ffccc7;">
                                <span style="font-weight: bold; font-size: 18px; color: #ff4d4f;">@CalculateTotal().ToString("N0") đ</span>
                            </div>
                        </div>

                        <div style="background: #e6f7ff; padding: 12px; border-radius: 4px; border: 1px solid #91d5ff;">
                            <div style="display: flex; align-items: center;">
                                <Icon Type="info-circle" Style="margin-right: 8px; color: #1890ff;" />
                                <span style="font-size: 13px; color: #1890ff; font-style: italic;">
                                    Đơn hàng sẽ được xác nhận sau khi quản trị viên kiểm tra thanh toán.
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Modal>
</div>

@code {

    public class OrderFormModel
    {
        [Required] public int Type { get; set; } = 0;
        public Guid? CustomerId { get; set; }
        public DeliveryInfo Delivery { get; set; } = new();
    }

    IEnumerable<OrderDetailDTO> selectedRows = Enumerable.Empty<OrderDetailDTO>();

    public class DeliveryInfo
    {
        public string ConsigneeName { get; set; } = string.Empty;
        public string ConsigneePhone { get; set; } = string.Empty;
        public int? ProvinceId { get; set; }
        public int? DistrictId { get; set; }
        public int? CommuneId { get; set; }
        public string ConsigneeAddress { get; set; } = string.Empty;
        public string ConsigneeNote { get; set; } = string.Empty;
    }

    public class SelectOption
    {
        public string Label { get; set; } = string.Empty;
        public int Value { get; set; }
    }

    public class Customer
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
    }

    public class Province
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    public class District
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    public class Commune
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }


    // Sử dụng DTO có sẵn thay vì tự định nghĩa
    public class OrderVoucher
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Code { get; set; } = string.Empty;
        public decimal DiscountAmount { get; set; }
        public decimal DiscountPercent { get; set; }
        public decimal MinOrderAmount { get; set; }
        public DateTime ExpiryDate { get; set; }
    }

    // Class cho đơn hàng đang xử lý
    public class PendingOrderItem
    {
        public Guid Id { get; set; }
        public string Code { get; set; } = string.Empty;
        public string CustomerName { get; set; } = string.Empty;
        public decimal TotalAmount { get; set; }
        public DateTime CreationTime { get; set; }
        public int Status { get; set; } // 0: Draft, 1: Pending, etc.
    }

    private OrderFormModel OrderModel = new();
    private object? DetailsItem = null;
    private int OrderType = 0;
    private bool UseDefaultAddress = false;
    private Customer? SelectedCustomer = null;
    private int SelectedProvinceId = 0;
    private int SelectedDistrictId = 0;

    private List<SelectOption> TypeOptions = new()
{
new() { Label = "Giao trực tiếp", Value = 0 },
new() { Label = "Giao hàng", Value = 2 }
};

    private List<Customer> Customers = new();
    private List<Province> Provinces = new();
    private List<District> Districts = new();
    private List<Commune> Communes = new();
    private List<OrderDetailDTO> Products = new();
    private List<OrderDetailDTO> SelectedProducts = new();
    private List<ProductSearchResponseDTO> SearchResults = new();
    private bool CustomersLoading = false;
    private bool ProvincesLoading = false;
    private bool DistrictsLoading = false;
    private bool CommunesLoading = false;
    private bool ProductsLoading = false;
    private bool SearchingProduct = false;
    private bool CheckingDiscount = false;
    private string ProductSearchKeyword = string.Empty;
    private bool SearchDropdownVisible = false;
    private bool AddCustomerModalVisible = false;
    private CreateQuickCustomerDTO newCustomerModel = new();
    private bool creatingCustomer = false;
    private decimal ShippingFee = 0;
    private string DiscountCode = string.Empty;
    private string? DiscountCodeError = null;
    private decimal DiscountCodeAmount = 0;
    private OrderVoucher? SelectedVoucher = null;
    private Guid? SelectedVoucherId = null;
    private string SelectedVoucherCode = string.Empty;
    private List<AvailableVoucherDTO> AvailableVouchers = new();
    private bool LoadingVouchers = false;
    private bool VoucherModalVisible = false;
    
    // Cancel Order Modal
    private bool CancelOrderModalVisible = false;
    private OrderDTO? OrderToCancel = null;
    private string CancelReason = "Khách hàng yêu cầu hủy";
    
    // Payment Info Modal
    private bool PaymentInfoModalVisible = false;
    
    private int PaymentType = 0;
    private string ApiBaseUrl = string.Empty;
    private bool IsBarcodeScanning = false;
    private bool IsQRCodeScanning = false;
    private Guid? CurrentOrderId = null; // ID của đơn hàng đã tạo thành công
    private string CurrentOrderCode = string.Empty; // Mã đơn hàng đã tạo thành công
    private List<PendingOrderItem> PendingOrders = new(); // Danh sách đơn hàng đang xử lý
    private bool LoadingPendingOrders = false;
    
    // Transfer payment info
    private string? QrBase64Image { get; set; }
    public string? AccountNumber { get; set; } = "1014640175";
    public string? AddInfo { get; set; } = "Thanh Toan Don Hang";
    public string? BankBin { get; set; } = "970436";

    private ProductSearchRequestDTO requestSearchProduct = new ProductSearchRequestDTO
    {
        PageIndex = 1,
        PageSize = 20,
        InStockOnly = true
    };


    protected override async Task OnInitializedAsync()
    {
        ApiBaseUrl = Configuration["ApiSettings:BaseUrl"]?.TrimEnd('/') ?? string.Empty;
        await LoadInitialData();
        await LoadPendingOrders(); // Load đơn hàng đang xử lý
        //
        // // Set focus to search input
        // await Task.Delay(100);
        // await JSRuntime.InvokeVoidAsync("setFocus", "product-search-input");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Add keyboard shortcuts
            await JSRuntime.InvokeVoidAsync("addKeyboardShortcuts");
        }
    }

    private void HandleCancel()
    {
        ClearAllData();
        MessageService.Success("Đã làm mới thành công");
    }

    private void ClearAllData()
    {
        // Clear sản phẩm
        Products.Clear();
        SelectedProducts.Clear();
        SearchResults.Clear();
        SearchDropdownVisible = false;
        ProductSearchKeyword = string.Empty;
        
        // Clear form data
        OrderModel = new();
        OrderType = 0;
        OrderModel.Type = 0;
        
        // Clear customer data
        SelectedCustomer = null;
        OrderModel.CustomerId = null;
        
        // Clear delivery data
        SelectedProvinceId = 0;
        SelectedDistrictId = 0;
        UseDefaultAddress = false;
        
        // Clear payment & discount data
        ShippingFee = 0;
        DiscountCode = string.Empty;
        DiscountCodeError = null;
        DiscountCodeAmount = 0;
        PaymentType = 0;
        QrBase64Image = null;
        
        // Clear voucher data
        SelectedVoucher = null;
        SelectedVoucherId = null;
        SelectedVoucherCode = string.Empty;
        AvailableVouchers.Clear();
        
        // Clear order data
        CurrentOrderId = null;
        CurrentOrderCode = string.Empty;
        
        // Clear modal states
        AddCustomerModalVisible = false;
        VoucherModalVisible = false;
        CancelOrderModalVisible = false;
        PaymentInfoModalVisible = false;
        OrderToCancel = null;
        CancelReason = "Khách hàng yêu cầu hủy";
        
        StateHasChanged();
    }

    private async Task HandleSave(bool isDraft)
    {
        if (!Products.Any())
        {
            MessageService.Warning("Vui lòng chọn sản phẩm");
            return;
        }

        if (SelectedCustomer == null || SelectedCustomer.Id == Guid.Empty)
        {
            MessageService.Warning("Vui lòng chọn khách hàng");
            return;
        }

        if (OrderType == 2)
        {
            if (string.IsNullOrWhiteSpace(OrderModel.Delivery.ConsigneeName) ||
            string.IsNullOrWhiteSpace(OrderModel.Delivery.ConsigneePhone) ||
            !OrderModel.Delivery.ProvinceId.HasValue ||
            !OrderModel.Delivery.DistrictId.HasValue ||
            !OrderModel.Delivery.CommuneId.HasValue ||
            string.IsNullOrWhiteSpace(OrderModel.Delivery.ConsigneeAddress))
            {
                MessageService.Warning("Vui lòng nhập đủ thông tin giao hàng");
                return;
            }
        }

        try
        {
            var dto = new CreatePosOrderDTO
            {
                Type = OrderType == 2 ? MeoMeo.Domain.Commons.Enums.EOrderType.Online : MeoMeo.Domain.Commons.Enums.EOrderType.Store,
                PaymentMethod = PaymentType == 0 ? MeoMeo.Domain.Commons.Enums.EOrderPaymentMethod.Cash :
            MeoMeo.Domain.Commons.Enums.EOrderPaymentMethod.Transfer,
                Note = OrderModel.Delivery.ConsigneeNote,
                ShippingFee = ShippingFee,
                Status = isDraft ? EOrderStatus.Pending : EOrderStatus.Completed,
                DiscountCode = string.IsNullOrWhiteSpace(DiscountCode) ? null : DiscountCode,
                CustomerId = SelectedCustomer?.Id ?? Guid.Empty,
                Delivery = OrderType == 2
            ? new MeoMeo.Contract.DTOs.Order.CreatePosDeliveryDTO
            {
                ConsigneeName = OrderModel.Delivery.ConsigneeName,
                ConsigneePhone = OrderModel.Delivery.ConsigneePhone,
                ProvinceId = OrderModel.Delivery.ProvinceId ?? 0,
                DistrictId = OrderModel.Delivery.DistrictId ?? 0,
                CommuneId = OrderModel.Delivery.CommuneId ?? 0,
                ConsigneeAddress = OrderModel.Delivery.ConsigneeAddress,
                ConsigneeNote = OrderModel.Delivery.ConsigneeNote
                    
            }
            : null,
                Items = Products.Select(p => new MeoMeo.Contract.DTOs.Order.CreatePosOrderItemDTO
                {
                    Id = p.Id, // OrderDetail Id
                    ProductDetailId = p.ProductDetailId,
                    PromotionDetailId = p.PromotionDetailId == Guid.Empty ? null : p.PromotionDetailId,
                    Sku = p.Sku,
                    Price = p.Price,
                    OriginalPrice = p.OriginalPrice,
                    Quantity = p.Quantity,
                    ProductName = p.ProductName,
                    Discount = p.Discount,
                    Image = p.Image,
                    SizeName = p.SizeName,
                    ColourName = p.ColourName
                }).ToList()
            };

            // Nếu đã có CurrentOrderId thì update, nếu không thì tạo mới
            var resp = CurrentOrderId.HasValue
                ? await OrderClientService.UpdatePosOrderAsync(CurrentOrderId.Value, dto)
                : await OrderClientService.CreatePosOrderAsync(dto);

            if (resp != null && resp.ResponseStatus == MeoMeo.Contract.Commons.BaseStatus.Success)
            {
                // Lưu thông tin đơn hàng đã tạo/cập nhật thành công
                CurrentOrderId = resp.OrderId;
                CurrentOrderCode = resp.Code ?? string.Empty;
                
                if (CurrentOrderId.HasValue && CurrentOrderId != Guid.Empty)
                {
                    MessageService.Success($"Cập nhật đơn thành công: {resp.Code}");
                }
                else
                {
                    MessageService.Success($"Tạo đơn thành công: {resp.Code}");
                }
                
                if (isDraft)
                {
                    MessageService.Info("Đơn hàng đã được lưu tạm. Bạn có thể tiếp tục chỉnh sửa hoặc thanh toán.");
                }
                else
                {
                    MessageService.Info("Đơn hàng đã được hoàn thành thành công. Bạn có thể in hóa đơn hoặc tạo đơn mới.");
                    
                    // Clear toàn bộ dữ liệu để chuẩn bị đơn hàng mới
                    ClearAllData();
                }
                
                await LoadPendingOrders();
            }
            else
            {
                MessageService.Error(resp?.Message ?? (CurrentOrderId.HasValue ? "Cập nhật đơn thất bại" : "Tạo đơn thất bại"));
            }
        }
        catch
        {
            MessageService.Error("Không thể lưu đơn hàng");
        }
    }

    private async Task HandlePaymentAndPrint()
    {
        if (!Products.Any())
        {
            MessageService.Warning("Vui lòng chọn sản phẩm");
            return;
        }

        if (SelectedCustomer == null || SelectedCustomer.Id == Guid.Empty)
        {
            MessageService.Warning("Vui lòng chọn khách hàng");
            return;
        }

        if (OrderType == 2)
        {
            if (string.IsNullOrWhiteSpace(OrderModel.Delivery.ConsigneeName) ||
            string.IsNullOrWhiteSpace(OrderModel.Delivery.ConsigneePhone) ||
            !OrderModel.Delivery.ProvinceId.HasValue ||
            !OrderModel.Delivery.DistrictId.HasValue ||
            !OrderModel.Delivery.CommuneId.HasValue ||
            string.IsNullOrWhiteSpace(OrderModel.Delivery.ConsigneeAddress))
            {
                MessageService.Warning("Vui lòng nhập đủ thông tin giao hàng");
                return;
            }
        }

        try
        {
            // 1. Thanh toán đơn hàng (tạo/cập nhật với status Completed)
            var dto = new CreatePosOrderDTO
            {
                Type = OrderType == 2 ? MeoMeo.Domain.Commons.Enums.EOrderType.Online : MeoMeo.Domain.Commons.Enums.EOrderType.Store,
                PaymentMethod = PaymentType == 0 ? MeoMeo.Domain.Commons.Enums.EOrderPaymentMethod.Cash :
                MeoMeo.Domain.Commons.Enums.EOrderPaymentMethod.Transfer,
                Note = OrderModel.Delivery.ConsigneeNote,
                ShippingFee = ShippingFee,
                Status = EOrderStatus.Completed, // Luôn Completed khi thanh toán
                DiscountCode = string.IsNullOrWhiteSpace(DiscountCode) ? null : DiscountCode,
                CustomerId = SelectedCustomer?.Id ?? Guid.Empty,
                Delivery = OrderType == 2
            ? new MeoMeo.Contract.DTOs.Order.CreatePosDeliveryDTO
            {
                ConsigneeName = OrderModel.Delivery.ConsigneeName,
                ConsigneePhone = OrderModel.Delivery.ConsigneePhone,
                ProvinceId = OrderModel.Delivery.ProvinceId ?? 0,
                DistrictId = OrderModel.Delivery.DistrictId ?? 0,
                CommuneId = OrderModel.Delivery.CommuneId ?? 0,
                ConsigneeAddress = OrderModel.Delivery.ConsigneeAddress,
                ConsigneeNote = OrderModel.Delivery.ConsigneeNote
                    
            }
            : null,
                Items = Products.Select(p => new MeoMeo.Contract.DTOs.Order.CreatePosOrderItemDTO
                {
                    Id = p.Id,
                    ProductDetailId = p.ProductDetailId,
                    PromotionDetailId = p.PromotionDetailId == Guid.Empty ? null : p.PromotionDetailId,
                    Sku = p.Sku,
                    Price = p.Price,
                    OriginalPrice = p.OriginalPrice,
                    Quantity = p.Quantity,
                    ProductName = p.ProductName,
                    Discount = p.Discount,
                    Image = p.Image,
                    SizeName = p.SizeName,
                    ColourName = p.ColourName
                }).ToList()
            };

            // Tạo/cập nhật đơn hàng
            var resp = CurrentOrderId.HasValue
                ? await OrderClientService.UpdatePosOrderAsync(CurrentOrderId.Value, dto)
                : await OrderClientService.CreatePosOrderAsync(dto);

            if (resp != null && resp.ResponseStatus == MeoMeo.Contract.Commons.BaseStatus.Success)
            {
                CurrentOrderId = resp.OrderId;
                CurrentOrderCode = resp.Code ?? string.Empty;

                // 2. In hóa đơn chi tiết với dữ liệu từ API
                await PrintDetailedReceiptFromApi(resp);

                MessageService.Success($"Thanh toán thành công: {resp.Code}");
                
                // Clear data sau khi thanh toán
                ClearAllData();
                await LoadPendingOrders();
            }
            else
            {
                MessageService.Error(resp?.Message ?? "Thanh toán thất bại");
            }
        }
        catch (Exception ex)
        {
            MessageService.Error("Không thể thanh toán đơn hàng: " + ex.Message);
        }
    }

    private async Task PrintDetailedReceiptFromApi(CreatePosOrderResultDTO orderData)
    {
        try
        {
            // Sử dụng dữ liệu từ API response
            var receiptData = new
            {
                // Thông tin đơn hàng
                orderCode = orderData.Code,
                orderId = orderData.OrderId,
                orderDate = orderData.CreationTime.ToString("dd/MM/yyyy HH:mm"),
                orderType = orderData.Type == MeoMeo.Domain.Commons.Enums.EOrderType.Online ? "Giao hàng" : "Giao trực tiếp",
                status = "Đã thanh toán",
                    
                // Thông tin khách hàng
                customerName = orderData.CustomerName ?? "Khách lẻ",
                customerPhone = orderData.CustomerPhoneNumber ?? "",
                customerEmail = orderData.CustomerEmail ?? "",
                    
                // Thông tin nhân viên
                employeeName = orderData.EmployeeName ?? "",
                employeePhone = orderData.EmployeePhoneNumber ?? "",
                    
                // Thông tin giao hàng (nếu có)
                deliveryInfo = orderData.Type == MeoMeo.Domain.Commons.Enums.EOrderType.Online && orderData.Delivery != null ? new
                {
                    consigneeName = orderData.Delivery.ConsigneeName,
                    consigneePhone = orderData.Delivery.ConsigneePhone,
                    address = orderData.Delivery.ConsigneeAddress,
                    note = orderData.Delivery.ConsigneeNote
                } : null,
                    
                // Chi tiết sản phẩm
                items = orderData.OrderDetails?.Select(p => new
                {
                    productName = p.ProductName,
                    sku = p.Sku,
                    size = p.SizeName,
                    colour = p.ColourName,
                    quantity = p.Quantity,
                    unitPrice = p.Price,
                    originalPrice = p.OriginalPrice,
                    discount = p.Discount,
                    discountPercent = p.Discount, // Discount đã là % rồi
                    total = p.Price * p.Quantity, // Price đã là giá sau giảm giá rồi
                    image = p.Image
                }).ToList(),
                    
                // Tổng kết
                subTotal = orderData.OrderDetails?.Sum(p => p.Price * p.Quantity) ?? 0,
                shippingFee = orderData.ShippingFee,
                discountAmount = orderData.OrderDetails?.Sum(p => p.Discount) ?? 0,
                voucherDiscount = DiscountCodeAmount, // Tính từ voucher đã chọn
                total = orderData.TotalPrice,
                    
                // Thông tin thanh toán
                paymentMethod = orderData.PaymentMethod == MeoMeo.Domain.Commons.Enums.EOrderPaymentMethod.Cash ? "Tiền mặt" : "Chuyển khoản",
                paymentStatus = "Đã thanh toán",
                    
                // QR Code (nếu chuyển khoản)
                qrCode = orderData.PaymentMethod == MeoMeo.Domain.Commons.Enums.EOrderPaymentMethod.Transfer ? QrBase64Image : null,
                bankInfo = orderData.PaymentMethod == MeoMeo.Domain.Commons.Enums.EOrderPaymentMethod.Transfer ? new
                {
                    accountNumber = AccountNumber,
                    bankName = "Vietcombank - VCB",
                    accountHolder = "BACH HONG LIEN",
                    content = AddInfo
                } : null,
                    
                // Ghi chú
                note = orderData.Note ?? "",
                    
                // Thông tin cửa hàng
                storeInfo = new
                {
                    name = "MeoMeo Shop",
                    address = "53 ngõ 19, Tố Hữu, Trung văn, Nam Từ Liêm, Hà Nội",
                    phone = "0347324430",
                    email = "info@meomeoshop.com"
                }
            };

            // Gọi JavaScript để in hóa đơn chi tiết
            await JSRuntime.InvokeVoidAsync("printDetailedReceipt", receiptData);
            MessageService.Success($"Đã gửi lệnh in hóa đơn chi tiết cho đơn hàng {orderData.Code}");
        }
        catch (Exception ex)
        {
            MessageService.Error("Không thể in hóa đơn chi tiết: " + ex.Message);
        }
    }

    

    private async Task HandlePrintOrder()
    {
        if (CurrentOrderId == null)
        {
            MessageService.Warning("Vui lòng tạo đơn hàng thành công trước khi in hóa đơn");
            return;
        }

        if (!Products.Any())
        {
            MessageService.Warning("Không có sản phẩm để in");
            return;
        }

        try
        {
            // Tạo dữ liệu hóa đơn để in với thông tin đơn hàng thực tế
            var receiptData = new
            {
                OrderCode = CurrentOrderCode,
                OrderId = CurrentOrderId,
                CustomerName = SelectedCustomer?.Name ?? "Khách lẻ",
                CustomerPhone = SelectedCustomer?.Phone ?? "",
                Items = Products.Select(p => new
                {
                    Name = p.ProductName,
                    SKU = p.Sku,
                    Quantity = p.Quantity,
                    Price = p.Price,
                    Total = p.GrandTotal
                }),
                SubTotal = CalculateSubTotal(),
                ShippingFee = ShippingFee,
                DiscountAmount = DiscountCodeAmount,
                Total = CalculateTotal(),
                PaymentMethod = PaymentType == 0 ? "Tiền mặt" : "Chuyển khoản",
                OrderType = OrderType == 0 ? "Giao trực tiếp" : "Giao hàng"
            };

            // Gọi JavaScript để in hóa đơn
            await JSRuntime.InvokeVoidAsync("printReceipt", receiptData);
            MessageService.Success($"Đã gửi lệnh in hóa đơn cho đơn hàng {CurrentOrderCode}");
        }
        catch (Exception ex)
        {
            MessageService.Error("Không thể in hóa đơn: " + ex.Message);
        }
    }

    private void HandleGoBack()
    {
        Navigation.NavigateTo("/orders");
    }

    private void HandleTypeChange(SelectOption selectedOption)
    {
        OrderType = selectedOption.Value;
        StateHasChanged();
    }

    private async Task FetchImageAsync()
    {
        if (string.IsNullOrEmpty(AccountNumber) || string.IsNullOrEmpty(BankBin))
            return;
            
        var url = $"https://img.vietqr.io/image/{BankBin}-{AccountNumber}-qr_only.png?amount={(int)CalculateTotal()}&addInfo={AddInfo}";
        try
        {
            var imageBytes = await ApiCaller.GetByteArrayAsync(url);
            QrBase64Image = $"data:image/png;base64,{Convert.ToBase64String(imageBytes)}";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching QR code: {ex.Message}");
        }
    }

    private void OnCustomerSearch(string searchText)
    {
        CustomersLoading = true;
        CustomersLoading = false;
        StateHasChanged();
    }

    private void OnCustomerChanged(Customer customer)
    {
        SelectedCustomer = customer;
        if (customer.Id == Guid.Empty)
        {
            UseDefaultAddress = false;
            AvailableVouchers.Clear();
            SelectedVoucherId = null;
            SelectedVoucher = null;
            DiscountCodeAmount = 0;
        }
        else
        {
            // Load available vouchers when customer is selected
            _ = LoadAvailableVouchers();
        }

        StateHasChanged();
    }

    private void HandleAddNewCustomer()
    {
        AddCustomerModalVisible = true;
        newCustomerModel = new CreateQuickCustomerDTO();
    }

    private void HandleCloseAddCustomerModal()
    {
        AddCustomerModalVisible = false;
    }

    private async Task CreateQuickCustomerAsync()
    {
        if (string.IsNullOrWhiteSpace(newCustomerModel.Name) || string.IsNullOrWhiteSpace(newCustomerModel.PhoneNumber))
        {
            MessageService.Warning("Vui lòng nhập đầy đủ họ tên và số điện thoại");
            return;
        }

        try
        {
            creatingCustomer = true;
            var resp = await CustomerClientService.CreateQuickCustomerAsync(newCustomerModel);
            if (resp != null && resp.ResponseStatus == MeoMeo.Contract.Commons.BaseStatus.Success)
            {
                MessageService.Success(resp.Message ?? "Tạo khách hàng nhanh thành công");

                // Tạo customer object từ response và select nó
                var newCustomer = new Customer
                {
                    Id = resp.CustomerId ?? Guid.Empty,
                    Name = resp.CustomerName ?? newCustomerModel.Name,
                    Phone = resp.PhoneNumber ?? newCustomerModel.PhoneNumber
                };

                // Thêm vào danh sách customers và select
                Customers.Insert(0, newCustomer);
                SelectedCustomer = newCustomer;
                OrderModel.CustomerId = newCustomer.Id;

                AddCustomerModalVisible = false;
            }
            else
            {
                MessageService.Error(resp?.Message ?? "Tạo khách hàng thất bại");
            }
        }
        catch
        {
            MessageService.Error("Không thể tạo khách hàng");
        }
        finally
        {
            creatingCustomer = false;
            StateHasChanged();
        }
    }

    private void OnProvinceSearch(string searchText)
    {
    }

    private void HandleProvinceChange(Province province)
    {
        SelectedProvinceId = province?.Id ?? 0;
        Districts.Clear();
        Communes.Clear();
        OrderModel.Delivery.DistrictId = null;
        OrderModel.Delivery.CommuneId = null;
        StateHasChanged();
        _ = LoadDistrictsAsync(SelectedProvinceId);
    }

    private void OnDistrictSearch(string searchText)
    {
    }

    private void HandleDistrictChange(District district)
    {
        SelectedDistrictId = district?.Id ?? 0;
        Communes.Clear();
        OrderModel.Delivery.CommuneId = null;
        StateHasChanged();
        _ = LoadCommunesAsync(SelectedDistrictId);
    }

    private void OnCommuneSearch(string searchText)
    {
    }

    private void HandleCommuneChange(Commune commune)
    {
        OrderModel.Delivery.CommuneId = commune?.Id;
        StateHasChanged();
    }

    private void OnSearchClick()
    {
        SearchDropdownVisible = true;
    }


    private async Task OnProductSearch(string searchText)
    {
        try
        {
            SearchingProduct = true;
            ProductSearchKeyword = searchText?.Trim() ?? string.Empty;

            if (string.IsNullOrEmpty(ProductSearchKeyword))
            {
                SearchResults.Clear();
                SearchDropdownVisible = false;
                return;
            }

            // Cập nhật request với keyword mới
            requestSearchProduct.SearchKeyword = ProductSearchKeyword;
            requestSearchProduct.PageIndex = 1; // Reset về trang đầu khi search mới

            var result = await ProductClientService.SearchProductsAsync(requestSearchProduct);
            var items = result.Items ?? new List<ProductSearchResponseDTO>();

            SearchResults = items.ToList();

            SearchDropdownVisible = SearchResults.Any();
        }
        catch
        {
            MessageService.Error("Không thể tìm sản phẩm");
            SearchResults.Clear();
            SearchDropdownVisible = false;
        }
        finally
        {
            SearchingProduct = false;
            StateHasChanged();
        }
    }

    private void OnSearchClear()
    {
        ProductSearchKeyword = string.Empty;
        SearchResults.Clear();
        SearchDropdownVisible = false;
        StateHasChanged();
    }

    private Task AddProductToOrder(ProductSearchResponseDTO product)
    {
        if (product.StockQuantity <= 0)
        {
            MessageService.Warning("Sản phẩm đã hết hàng");
            return Task.CompletedTask;
        }

        var existingProduct = Products.FirstOrDefault(p => p.ProductDetailId == product.ProductDetailId);
        if (existingProduct != null)
        {
            if (existingProduct.Quantity >= product.StockQuantity)
            {
                MessageService.Warning($"Số lượng tồn kho chỉ còn {product.StockQuantity}");
                return Task.CompletedTask;
            }

            existingProduct.Quantity++;
            existingProduct.GrandTotal = existingProduct.Price * existingProduct.Quantity;
        }
        else
        {
            // Calculate discount amount and percentage
            var finalPrice = product.SalePrice ?? product.Price;
            var discountAmount = product.Price - finalPrice;

            Products.Add(new OrderDetailDTO
            {
                Id = Guid.NewGuid(), // New OrderDetail Id
                OrderId = Guid.Empty, // Will be set when creating order
                ProductDetailId = product.ProductDetailId,
                PromotionDetailId = Guid.Empty, // Will be set by backend
                Sku = product.SKU,
                Price = (float)finalPrice,
                OriginalPrice = (float)product.Price,
                Quantity = 1,
                GrandTotal = (float)finalPrice,
                ProductName = product.ProductName,
                Discount = (float)discountAmount,
                Image = string.IsNullOrWhiteSpace(product.Thumbnail) ? string.Empty : product.Thumbnail,
                SizeName = product.SizeValue,
                ColourName = product.ColourName
            });
        }

        ReloadVouchersIfNeeded();
        SearchDropdownVisible = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async ValueTask ShowAllSearchResults()
    {
        try
        {
            SearchingProduct = true;
            requestSearchProduct.PageSize = 50;
            var result = await ProductClientService.SearchProductsAsync(requestSearchProduct);
            var items = result.Items ?? new List<ProductSearchResponseDTO>();
            SearchResults = items.ToList();
            SearchDropdownVisible = SearchResults.Any();
        }
        catch
        {
            MessageService.Error("Không thể tải thêm sản phẩm");
        }
        finally
        {
            SearchingProduct = false;
            StateHasChanged();
        }
    }

    private async Task StartBarcodeScan()
    {
        try
        {
            IsBarcodeScanning = true;
            MessageService.Info("Đang khởi động camera quét barcode...");

            // Gọi JavaScript để khởi động camera
            var barcode = await JSRuntime.InvokeAsync<string>("startBarcodeScan");
            if (!string.IsNullOrEmpty(barcode))
            {
                // Tìm sản phẩm theo barcode bằng SearchProductsAsync
                var barcodeRequest = new ProductSearchRequestDTO
                {
                    PageIndex = 1,
                    PageSize = 1,
                    SearchKeyword = barcode,
                    InStockOnly = true
                };

                var result = await ProductClientService.SearchProductsAsync(barcodeRequest);
                var product = result.Items?.FirstOrDefault();

                if (product != null)
                {
                    await AddProductToOrder(product);
                }
                else
                {
                    MessageService.Warning($"Không tìm thấy sản phẩm với barcode: {barcode}");
                }
            }
        }
        catch (Exception ex)
        {
            MessageService.Error("Không thể khởi động camera: " + ex.Message);
        }
        finally
        {
            IsBarcodeScanning = false;
            StateHasChanged();
        }
    }

    private async Task StartQRCodeScan()
    {
        try
        {
            IsQRCodeScanning = true;
            MessageService.Info("Đang khởi động camera quét QR code...");

            // Gọi JavaScript để khởi động camera quét QR
            var qrData = await JSRuntime.InvokeAsync<string>("startQRCodeScan");
            if (!string.IsNullOrEmpty(qrData))
            {
                await ProcessQRCodeData(qrData);
            }
        }
        catch (Exception ex)
        {
            MessageService.Error("Không thể khởi động camera quét QR: " + ex.Message);
        }
        finally
        {
            IsQRCodeScanning = false;
            StateHasChanged();
        }
    }

    private async Task ProcessQRCodeData(string qrData)
    {
        try
        {
            // Kiểm tra format QR code: PRODUCT:SKU:PRICE:SIZE:COLOR
            if (qrData.StartsWith("PRODUCT:"))
            {
                var parts = qrData.Split(':');
                if (parts.Length >= 2)
                {
                    var sku = parts[1];

                    // Tìm sản phẩm theo SKU
                    var product = await ProductClientService.GetProductBySkuAsync(sku);

                    if (product != null)
                    {
                        await AddProductToOrder(product);
                        MessageService.Success($"Đã thêm sản phẩm {product.ProductName} vào đơn hàng");
                    }
                    else
                    {
                        MessageService.Warning($"Không tìm thấy sản phẩm với SKU: {sku}");
                    }
                }
                else
                {
                    MessageService.Warning("QR code không đúng định dạng");
                }
            }
            else
            {
                // Nếu không phải QR code sản phẩm, thử tìm kiếm như barcode thông thường
                var barcodeRequest = new ProductSearchRequestDTO
                {
                    PageIndex = 1,
                    PageSize = 1,
                    SearchKeyword = qrData,
                    InStockOnly = true
                };

                var result = await ProductClientService.SearchProductsAsync(barcodeRequest);
                var product = result.Items?.FirstOrDefault();

                if (product != null)
                {
                    await AddProductToOrder(product);
                    MessageService.Success($"Đã thêm sản phẩm {product.ProductName} vào đơn hàng");
                }
                else
                {
                    MessageService.Warning($"Không tìm thấy sản phẩm với dữ liệu: {qrData}");
                }
            }
        }
        catch (Exception ex)
        {
            MessageService.Error($"Có lỗi xảy ra khi xử lý QR code: {ex.Message}");
        }
    }

    private async Task LoadAvailableVouchers()
    {
        if (SelectedCustomer?.Id == Guid.Empty || SelectedCustomer?.Id == null)
            return;

        try
        {
            LoadingVouchers = true;
            var request = new GetAvailableVouchersRequestDTO
            {
                CustomerId = SelectedCustomer.Id,
                OrderAmount = CalculateSubTotal()
            };

            AvailableVouchers = await VoucherClientService.GetAvailableVouchersAsync(request);
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi tải danh sách voucher: {ex.Message}");
            AvailableVouchers = new List<AvailableVoucherDTO>();
        }
        finally
        {
            LoadingVouchers = false;
            StateHasChanged();
        }
    }

    private void ShowVoucherModal()
    {
        if (SelectedCustomer?.Id == Guid.Empty || SelectedCustomer?.Id == null)
        {
            MessageService.Warning("Vui lòng chọn khách hàng trước");
            return;
        }
        
        VoucherModalVisible = true;
        _ = LoadAvailableVouchers();
    }

    private void CloseVoucherModal()
    {
        VoucherModalVisible = false;
    }

    private void SelectVoucher(AvailableVoucherDTO voucher)
    {
        if (!voucher.CanUse)
        {
            MessageService.Warning(voucher.Reason ?? "Voucher không thể sử dụng");
            return;
        }

        SelectedVoucherId = voucher.Id;
        SelectedVoucherCode = voucher.Code;
        DiscountCodeAmount = (decimal)voucher.CalculatedDiscountAmount;
        SelectedVoucher = new OrderVoucher
        {
            Id = voucher.Id,
            Name = voucher.Name,
            Code = voucher.Code,
            DiscountAmount = (decimal)voucher.CalculatedDiscountAmount,
            DiscountPercent = voucher.Type == MeoMeo.Domain.Commons.Enums.EVoucherType.byPercentage ? (decimal)voucher.Discount : 0,
            MinOrderAmount = voucher.MinOrder,
            ExpiryDate = voucher.EndDate
        };
        DiscountCodeError = null;
        
        VoucherModalVisible = false;
        MessageService.Success($"Áp dụng voucher thành công: -{DiscountCodeAmount.ToString("N0")} đ");
        StateHasChanged();
    }

    private void RemoveDiscountCode()
    {
        SelectedVoucherId = null;
        DiscountCodeAmount = 0;
        DiscountCodeError = null;
        StateHasChanged();
    }

    private void RemoveVoucher()
    {
        SelectedVoucherId = null;
        SelectedVoucherCode = string.Empty;
        SelectedVoucher = null;
        DiscountCodeAmount = 0;
        DiscountCodeError = null;
        StateHasChanged();
    }

    private void HandleRemoveSelectedProducts()
    {
        if (SelectedProducts.Any())
        {
            var count = SelectedProducts.Count;
            foreach (var product in SelectedProducts)
            {
                Products.Remove(product);
            }

            SelectedProducts.Clear();
            StateHasChanged();
            MessageService.Success($"Đã xóa {count} sản phẩm");
        }
        else
        {
            MessageService.Warning("Chưa có sản phẩm nào được chọn");
        }
    }

    private Task UpdateProductQuantity(OrderDetailDTO product, int quantity)
    {
        if (quantity <= 0)
        {
            MessageService.Warning("Số lượng phải lớn hơn 0");
            return Task.CompletedTask;
        }

        product.Quantity = quantity;
        product.GrandTotal = product.Price * product.Quantity;

        ReloadVouchersIfNeeded();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task RemoveProduct(OrderDetailDTO product)
    {
        Products.Remove(product);
        SelectedProducts.Remove(product);
        
        ReloadVouchersIfNeeded();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private decimal CalculateSubTotal()
    {
        return (decimal)Products.Sum(p => p.GrandTotal);
    }

    private void ReloadVouchersIfNeeded()
    {
        // Reload vouchers if customer is selected and subtotal changed
        if (SelectedCustomer?.Id != Guid.Empty && AvailableVouchers.Any())
        {
            _ = LoadAvailableVouchers();
        }
    }

    private decimal CalculateTotal()
    {
        var subTotal = CalculateSubTotal();
        var total = subTotal + ShippingFee - DiscountCodeAmount;
        return Math.Max(0, total);
    }

    private async Task LoadInitialData()
    {
        try
        {
            CustomersLoading = true;
            ProvincesLoading = true;

            var custReq = new MeoMeo.Contract.DTOs.GetListCustomerRequestDTO
            {
                PageIndex = 1,
                PageSize = 20
            };
            var custResp = await CustomerClientService.GetAllCustomersAsync(custReq);
            Customers = (custResp.Items ?? new List<MeoMeo.Contract.DTOs.CustomerDTO>())
            .Select(c => new Customer
            {
                Id = c.Id,
                Name = c.Name,
                Phone = c.PhoneNumber,
            })
            .ToList();

            // Load provinces via GHN
            var ghnProvinces = await GhnService.GetProvincesAsync();
            Provinces = (ghnProvinces ?? new List<MeoMeo.Shared.DTOs.GhnLocationItem>())
            .Select(p => new Province { Id = p.Id, Name = p.Name })
            .ToList();
        }
        catch
        {
            MessageService.Warning("Không thể tải dữ liệu ban đầu");
        }
        finally
        {
            CustomersLoading = false;
            ProvincesLoading = false;
            StateHasChanged();
        }
    }

    private void OnFinish()
    {
    }

    private void OnFinishFailed()
    {
    }

    private async Task LoadDistrictsAsync(int provinceId)
    {
        try
        {
            DistrictsLoading = true;
            var ghnDistricts = await GhnService.GetDistrictsAsync(provinceId);
            Districts = (ghnDistricts ?? new List<MeoMeo.Shared.DTOs.GhnLocationItem>())
            .Select(d => new District { Id = d.Id, Name = d.Name })
            .ToList();
        }
        catch
        {
            MessageService.Error("Không thể tải danh sách quận/huyện");
        }
        finally
        {
            DistrictsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadCommunesAsync(int districtId)
    {
        try
        {
            CommunesLoading = true;
            var ghnWards = await GhnService.GetWardsAsync(districtId);
            Communes = (ghnWards ?? new List<MeoMeo.Shared.DTOs.GhnLocationItem>())
            .Select(w => new Commune { Id = w.Id, Name = w.Name })
            .ToList();
        }
        catch
        {
            MessageService.Error("Không thể tải danh sách phường/xã");
        }
        finally
        {
            CommunesLoading = false;
            StateHasChanged();
        }
    }

    // Method để load đơn hàng đang xử lý
    private async Task LoadPendingOrders()
    {
        try
        {
            LoadingPendingOrders = true;
            
            var request = new GetPendingOrdersRequestDTO
            {
                PageIndex = 1,
                PageSize = 10,
                FromDate = DateTime.Today.AddDays(-7), // Lấy đơn hàng trong 7 ngày gần đây
                ToDate = DateTime.Now
            };

            var result = await OrderClientService.GetPendingOrdersAsync(request);
            if (result != null)
            {
                PendingOrders = result.Items?.Select(o => new PendingOrderItem
                {
                    Id = o.Id,
                    Code = o.Code,
                    CustomerName = o.CustomerName,
                    TotalAmount = o.TotalAmount,
                    CreationTime = o.CreationTime,
                    Status = (int)o.Status
                }).ToList() ?? new List<PendingOrderItem>();
            }
            else
            {
                PendingOrders = new List<PendingOrderItem>();
            }
        }
        catch (Exception ex)
        {
            MessageService.Error($"Không thể tải danh sách đơn hàng đang xử lý: {ex.Message}");
            PendingOrders = new List<PendingOrderItem>();
        }
        finally
        {
            LoadingPendingOrders = false;
            StateHasChanged();
        }
    }

    // Method để tiếp tục xử lý đơn hàng đã lưu tạm
    private async Task ResumeOrder(PendingOrderItem order)
    {
        try
        {
            
            var orderDetail = await OrderClientService.GetOrderByIdAsync(order.Id);
            if (orderDetail == null)
            {
                MessageService.Error("Không thể tải chi tiết đơn hàng");
                return;
            }
            Products.Clear();
            SelectedProducts.Clear();
            SearchResults.Clear();
            SearchDropdownVisible = false;
            SelectedCustomer = null;
            SelectedProvinceId = 0;
            SelectedDistrictId = 0;
            ShippingFee = 0;
            DiscountCode = string.Empty;
            DiscountCodeError = null;
            DiscountCodeAmount = 0;
            SelectedVoucher = null;
            PaymentType = 0;
            ProductSearchKeyword = string.Empty;
            CurrentOrderId = orderDetail.Id;
            CurrentOrderCode = orderDetail.Code;
            OrderType = (int)orderDetail.Type;
            OrderModel.Type = OrderType;
            PaymentType = (int)orderDetail.PaymentMethod;
            ShippingFee = orderDetail.ShippingFee ?? 0;
            OrderModel.Delivery.ConsigneeNote = orderDetail.Note ?? string.Empty;
            
            // Load QR code if payment method is transfer
            if (PaymentType == 1)
            {
                await FetchImageAsync();
            }
            if (orderDetail.CustomerId != Guid.Empty)
            {
                var customer = Customers.FirstOrDefault(c => c.Id == orderDetail.CustomerId);
                if (customer == null)
                {
                    // Tạo customer object từ order detail
                    customer = new Customer
                    {
                        Id = orderDetail.CustomerId,
                        Name = orderDetail.CustomerName,
                        Phone = orderDetail.CustomerPhoneNumber
                    };
                    Customers.Insert(0, customer);
                }
                SelectedCustomer = customer;
                OrderModel.CustomerId = customer.Id;
            }

           
            // Load danh sách sản phẩm trực tiếp từ OrderDetailDTO
            Products.Clear();
            if (orderDetail.OrderDetails?.Any() == true)
            {
                foreach (var detail in orderDetail.OrderDetails)
                {
                    Products.Add(detail);
                }
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Không thể tải đơn hàng: {ex.Message}");
        }
    }

    // Method để hủy đơn hàng đang xử lý
    private void CancelPendingOrder(PendingOrderItem order)
    {
        OrderToCancel = new OrderDTO
        {
            Id = order.Id,
            Code = order.Code,
            CustomerName = order.CustomerName,
            TotalPrice = order.TotalAmount
        };
        CancelReason = "Khách hàng yêu cầu hủy";
        CancelOrderModalVisible = true;
    }

    private void CloseCancelOrderModal()
    {
        CancelOrderModalVisible = false;
        OrderToCancel = null;
        CancelReason = "Khách hàng yêu cầu hủy";
    }

    private void ClosePaymentInfoModal()
    {
        PaymentInfoModalVisible = false;
    }

    private string GetProvinceName()
    {
        return Provinces.FirstOrDefault(p => p.Id == OrderModel.Delivery.ProvinceId)?.Name ?? "";
    }

    private string GetDistrictName()
    {
        return Districts.FirstOrDefault(d => d.Id == OrderModel.Delivery.DistrictId)?.Name ?? "";
    }

    private string GetCommuneName()
    {
        return Communes.FirstOrDefault(c => c.Id == OrderModel.Delivery.CommuneId)?.Name ?? "";
    }

    private void SelectCashPayment()
    {
        PaymentType = 0;
        PaymentInfoModalVisible = false;
        StateHasChanged();
    }

    private async Task SelectTransferPayment()
    {
        PaymentType = 1;
        await FetchImageAsync();
        PaymentInfoModalVisible = true;
        StateHasChanged();
    }

    private async Task ConfirmCancelOrder()
    {
        if (OrderToCancel == null || string.IsNullOrWhiteSpace(CancelReason))
        {
            MessageService.Warning("Vui lòng nhập lý do hủy đơn hàng");
            return;
        }

        try
        {
            var result = await OrderClientService.CancelOrderWithReasonAsync(OrderToCancel.Id, CancelReason);
            
            if (result != null && result.ResponseStatus == MeoMeo.Contract.Commons.BaseStatus.Success)
            {
                MessageService.Success($"Đã hủy đơn hàng {OrderToCancel.Code}");
                
                await LoadPendingOrders();
                
                CloseCancelOrderModal();
            }
            else
            {
                MessageService.Error(result?.Message ?? "Không thể hủy đơn hàng");
            }
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi hủy đơn hàng: {ex.Message}");
        }
    }

}

