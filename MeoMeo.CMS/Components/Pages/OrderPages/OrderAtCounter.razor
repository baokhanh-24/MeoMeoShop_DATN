@page "/order-at-counter"
@using System.ComponentModel.DataAnnotations
@using AntDesign
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Configuration
@using MeoMeo.Contract.DTOs
@using MeoMeo.Contract.DTOs.Order
@using MeoMeo.Contract.DTOs.Product
@inject IMessageService MessageService
@inject IJSRuntime JSRuntime
@inject MeoMeo.Shared.IServices.ICustomerClientService CustomerClientService
@inject MeoMeo.Shared.IServices.IProductClientService ProductClientService
@inject MeoMeo.Shared.IServices.IGhnClientService GhnService
@inject MeoMeo.Shared.IServices.IOrderClientService OrderClientService
@inject MeoMeo.Shared.IServices.IVoucherClientService VoucherClientService
@inject NavigationManager Navigation
@inject IConfiguration Configuration

<div class="content-background layout-container">

    <div class="group-breadcumb d-flex justify-content-between">
        <Breadcrumb>
            <BreadcrumbItem>Quản lý hệ thống</BreadcrumbItem>
            <BreadcrumbItem>
                <a class="current">@(DetailsItem != null ? "Cập nhật đơn hàng" : "Thêm mới đơn hàng")</a>
            </BreadcrumbItem>
        </Breadcrumb>
        <div>
            <Button Class="btn-reset w-100px" Icon="close" OnClick="HandleCancel">Hủy Làm mới</Button>
            <Button Class="btn-reset" Icon="photo_album" OnClick="() => HandleSave(true)">Lưu tạm</Button>
            <Button Class="btn-save" Icon="check" OnClick="() => HandleSave(false)"> Lưu đơn hàng</Button>

            <Button Class="btn-reset" Icon="print" OnClick="HandlePrintOrder" Disabled="@(!Products.Any())">In đơn In
                hóa
                đơn
            </Button>

            <Button Class="btn-back" Icon="arrow-left" OnClick="HandleGoBack">Quay lại</Button>
        </div>
    </div>
    <Form Model="OrderModel" Layout="@AntDesign.FormLayout.Vertical" RequiredMark="@AntDesign.FormRequiredMark.Required"
        OnFinish="OnFinish" OnFinishFailed="OnFinishFailed">
        <div class="order-section-general">
            <div class="order-section-general-header">
                <div class="txt-18-n-600 order-section-general-title">Thông tin chung</div>
            </div>
            <Row Gutter="16">
                <AntDesign.Col Lg="8">
                    <FormItem Label="Loại" Required="true">
                        <Select TItem="SelectOption" TItemValue="int" DataSource="@TypeOptions"
                            @bind-Value="@OrderModel.Type" Placeholder="Chọn loại..." ItemValue="x => x.Value"
                            ItemLabel="x => x.Label" OnSelectedItemChanged="HandleTypeChange" ShowSearch="true"
                            AllowClear="true" />
                    </FormItem>
                </AntDesign.Col>
                <AntDesign.Col Lg="8">
                    <FormItem Label="Thời gian đặt hàng" Required="true">
                        <DatePicker @bind-Value="@OrderModel.OrderTime" ShowTime="true" Format="HH:mm - dd/MM/yyyy"
                            DisabledDate="@((current) => current > DateTime.Now)" Style="width: 100%" />
                    </FormItem>
                </AntDesign.Col>
                <AntDesign.Col Lg="8">
                    <FormItem Label="Tên khách hàng" Required="@(OrderType == 2)">
                        <div style="display: flex; gap: 4px;">
                            <Select TItem="Customer" TItemValue="Guid ?" DataSource="@Customers"
                                @bind-Value="@OrderModel.CustomerId" Placeholder="Chọn khách hàng..."
                                ItemValue="x => x.Id" ItemLabel="x => x.Name" ShowSearch="true" FilterOption="false"
                                OnSelectedItemChanged="@(e => OnCustomerChanged(e))" Loading="@CustomersLoading"
                                Style="flex: 1" AllowClear="true">
                                <NotFoundContent>
                                    @if (CustomersLoading)
                                    {
                                        <Spin Size="@AntDesign.SpinSize.Default" />
                                    }
                                    else
                                    {
                                        <div style="text-align: center; padding: 8px 0;">Không có dữ liệu phù hợp</div>
                                    }
                                </NotFoundContent>
                            </Select>
                            <Icon Type="plus" OnClick="HandleAddNewCustomer" />
                        </div>
                    </FormItem>
                </AntDesign.Col>
            </Row>
        </div>
        @if (OrderType == 2)
        {
            <div class="order-section-delivery">
                <div class="order-section-delivery-header">
                    <div class="txt-18-n-600">Thông tin nhận hàng</div>
                    <Checkbox @bind-Checked="@UseDefaultAddress" Disabled="@(SelectedCustomer == null)"
                        class="order-checkbox-default-address">
                        <span class="txt-16-n-400 order-checkbox-default-address-label"
                            style="color: @(SelectedCustomer?.Id == Guid.Empty ? "#999" : "#22313F")">
                            Giao đến địa chỉ mặc định
                        </span>
                    </Checkbox>
                </div>
                <Row Gutter="16" class="order-section-delivery-row-margin">
                    <AntDesign.Col Lg="8">
                        <FormItem Label="Tên người nhận" Required="true">
                            <Input @bind-Value="@OrderModel.Delivery.ConsigneeName" Placeholder="Nhập" MaxLength="255" />
                        </FormItem>
                    </AntDesign.Col>
                    <AntDesign.Col Lg="8">
                        <FormItem Label="Số điện thoại" Required="true">
                            <Input @bind-Value="@OrderModel.Delivery.ConsigneePhone" Placeholder="Nhập" />
                        </FormItem>
                    </AntDesign.Col>
                </Row>
                <Row Gutter="16" class="order-section-delivery-row-margin">
                    <AntDesign.Col Lg="8">
                        <FormItem Label="Tỉnh/Thành phố" Required="true">
                            <Select TItem="Province" TItemValue="int?" DataSource="@Provinces"
                                @bind-Value="@OrderModel.Delivery.ProvinceId" Placeholder="Chọn tỉnh/thành phố..."
                                ItemValue="x => x.Id" ItemLabel="x => x.Name" ShowSearch="true" FilterOption="false"
                                OnSelectedItemChanged="@(e => HandleProvinceChange(e))" Loading="@ProvincesLoading"
                                AllowClear="true" />
                        </FormItem>
                    </AntDesign.Col>
                    <AntDesign.Col Lg="8">
                        <FormItem Label="Quận/Huyện" Required="true">
                            <Select TItem="District" TItemValue="int?" DataSource="@Districts"
                                @bind-Value="@OrderModel.Delivery.DistrictId" Placeholder="Chọn quận/huyện..."
                                ItemValue="x => x.Id" ItemLabel="x => x.Name" Disabled="@(SelectedProvinceId == 0)"
                                ShowSearch="true" FilterOption="false"
                                OnSelectedItemChanged="@(e => HandleDistrictChange(e))" Loading="@DistrictsLoading"
                                AllowClear="true" />
                        </FormItem>
                    </AntDesign.Col>
                    <AntDesign.Col Lg="8">
                        <FormItem Label="Phường/Xã" Required="true">
                            <Select TItem="Commune" TItemValue="int?" DataSource="@Communes"
                                @bind-Value="@OrderModel.Delivery.CommuneId" Placeholder="Chọn phường/xã..."
                                ItemValue="x => x.Id" ItemLabel="x => x.Name"
                                Disabled="@(SelectedDistrictId == 0 || SelectedProvinceId == 0)" ShowSearch="true"
                                FilterOption="false" OnSelectedItemChanged="@(e => HandleCommuneChange(e))"
                                Loading="@CommunesLoading" AllowClear="true" />
                        </FormItem>
                    </AntDesign.Col>
                </Row>
                <Row Gutter="16">
                    <AntDesign.Col Lg="16">
                        <FormItem Label="Địa chỉ chi tiết" Required="true">
                            <Input @bind-Value="@OrderModel.Delivery.ConsigneeAddress" Placeholder="Nhập" MaxLength="200" />
                        </FormItem>
                    </AntDesign.Col>
                    <AntDesign.Col Lg="8">
                        <FormItem Label="Ghi chú">
                            <Input @bind-Value="@OrderModel.Delivery.ConsigneeNote" Placeholder="Nhập" MaxLength="500" />
                        </FormItem>
                    </AntDesign.Col>
                </Row>
            </div>
        }
        <div class="order-section-product-search">
            <div class="order-section-product-search-header">
                <div class="order-section-product-search-header-left">
                    @if (SelectedProducts.Any())
                    {
                        <Tooltip Title="Xóa sản phẩm đã chọn">
                            <Icon Type="delete" OnClick="HandleRemoveSelectedProducts" class="order-icon-delete-selected" />
                        </Tooltip>
                    }
                    <span class="txt-18-n-500">Danh sách sản phẩm (@Products.Count)</span>
                    <div class="search-controls">
                        <Button Type="@AntDesign.ButtonType.Default" Icon="qr_code" OnClick="StartQRCodeScan"
                            class="qr-scan-btn" Disabled="@IsQRCodeScanning">
                            <Icon Type="qr_code" />
                            Quét QR Code (F3)
                        </Button>
                        <div class="order-section-product-search-input">
                            <Tooltip Title="Tìm kiếm sản phẩm (F1)">
                                <Search @bind-Value="@ProductSearchKeyword" Width="600"
                                    Placeholder="Nhập barcode, mã sản phẩm, tên sản phẩm để tìm kiếm"
                                    OnSearch="OnProductSearch" OnClear="OnSearchClear" Loading="@SearchingProduct"
                                    class="order-search-input" Id="product-search-input" />
                            </Tooltip>
                            @if (SearchResults.Any() && SearchDropdownVisible)
                            {
                                <div class="search-results-dropdown">
                                    @foreach (var product in SearchResults.Take(5))
                                    {
                                        <div class="search-result-item" @onclick="() => AddProductToOrder(product)">
                                            <Image Fallback="@(ApiBaseUrl + "/Images/fallback.jpeg")"
                                                Src="@(ApiBaseUrl + "/" + product.Thumbnail)" Class="search-result-image" />
                                            <div class="search-result-info">
                                                <div class="search-result-name">@product.ProductName</div>
                                                <div class="search-result-sku">SKU: @product.SKU</div>
                                                <div class="search-result-sku">Màu sắc: @product.ColourName - Size:
                                                    @product.SizeValue</div>
                                                <div class="search-result-price">
                                                    @if (product.SalePrice.HasValue && product.SalePrice < product.Price)
                                                    {
                                                        <span
                                                            style="text-decoration: line-through; color: #999; margin-right: 8px;">@product.Price.ToString("N0")
                                                            đ</span>
                                                        <span
                                                            style="color: #ff4d4f; font-weight: bold;">@product.SalePrice.Value.ToString("N0")
                                                            đ</span>
                                                        @if (product.MaxDiscount.HasValue)
                                                        {
                                                            <span
                                                                style="background: #ff4d4f; color: white; padding: 2px 4px; border-radius: 2px; font-size: 10px; margin-left: 4px;">-@product.MaxDiscount.Value.ToString("0")%</span>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        @(product.Price.ToString("N0") + "đ")
                                                    }
                                                </div>
                                            </div>
                                            <div class="search-result-stock">
                                                <Tag Color="@(product.StockQuantity > 0 ? "green" : "red")">
                                                    @(product.StockQuantity > 0 ? $"Còn {product.StockQuantity}" : "Hết hàng")
                                                </Tag>
                                            </div>
                                        </div>
                                    }
                                    @if (SearchResults.Count > 5)
                                    {
                                        <div class="search-result-more">
                                            <Button Type="@AntDesign.ButtonType.Link" OnClick="() => ShowAllSearchResults()">
                                                Xem thêm @(SearchResults.Count - 5) sản phẩm...
                                            </Button>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="order-section-product-search-right"></div>
        </div>
        <div class="order-section-product-table-summary">
            <div class="product-list order-section-product-table">
                <Table DataSource="@Products" @bind-SelectedRows="selectedRows" RowKey="x => x.ProductDetailId"
                    Loading="@ProductsLoading" Size="@AntDesign.TableSize.Small">
                    <ChildContent Context="product">
                        <Selection Type="@AntDesign.SelectionType.Checkbox" />
                        <Column TData="string" Title="SKU" Width="136">
                            <div>@product.Sku</div>
                        </Column>
                        <Column TData="string" Title="Ảnh sản phẩm" Width="116">
                            <img src="@product.ImageUrl" style="width: 40px; height: 40px; object-fit: cover;" />
                        </Column>
                        <Column TData="string" Title="Tên sản phẩm">
                            <div>@product.Name</div>
                        </Column>
                        <Column TData="string" Title="Size" Width="116" Align="@AntDesign.ColumnAlign.Right">
                            <div>@product.SizeName</div>
                        </Column>
                        <Column TData="string" Title="Màu sắc" Width="116" Align="@AntDesign.ColumnAlign.Right">
                            <div>@product.ColourName</div>
                        </Column>
                        <Column TData="decimal" Title="Đơn giá (đ)" Width="116" Align="@AntDesign.ColumnAlign.Right">
                            @if (product.SalePrice.HasValue && product.SalePrice < product.OriginalPrice)
                            {
                                <div>
                                    <span
                                        style="text-decoration: line-through; color: #999; display: block; font-size: 11px;">@product.OriginalPrice.ToString("N0")
                                        đ</span>
                                    <span style="color: #ff4d4f; font-weight: bold;">@product.SalePrice.Value.ToString("N0")
                                        đ</span>
                                </div>
                            }
                            else
                            {
                                @(product.Price.ToString("N0") + "đ")
                            }
                        </Column>
                        <Column TData="int" Title="Số lượng" Width="116" Align="@AntDesign.ColumnAlign.Center">
                            <AntDesign.InputNumber TValue="int" @bind-Value="product.Quantity" Min="1"
                                OnChange="@(value => UpdateProductQuantity(product, value))" />
                        </Column>
                        <Column TData="decimal" Title="Thành tiền (đ)" Width="116" Align="@AntDesign.ColumnAlign.Right">
                            @((product.Price * product.Quantity).ToString("N0")) đ
                        </Column>
                        <ActionColumn Title="Thao tác" Width="80" Align="@AntDesign.ColumnAlign.Right">
                            <Icon Type="delete" OnClick="() => RemoveProduct(product)"
                                Style="cursor: pointer; color: #ff4d4f;" />
                        </ActionColumn>
                    </ChildContent>
                </Table>
            </div>
            <div class="summary order-section-summary-panel">
                <div class="order-summary-row order-summary-row-total">
                    <div class="txt-14-n-400">Tổng tiền</div>
                    <div class="txt-14-n-500">@CalculateSubTotal().ToString("N0") đ</div>
                </div>
                <Divider class="order-summary-divider" />
                <div class="order-summary-row order-summary-row-shipping">
                    <div class="txt-14-n-400">Phí vận chuyển</div>
                    @if (OrderType == 2)
                    {
                        <AntDesign.InputNumber TValue="decimal" @bind-Value="@ShippingFee" Placeholder="Nhập..."
                            class="order-input-shipping-fee" />
                    }
                    else
                    {
                        <div class="txt-14-n-500">@ShippingFee.ToString("N0") đ</div>
                    }
                </div>
                <Divider class="order-summary-divider" />
                <div class="txt-14-n-500 order-summary-discount-label">Mã giảm giá/Voucher</div>
                <div class="order-summary-discount-row">
                    <Input @bind-Value="@DiscountCode" Placeholder="Nhập mã giảm giá hoặc voucher" MaxLength="20"
                        AllowClear="true" class="order-input-discount-code" />
                    <Button Disabled="@(string.IsNullOrEmpty(DiscountCode) || CheckingDiscount)"
                        Loading="@CheckingDiscount" OnClick="CheckDiscountCode">
                        Áp dụng
                    </Button>
                </div>
                @if (!string.IsNullOrEmpty(DiscountCodeError))
                {
                    <div class="txt-12-i-400 order-summary-discount-error">
                        @DiscountCodeError
                    </div>
                }
                @if (DiscountCodeAmount > 0)
                {
                    <div class="order-summary-row order-summary-row-discount">
                        <div class="txt-14-n-400">Giảm giá:</div>
                        <div class="txt-14-n-500 order-summary-discount-amount">-@DiscountCodeAmount.ToString("N0") đ
                        </div>
                        <Icon Type="close" @onclick="RemoveDiscountCode" class="remove-discount-icon" />
                    </div>
                    <Divider class="order-summary-divider" />
                }
                @if (SelectedVoucher != null)
                {
                    <div class="order-summary-row order-summary-row-voucher">
                        <div class="txt-14-n-400">Voucher:</div>
                        <div class="txt-14-n-500 order-summary-voucher-name">@SelectedVoucher.Name</div>
                        <Icon Type="close" @onclick="RemoveVoucher" class="remove-voucher-icon" />
                    </div>
                    <Divider class="order-summary-divider" />
                }

                <div class="order-summary-row order-summary-row-final">
                    <div class="order-summary-final-label">Thành tiền</div>
                    <div class="order-summary-final-amount">@CalculateTotal().ToString("N0") đ</div>
                </div>
                <Divider class="order-summary-divider" />
                <div class="order-summary-payment-method">
                    <div class="order-summary-payment-label">Hình thức thanh toán</div>
                    <RadioGroup @bind-Value="@PaymentType" ButtonStyle="@AntDesign.RadioButtonStyle.Solid">
                        <Radio RadioButton Value="0" class="order-radio-payment">Tiền mặt</Radio>
                        <Radio RadioButton Value="1" class="order-radio-payment">Chuyển khoản</Radio>
                    </RadioGroup>
                </div>
            </div>
        </div>
    </Form>
    <Modal Title="Thêm khách hàng mới" Visible="@AddCustomerModalVisible" OnCancel="HandleCloseAddCustomerModal"
        Footer="null">
        <div style="padding: 8px 0;">
            <Form TModel="MeoMeo.Contract.DTOs.CreateQuickCustomerDTO" Model="newCustomerModel"
                Layout="@AntDesign.FormLayout.Vertical">
                <FormItem Label="Họ và tên" Required="true">
                    <Input @bind-Value="newCustomerModel.Name" Placeholder="Nhập họ và tên" MaxLength="255" />
                </FormItem>
                <FormItem Label="Số điện thoại" Required="true">
                    <Input @bind-Value="newCustomerModel.PhoneNumber" Placeholder="Nhập số điện thoại" MaxLength="20" />
                </FormItem>
                <FormItem Label="Địa chỉ">
                    <Input @bind-Value="newCustomerModel.Address" Placeholder="Nhập địa chỉ (tùy chọn)"
                        MaxLength="200" />
                </FormItem>
                <div class="d-flex" style="justify-content: flex-end; gap: 8px;">
                    <Button OnClick="HandleCloseAddCustomerModal">Hủy</Button>
                    <Button Type="AntDesign.ButtonType.Primary" Loading="@creatingCustomer"
                        OnClick="CreateQuickCustomerAsync">Tạo nhanh
                    </Button>
                </div>
            </Form>
        </div>
    </Modal>
</div>

@code {

    public class OrderFormModel
    {
        [Required] public int Type { get; set; } = 0;
        [Required] public DateTime OrderTime { get; set; } = DateTime.Now;
        public Guid? CustomerId { get; set; }
        public DeliveryInfo Delivery { get; set; } = new();
    }

    IEnumerable<OrderProductItem> selectedRows = Enumerable.Empty<OrderProductItem>();

    public class DeliveryInfo
    {
        public string ConsigneeName { get; set; } = string.Empty;
        public string ConsigneePhone { get; set; } = string.Empty;
        public int? ProvinceId { get; set; }
        public int? DistrictId { get; set; }
        public int? CommuneId { get; set; }
        public string ConsigneeAddress { get; set; } = string.Empty;
        public string ConsigneeNote { get; set; } = string.Empty;
    }

    public class SelectOption
    {
        public string Label { get; set; }
        public int Value { get; set; }
    }

    public class Customer
    {
        public Guid Id { get; set; }
        public string Name { get; set; }
        public string Phone { get; set; }
    }

    public class Province
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public class District
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public class Commune
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    // Sử dụng DTO có sẵn thay vì tự định nghĩa model
    public class OrderProductItem
    {
        public Guid ProductDetailId { get; set; }
        public string Sku { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string ImageUrl { get; set; } = string.Empty;
        public string SizeName { get; set; } = string.Empty;
        public string ColourName { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public decimal OriginalPrice { get; set; }
        public decimal? SalePrice { get; set; }
        public decimal? MaxDiscount { get; set; }
        public int Quantity { get; set; } = 1;
        public int StockQuantity { get; set; } = 0;
        public int Weight { get; set; } = 500;
        public int Length { get; set; } = 15;
        public int Width { get; set; } = 15;
        public int Height { get; set; } = 15;
    }

    // Sử dụng DTO có sẵn thay vì tự định nghĩa
    public class OrderVoucher
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Code { get; set; } = string.Empty;
        public decimal DiscountAmount { get; set; }
        public decimal DiscountPercent { get; set; }
        public decimal MinOrderAmount { get; set; }
        public DateTime ExpiryDate { get; set; }
    }

    private OrderFormModel OrderModel = new();
    private object? DetailsItem = null;
    private int OrderType = 0;
    private bool UseDefaultAddress = false;
    private Customer? SelectedCustomer = null;
    private int SelectedProvinceId = 0;
    private int SelectedDistrictId = 0;

    private List<SelectOption> TypeOptions = new()
{
new() { Label = "Giao trực tiếp", Value = 0 },
new() { Label = "Giao hàng", Value = 2 }
};

    private List<Customer> Customers = new();
    private List<Province> Provinces = new();
    private List<District> Districts = new();
    private List<Commune> Communes = new();
    private List<OrderProductItem> Products = new();
    private List<OrderProductItem> SelectedProducts = new();
    private List<ProductSearchResponseDTO> SearchResults = new();
    private bool CustomersLoading = false;
    private bool ProvincesLoading = false;
    private bool DistrictsLoading = false;
    private bool CommunesLoading = false;
    private bool ProductsLoading = false;
    private bool SearchingProduct = false;
    private bool CheckingDiscount = false;
    private string ProductSearchKeyword = string.Empty;
    private bool SearchDropdownVisible = false;
    private bool AddCustomerModalVisible = false;
    private CreateQuickCustomerDTO newCustomerModel = new();
    private bool creatingCustomer = false;
    private decimal ShippingFee = 0;
    private string DiscountCode = string.Empty;
    private string? DiscountCodeError = null;
    private decimal DiscountCodeAmount = 0;
    private OrderVoucher? SelectedVoucher = null;
    private int PaymentType = 0;
    private string ApiBaseUrl = string.Empty;
    private bool IsBarcodeScanning = false;
    private bool IsQRCodeScanning = false;

    private ProductSearchRequestDTO requestSearchProduct = new ProductSearchRequestDTO
    {
        PageIndex = 1,
        PageSize = 20,
        InStockOnly = true
    };


    protected override async Task OnInitializedAsync()
    {
        ApiBaseUrl = Configuration["ApiSettings:BaseUrl"]?.TrimEnd('/') ?? string.Empty;
        await LoadInitialData();
        //
        // // Set focus to search input
        // await Task.Delay(100);
        // await JSRuntime.InvokeVoidAsync("setFocus", "product-search-input");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Add keyboard shortcuts
            await JSRuntime.InvokeVoidAsync("addKeyboardShortcuts");
        }
    }

    private async Task HandleCancel()
    {
        Products.Clear();
        SelectedProducts.Clear();
        SearchResults.Clear();
        SearchDropdownVisible = false;
        OrderModel = new();
        SelectedCustomer = null;
        SelectedProvinceId = 0;
        SelectedDistrictId = 0;
        ShippingFee = 0;
        DiscountCode = string.Empty;
        DiscountCodeError = null;
        DiscountCodeAmount = 0;
        SelectedVoucher = null;
        PaymentType = 0;
        ProductSearchKeyword = string.Empty;
        StateHasChanged();
        MessageService.Success("Đã đã làm mới thành công");

    }

    private async Task HandleSave(bool isDraft)
    {
        if (!Products.Any())
        {
            MessageService.Warning("Vui lòng chọn sản phẩm");
            return;
        }

        if (OrderType == 2)
        {
            if (string.IsNullOrWhiteSpace(OrderModel.Delivery.ConsigneeName) ||
            string.IsNullOrWhiteSpace(OrderModel.Delivery.ConsigneePhone) ||
            !OrderModel.Delivery.ProvinceId.HasValue ||
            !OrderModel.Delivery.DistrictId.HasValue ||
            !OrderModel.Delivery.CommuneId.HasValue ||
            string.IsNullOrWhiteSpace(OrderModel.Delivery.ConsigneeAddress))
            {
                MessageService.Warning("Vui lòng nhập đủ thông tin giao hàng");
                return;
            }
        }

        try
        {
            var dto = new CreatePosOrderDTO
            {
                Type = OrderType == 2 ? MeoMeo.Domain.Commons.Enums.EOrderType.Online : MeoMeo.Domain.Commons.Enums.EOrderType.Store,
                OrderTime = OrderModel.OrderTime,
                PaymentMethod = PaymentType == 0 ? MeoMeo.Domain.Commons.Enums.EOrderPaymentMethod.Cash :
            MeoMeo.Domain.Commons.Enums.EOrderPaymentMethod.Transfer,
                Note = OrderModel.Delivery.ConsigneeNote,
                ShippingFee = ShippingFee,
                DiscountCode = string.IsNullOrWhiteSpace(DiscountCode) ? null : DiscountCode,
                CustomerId = SelectedCustomer.Id,
                Delivery = OrderType == 2
            ? new MeoMeo.Contract.DTOs.Order.CreatePosDeliveryDTO
            {
                ConsigneeName = OrderModel.Delivery.ConsigneeName,
                ConsigneePhone = OrderModel.Delivery.ConsigneePhone,
                ProvinceId = OrderModel.Delivery.ProvinceId ?? 0,
                DistrictId = OrderModel.Delivery.DistrictId ?? 0,
                CommuneId = OrderModel.Delivery.CommuneId ?? 0,
                ConsigneeAddress = OrderModel.Delivery.ConsigneeAddress,
                ConsigneeNote = OrderModel.Delivery.ConsigneeNote
            }
            : null,
                Items = Products.Select(p => new MeoMeo.Contract.DTOs.Order.CreatePosOrderItemDTO
                {
                    ProductDetailId = p.ProductDetailId,
                    Quantity = p.Quantity,
                    UnitPrice = p.Price
                }).ToList()
            };

            var resp = await OrderClientService.CreatePosOrderAsync(dto);
            if (resp != null && resp.ResponseStatus == MeoMeo.Contract.Commons.BaseStatus.Success)
            {
                MessageService.Success($"Tạo đơn thành công: {resp.Code}");
                Navigation.NavigateTo($"/orders");
            }
            else
            {
                MessageService.Error(resp?.Message ?? "Tạo đơn thất bại");
            }
        }
        catch
        {
            MessageService.Error("Không thể lưu đơn hàng");
        }
    }

    private async Task HandlePrintOrder()
    {
        if (!Products.Any())
        {
            MessageService.Warning("Vui lòng chọn sản phẩm trước khi in");
            return;
        }

        try
        {
            // Tạo dữ liệu hóa đơn để in
            var receiptData = new
            {
                OrderCode = $"POS-{DateTime.Now:yyyyMMdd-HHmmss}",
                OrderTime = OrderModel.OrderTime,
                CustomerName = SelectedCustomer?.Name ?? "Khách lẻ",
                CustomerPhone = SelectedCustomer?.Phone ?? "",
                Items = Products.Select(p => new
                {
                    Name = p.Name,
                    SKU = p.Sku,
                    Quantity = p.Quantity,
                    Price = p.Price,
                    Total = p.Price * p.Quantity
                }),
                SubTotal = CalculateSubTotal(),
                ShippingFee = ShippingFee,
                DiscountAmount = DiscountCodeAmount,
                Total = CalculateTotal(),
                PaymentMethod = PaymentType == 0 ? "Tiền mặt" : "Chuyển khoản"
            };

            // Gọi JavaScript để in hóa đơn
            await JSRuntime.InvokeVoidAsync("printReceipt", receiptData);
            MessageService.Success("Đã gửi lệnh in hóa đơn");
        }
        catch (Exception ex)
        {
            MessageService.Error("Không thể in hóa đơn: " + ex.Message);
        }
    }

    private async Task HandleGoBack()
    {
        Navigation.NavigateTo("/orders");
    }

    private async Task HandleTypeChange(SelectOption selectedOption)
    {
        OrderType = selectedOption.Value;
        StateHasChanged();
    }

    private void OnCustomerSearch(string searchText)
    {
        CustomersLoading = true;
        CustomersLoading = false;
        StateHasChanged();
    }

    private void OnCustomerChanged(Customer customer)
    {
        SelectedCustomer = customer;
        if (customer.Id == Guid.Empty)
        {
            UseDefaultAddress = false;
        }

        StateHasChanged();
    }

    private async Task HandleAddNewCustomer()
    {
        AddCustomerModalVisible = true;
        newCustomerModel = new CreateQuickCustomerDTO();
    }

    private async Task HandleCloseAddCustomerModal()
    {
        AddCustomerModalVisible = false;
    }

    private async Task CreateQuickCustomerAsync()
    {
        if (string.IsNullOrWhiteSpace(newCustomerModel.Name) || string.IsNullOrWhiteSpace(newCustomerModel.PhoneNumber))
        {
            MessageService.Warning("Vui lòng nhập đầy đủ họ tên và số điện thoại");
            return;
        }

        try
        {
            creatingCustomer = true;
            var resp = await CustomerClientService.CreateQuickCustomerAsync(newCustomerModel);
            if (resp != null && resp.ResponseStatus == MeoMeo.Contract.Commons.BaseStatus.Success)
            {
                MessageService.Success(resp.Message ?? "Tạo khách hàng nhanh thành công");

                // Tạo customer object từ response và select nó
                var newCustomer = new Customer
                {
                    Id = resp.CustomerId ?? Guid.Empty,
                    Name = resp.CustomerName ?? newCustomerModel.Name,
                    Phone = resp.PhoneNumber ?? newCustomerModel.PhoneNumber
                };

                // Thêm vào danh sách customers và select
                Customers.Insert(0, newCustomer);
                SelectedCustomer = newCustomer;
                OrderModel.CustomerId = newCustomer.Id;

                AddCustomerModalVisible = false;
            }
            else
            {
                MessageService.Error(resp?.Message ?? "Tạo khách hàng thất bại");
            }
        }
        catch
        {
            MessageService.Error("Không thể tạo khách hàng");
        }
        finally
        {
            creatingCustomer = false;
            StateHasChanged();
        }
    }

    private void OnProvinceSearch(string searchText)
    {
    }

    private void HandleProvinceChange(Province province)
    {
        SelectedProvinceId = province?.Id ?? 0;
        Districts.Clear();
        Communes.Clear();
        OrderModel.Delivery.DistrictId = null;
        OrderModel.Delivery.CommuneId = null;
        StateHasChanged();
        _ = LoadDistrictsAsync(SelectedProvinceId);
    }

    private void OnDistrictSearch(string searchText)
    {
    }

    private void HandleDistrictChange(District district)
    {
        SelectedDistrictId = district?.Id ?? 0;
        Communes.Clear();
        OrderModel.Delivery.CommuneId = null;
        StateHasChanged();
        _ = LoadCommunesAsync(SelectedDistrictId);
    }

    private void OnCommuneSearch(string searchText)
    {
    }

    private void HandleCommuneChange(Commune commune)
    {
        OrderModel.Delivery.CommuneId = commune?.Id;
        StateHasChanged();
    }

    private async Task OnSearchClick()
    {
        SearchDropdownVisible = true;
    }


    private async Task OnProductSearch(string searchText)
    {
        try
        {
            SearchingProduct = true;
            ProductSearchKeyword = searchText?.Trim() ?? string.Empty;

            if (string.IsNullOrEmpty(ProductSearchKeyword))
            {
                SearchResults.Clear();
                SearchDropdownVisible = false;
                return;
            }

            // Cập nhật request với keyword mới
            requestSearchProduct.SearchKeyword = ProductSearchKeyword;
            requestSearchProduct.PageIndex = 1; // Reset về trang đầu khi search mới

            var result = await ProductClientService.SearchProductsAsync(requestSearchProduct);
            var items = result.Items ?? new List<ProductSearchResponseDTO>();

            SearchResults = items.ToList();

            SearchDropdownVisible = SearchResults.Any();
        }
        catch
        {
            MessageService.Error("Không thể tìm sản phẩm");
            SearchResults.Clear();
            SearchDropdownVisible = false;
        }
        finally
        {
            SearchingProduct = false;
            StateHasChanged();
        }
    }

    private async Task OnSearchClear()
    {
        ProductSearchKeyword = string.Empty;
        SearchResults.Clear();
        SearchDropdownVisible = false;
        StateHasChanged();
    }

    private void AddProductToOrder(ProductSearchResponseDTO product)
    {
        if (product.StockQuantity <= 0)
        {
            MessageService.Warning("Sản phẩm đã hết hàng");
            return;
        }

        var existingProduct = Products.FirstOrDefault(p => p.ProductDetailId == product.ProductDetailId);
        if (existingProduct != null)
        {
            if (existingProduct.Quantity >= product.StockQuantity)
            {
                MessageService.Warning($"Số lượng tồn kho chỉ còn {product.StockQuantity}");
                return;
            }

            existingProduct.Quantity++;
        }
        else
        {
            Products.Add(new OrderProductItem
            {
                ProductDetailId = product.ProductDetailId,
                Sku = product.SKU,
                Name = product.ProductName,
                ImageUrl = string.IsNullOrWhiteSpace(product.Thumbnail) ? string.Empty : ($"{ApiBaseUrl}{product.Thumbnail}"),
                SizeName = product.SizeValue,
                ColourName = product.ColourName,
                Price = product.SalePrice ?? product.Price,
                OriginalPrice = product.Price,
                SalePrice = product.SalePrice,
                MaxDiscount = product.MaxDiscount,
                Quantity = 1,
                StockQuantity = product.StockQuantity,
                Weight = product.Weight,
                Length = 15,
                Width = 15,
                Height = 15
            });
        }

        SearchDropdownVisible = false;
        StateHasChanged();
    }

    private async ValueTask ShowAllSearchResults()
    {
        try
        {
            SearchingProduct = true;
            requestSearchProduct.PageSize = 50;
            var result = await ProductClientService.SearchProductsAsync(requestSearchProduct);
            var items = result.Items ?? new List<ProductSearchResponseDTO>();
            SearchResults = items.ToList();
            SearchDropdownVisible = SearchResults.Any();
        }
        catch
        {
            MessageService.Error("Không thể tải thêm sản phẩm");
        }
        finally
        {
            SearchingProduct = false;
            StateHasChanged();
        }
    }

    private async Task StartBarcodeScan()
    {
        try
        {
            IsBarcodeScanning = true;
            MessageService.Info("Đang khởi động camera quét barcode...");

            // Gọi JavaScript để khởi động camera
            var barcode = await JSRuntime.InvokeAsync<string>("startBarcodeScan");
            if (!string.IsNullOrEmpty(barcode))
            {
                // Tìm sản phẩm theo barcode bằng SearchProductsAsync
                var barcodeRequest = new ProductSearchRequestDTO
                {
                    PageIndex = 1,
                    PageSize = 1,
                    SearchKeyword = barcode,
                    InStockOnly = true
                };

                var result = await ProductClientService.SearchProductsAsync(barcodeRequest);
                var product = result.Items?.FirstOrDefault();

                if (product != null)
                {
                    AddProductToOrder(product);
                }
                else
                {
                    MessageService.Warning($"Không tìm thấy sản phẩm với barcode: {barcode}");
                }
            }
        }
        catch (Exception ex)
        {
            MessageService.Error("Không thể khởi động camera: " + ex.Message);
        }
        finally
        {
            IsBarcodeScanning = false;
            StateHasChanged();
        }
    }

    private async Task StartQRCodeScan()
    {
        try
        {
            IsQRCodeScanning = true;
            MessageService.Info("Đang khởi động camera quét QR code...");

            // Gọi JavaScript để khởi động camera quét QR
            var qrData = await JSRuntime.InvokeAsync<string>("startQRCodeScan");
            if (!string.IsNullOrEmpty(qrData))
            {
                await ProcessQRCodeData(qrData);
            }
        }
        catch (Exception ex)
        {
            MessageService.Error("Không thể khởi động camera quét QR: " + ex.Message);
        }
        finally
        {
            IsQRCodeScanning = false;
            StateHasChanged();
        }
    }

    private async Task ProcessQRCodeData(string qrData)
    {
        try
        {
            // Kiểm tra format QR code: PRODUCT:SKU:PRICE:SIZE:COLOR
            if (qrData.StartsWith("PRODUCT:"))
            {
                var parts = qrData.Split(':');
                if (parts.Length >= 2)
                {
                    var sku = parts[1];

                    // Tìm sản phẩm theo SKU
                    var product = await ProductClientService.GetProductBySkuAsync(sku);

                    if (product != null)
                    {
                        AddProductToOrder(product);
                        MessageService.Success($"Đã thêm sản phẩm {product.ProductName} vào đơn hàng");
                    }
                    else
                    {
                        MessageService.Warning($"Không tìm thấy sản phẩm với SKU: {sku}");
                    }
                }
                else
                {
                    MessageService.Warning("QR code không đúng định dạng");
                }
            }
            else
            {
                // Nếu không phải QR code sản phẩm, thử tìm kiếm như barcode thông thường
                var barcodeRequest = new ProductSearchRequestDTO
                {
                    PageIndex = 1,
                    PageSize = 1,
                    SearchKeyword = qrData,
                    InStockOnly = true
                };

                var result = await ProductClientService.SearchProductsAsync(barcodeRequest);
                var product = result.Items?.FirstOrDefault();

                if (product != null)
                {
                    AddProductToOrder(product);
                    MessageService.Success($"Đã thêm sản phẩm {product.ProductName} vào đơn hàng");
                }
                else
                {
                    MessageService.Warning($"Không tìm thấy sản phẩm với dữ liệu: {qrData}");
                }
            }
        }
        catch (Exception ex)
        {
            MessageService.Error($"Có lỗi xảy ra khi xử lý QR code: {ex.Message}");
        }
    }

    private async Task CheckDiscountCode()
    {
        if (string.IsNullOrEmpty(DiscountCode))
            return;

        try
        {
            CheckingDiscount = true;
            DiscountCodeError = null;

            // Kiểm tra mã giảm giá
            var request = new CheckVoucherRequestDTO
            {
                Code = DiscountCode,
                OrderAmount = CalculateSubTotal()
            };

            var result = await VoucherClientService.CheckVoucherAsync(request);
            if (result != null && result.ResponseStatus == MeoMeo.Contract.Commons.BaseStatus.Success)
            {
                DiscountCodeAmount = result.DiscountAmount;
                SelectedVoucher = new OrderVoucher
                {
                    Id = result.Id,
                    Name = result.Name,
                    Code = result.Code,
                    DiscountAmount = result.DiscountAmount,
                    DiscountPercent = result.DiscountPercent,
                    MinOrderAmount = result.MinOrderAmount,
                    ExpiryDate = result.ExpiryDate
                };
                MessageService.Success($"Áp dụng mã giảm giá thành công: -{DiscountCodeAmount.ToString("N0")} đ");
            }
            else
            {
                DiscountCodeError = result?.Message ?? "Mã giảm giá không hợp lệ";
                DiscountCodeAmount = 0;
                SelectedVoucher = null;
            }
        }
        catch (Exception ex)
        {
            DiscountCodeError = "Lỗi khi kiểm tra mã giảm giá";
            DiscountCodeAmount = 0;
            SelectedVoucher = null;
        }
        finally
        {
            CheckingDiscount = false;
            StateHasChanged();
        }
    }

    private void RemoveDiscountCode()
    {
        DiscountCode = string.Empty;
        DiscountCodeAmount = 0;
        DiscountCodeError = null;
        StateHasChanged();
    }

    private void RemoveVoucher()
    {
        SelectedVoucher = null;
        DiscountCodeAmount = 0;
        StateHasChanged();
    }

    private async Task HandleRemoveSelectedProducts()
    {
        if (SelectedProducts.Any())
        {
            var count = SelectedProducts.Count;
            foreach (var product in SelectedProducts)
            {
                Products.Remove(product);
            }

            SelectedProducts.Clear();
            StateHasChanged();
            MessageService.Success($"Đã xóa {count} sản phẩm");
        }
        else
        {
            MessageService.Warning("Chưa có sản phẩm nào được chọn");
        }
    }

    private void UpdateProductQuantity(OrderProductItem product, int quantity)
    {
        if (quantity <= 0)
        {
            MessageService.Warning("Số lượng phải lớn hơn 0");
            return;
        }

        if (quantity > product.StockQuantity)
        {
            MessageService.Warning($"Số lượng tồn kho chỉ còn {product.StockQuantity}");
            product.Quantity = product.StockQuantity;
        }
        else
        {
            product.Quantity = quantity;
        }

        StateHasChanged();
    }

    private void RemoveProduct(OrderProductItem product)
    {
        Products.Remove(product);
        SelectedProducts.Remove(product);
        StateHasChanged();
    }

    private decimal CalculateSubTotal()
    {
        return Products.Sum(p => p.Price * p.Quantity);
    }

    private decimal CalculateTotal()
    {
        var subTotal = CalculateSubTotal();
        var total = subTotal + ShippingFee - DiscountCodeAmount;
        return Math.Max(0, total);
    }

    private async Task LoadInitialData()
    {
        try
        {
            CustomersLoading = true;
            ProvincesLoading = true;

            var custReq = new MeoMeo.Contract.DTOs.GetListCustomerRequestDTO
            {
                PageIndex = 1,
                PageSize = 20
            };
            var custResp = await CustomerClientService.GetAllCustomersAsync(custReq);
            Customers = (custResp.Items ?? new List<MeoMeo.Contract.DTOs.CustomerDTO>())
            .Select(c => new Customer
            {
                Id = c.Id,
                Name = c.Name,
                Phone = c.PhoneNumber,
            })
            .ToList();

            // Load provinces via GHN
            var ghnProvinces = await GhnService.GetProvincesAsync();
            Provinces = (ghnProvinces ?? new List<MeoMeo.Shared.DTOs.GhnLocationItem>())
            .Select(p => new Province { Id = p.Id, Name = p.Name })
            .ToList();
        }
        catch
        {
            MessageService.Warning("Không thể tải dữ liệu ban đầu");
        }
        finally
        {
            CustomersLoading = false;
            ProvincesLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnFinish()
    {
    }

    private async Task OnFinishFailed()
    {
    }

    private async Task LoadDistrictsAsync(int provinceId)
    {
        try
        {
            DistrictsLoading = true;
            var ghnDistricts = await GhnService.GetDistrictsAsync(provinceId);
            Districts = (ghnDistricts ?? new List<MeoMeo.Shared.DTOs.GhnLocationItem>())
            .Select(d => new District { Id = d.Id, Name = d.Name })
            .ToList();
        }
        catch
        {
            MessageService.Error("Không thể tải danh sách quận/huyện");
        }
        finally
        {
            DistrictsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadCommunesAsync(int districtId)
    {
        try
        {
            CommunesLoading = true;
            var ghnWards = await GhnService.GetWardsAsync(districtId);
            Communes = (ghnWards ?? new List<MeoMeo.Shared.DTOs.GhnLocationItem>())
            .Select(w => new Commune { Id = w.Id, Name = w.Name })
            .ToList();
        }
        catch
        {
            MessageService.Error("Không thể tải danh sách phường/xã");
        }
        finally
        {
            CommunesLoading = false;
            StateHasChanged();
        }
    }

}

}