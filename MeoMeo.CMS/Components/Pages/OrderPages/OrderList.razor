@page "/manage-order"
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Reflection
@using AntDesign.TableModels
@using MeoMeo.Contract.DTOs.Order
@using MeoMeo.Contract.DTOs.OrderDetail
@using MeoMeo.Domain.Commons.Enums
@using MeoMeo.CMS.IServices
@using MeoMeo.Contract.Commons
@using MeoMeo.CMS.Components.Common
@using MeoMeo.Shared.Utilities
@inject IOrderClientService OrderClientService
@inject MeoMeo.Shared.Utilities.MessageModalService MessageModalService

<div class="d-flex justify-content-between">
    <Breadcrumb>
        <BreadcrumbItem Href="/">Trang chủ</BreadcrumbItem>
        <BreadcrumbItem Href="/manage-order">Quản lý đơn hàng</BreadcrumbItem>
    </Breadcrumb>
    <div>
        @if (selectedRows != null && selectedRows.Any())
        {
            if ( filter.OrderStatusFilter == EOrderStatus.Pending)
            {
                <Button Class="mb-2" OnClick="()=>ShowPopUpConfirm(EOrderStatus.Confirmed)">
                    <i class="fa-solid fa-circle-check"></i>  Xác nhận
                </Button>
            }
            else if (filter.OrderStatusFilter == EOrderStatus.Confirmed)
            {
                <Button Class="mb-2" OnClick="()=>ShowPopUpConfirm(EOrderStatus.InTransit)">
                    <i class="fa-solid fa-truck"></i>  Giao hàng
                </Button>     
                <Button Class="mb-2" OnClick="()=>ShowPopUpConfirm(EOrderStatus.Canceled)">
                    <i class="fa-solid fa-xmark"></i>  Hủy đơn
                </Button>
            }     
            else if (filter.OrderStatusFilter == EOrderStatus.InTransit)
            {
                <Button Class="mb-2" OnClick="()=>ShowPopUpConfirm(EOrderStatus.Completed)">
                    <i class="fa-solid fa-check-double"></i>  Hoàn thành
                </Button>     
                <Button Class="mb-2" OnClick="()=>ShowPopUpConfirm(EOrderStatus.Canceled)">
                    <i class="fa-solid fa-xmark"></i>  Hủy đơn
                </Button>
            }
        }
        <Button OnClick="()=>ExpandCollapseOrder()" Type="ButtonType.Primary" Class="mb-2">
            <i class="fa-solid @(isExpaned ? "fa-minimize" : "fa-up-right-and-down-left-from-center")"></i>
            @(isExpaned ? " Thu gọn" : " Mở rộng")
        </Button>
    </div>
</div>
<Modal Mask="true" Style="width: 40vw" Title="Xác nhận cập nhật trạng thái đơn hàng"
       Visible="@_visible"
       OnOk="@ConfirmOrder"
       OnCancel="@cancelShowModel"
       ConfirmLoading="@_confirmLoading">
    <p>@_modalText</p>
    @if (targetStatusOrder == EOrderStatus.Canceled)
    {   <div class="mb-2">Lý do: <spann class="text-danger"> *</spann> </div>
        <TextArea @bind-Value="reason"></TextArea>
    }
</Modal>

<Tabs DefaultActiveKey="All" @bind-ActiveKey="@activeTab" OnChange="OnTabChange">
    <TabPane Key="All" Tab=@($"Tất cả ({metaData.TotalAll})")/>
    <TabPane Key="Pending" Tab=@($"Chờ xác nhận ({metaData.Pending})")/>
    <TabPane Key="Confirmed" Tab=@($"Đã xác nhận ({metaData.Confirmed})")/>
    <TabPane Key="Confirmed" Tab=@($"Đã xác nhận ({metaData.Confirmed})")/>
    <TabPane Key="InTransit" Tab=@($"Đang giao ({metaData.InTransit})")/>
    <TabPane Key="Canceled" Tab=@($"Đã huỷ ({metaData.Canceled})")/>
    <TabPane Key="Completed" Tab=@($"Hoàn thành ({metaData.Completed})")/>
</Tabs>
<div class="d-flex justify-content-end gap-3 mb-2">
    
    <div style="width: 140px">
        <Input AllowClear="true"  OnClear="LoadOrdersAsync"  @bind-Value="filter.CodeFilter" Placeholder="Nhập mã DH" />
    </div>
    
    <div style="width: 150px">
        <Input AllowClear="true" OnClear="LoadOrdersAsync"  @bind-Value="filter.CustomerNameFilter" Placeholder="Nhập tên KH" />
    </div>

    <div style="width: 150px">
        <Input AllowClear="true"   OnClear="LoadOrdersAsync"  @bind-Value="filter.CustomerPhoneNumberFilter" Placeholder="Nhập SĐT" />
    </div> 
    <div style="width: 150px">
        <Input AllowClear="true"   OnClear="LoadOrdersAsync"  @bind-Value="filter.CustomerEmailFilter" Placeholder="Nhập email" />
    </div>
    <div style="width: 200px">
        <RangePicker Placeholder="@(new string[] { "Từ ngày", "Đến ngày" })"   AllowClear OnClear="LoadOrdersAsync"   CultureInfo="CultureInfo.CurrentCulture"  TValue="DateTime?[]" Ranges="dayRanges" OnChange="OnCreationRangeChange" />
    </div> 
    <div style="width: 170px">
        <Select TItem="(EOrderPaymentMethod Value, string Name)"
                TItemValue="EOrderPaymentMethod?"
                AllowClear
                OnSelectedItemChanged="LoadOrdersAsync"
                DataSource="orderPaymentMethodList"
                @bind-Value="filter.PaymentMethodFilter"
                Placeholder="Chọn phương thức"
                ItemValue="c => (EOrderPaymentMethod?)c.Value"
                ItemLabel="c => c.Name">
        </Select>
    </div> 
    <div style="width: 150px">
        <Select TItem="(EOrderStatus Value, string Name)"
                TItemValue="EOrderStatus?"
                AllowClear
                OnSelectedItemChanged="LoadOrdersAsync"
                DataSource="orderStatusList"
                @bind-Value="filter.OrderStatusFilter"
                Placeholder="Chọn trạng thái"
                ItemValue="c => (EOrderStatus?)c.Value"
                ItemLabel="c => c.Name">
        </Select>
    </div>
    <Tooltip Title="Tìm kiếm">
        <Button @onclick="() => LoadOrdersAsync()" Type="ButtonType.Primary" Shape="ButtonShape.Circle" Icon="@IconType.Outline.Search"/>
    </Tooltip>
</div>
<Table @ref="orderTable" OnChange="@OnPageChange" PageSize="@filter.PageSize" Total="@totalRecords"
       @bind-SelectedRows="selectedRows" RowKey="x => x.Id" TItem="OrderDTO" DataSource="orders"
       RowExpandable="@(order => order.Data != null)"
       >
    <ColumnDefinitions>
        @if (activeTab != "All")
        {
            <Selection Type="@selectionType"/>
        }
        <Column TData="OrderDTO" Title="STT">
                @{
                    var indexInPage = orders.IndexOf(context);
                    var stt = (filter.PageIndex - 1) * filter.PageSize + indexInPage + 1;
                }
                @stt
        </Column>
        <PropertyColumn Property="o => o.Code" Title="Mã DH"/>
        <PropertyColumn Property="o => o.CustomerName" Title="Khách hàng"/>
        <PropertyColumn Property="o => o.CustomerPhoneNumber" Title="SĐT"/>
        <PropertyColumn Property="o => o.CustomerEmail" Title="Email"/>
        <PropertyColumn Property="o => o.CreationTime" Title="Thời gian đặt hàng"/>
        @* <PropertyColumn Property="o => o.DeliveryDate" Title="Thời gian giao hàng"/> *@
        <PropertyColumn Property="o => o.TotalPrice" Title="Tổng tiền (đ)"/>

        <Column TData="OrderDTO" Title="Phương thức thanh toán">
            @GetPaymentMethodName(context.PaymentMethod)
        </Column>
        <Column TData="OrderDTO" Title="Trạng thái">
            @GetStatusName(context.Status)
        </Column>
       <ActionColumn Title="Thao tác" Class="text-end gap-2" Width="250">
    <CellRender Context="cellData">
      


        @if (context.Status == EOrderStatus.Pending)
        {
            <Tooltip Title="Xác nhận đơn">
                <Button Size="ButtonSize.Small" Shape="ButtonShape.Circle" OnClick="@(() => OnClickConfirm(EOrderStatus.Confirmed, context))">
                    <i class="fa-solid fa-circle-check text-success"></i>
                </Button>
            </Tooltip>
        }
        else if (context.Status == EOrderStatus.Confirmed)
        {
            <Tooltip Title="Giao hàng">
                <Button Size="ButtonSize.Small" Shape="ButtonShape.Circle" OnClick="@(() => OnClickConfirm(EOrderStatus.InTransit, context))">
                    <i class="fa-solid fa-truck text-primary"></i>
                </Button>
            </Tooltip>
            <Tooltip Title="Huỷ đơn">
                <Button Size="ButtonSize.Small" Shape="ButtonShape.Circle" OnClick="@(() => OnClickConfirm(EOrderStatus.Canceled, context))">
                    <i class="fa-solid fa-xmark text-danger"></i>
                </Button>
            </Tooltip>
        }
        else if (context.Status == EOrderStatus.InTransit)
        {
            <Tooltip Title="Hoàn thành">
                <Button Size="ButtonSize.Small" Shape="ButtonShape.Circle" OnClick="@(() => OnClickConfirm(EOrderStatus.Completed, context))">
                    <i class="fa-solid fa-check-double text-success"></i>
                </Button>
            </Tooltip>
            <Tooltip Title="Huỷ đơn">
                <Button Size="ButtonSize.Small" Shape="ButtonShape.Circle" OnClick="@(() => OnClickConfirm(EOrderStatus.Canceled, context))">
                    <i class="fa-solid fa-xmark text-danger"></i>
                </Button>
            </Tooltip>
        }
        <Tooltip Title="Lịch sử">
            <Button Size="ButtonSize.Small" Shape="ButtonShape.Circle" OnClick="@(() => ShowHistory(context.Id))">
                <i class="fa-solid fa-clock-rotate-left"></i>
            </Button>
        </Tooltip>
    </CellRender>
</ActionColumn>

    </ColumnDefinitions>
    <ExpandTemplate>
        @if (context.Data.OrderDetails.Any())
        {
            <div class="row">
                <div class="col-3">
                    <div class="space-coverage">
                        <div class="title mb-2">
                            Thông tin nhận hàng
                        </div>
                        <div class="d-flex justify-content-between">
                            <div class="left-content">
                                Họ tên
                            </div>
                            <div class="right-content">
                                @context.Data.CustomerName
                            </div>
                        </div>
                        <hr/>
                        <div class="d-flex justify-content-between">
                            <div class="left-content">
                                Điện thoại
                            </div>
                            <div class="right-content">
                                @context.Data.CustomerPhoneNumber
                            </div>
                        </div>
                        <hr/>
                        <div class="d-flex justify-content-between">
                            <div class="left-content">
                                Địa chỉ
                            </div>
                            <div class="right-content">
                                @context.Data.DeliveryAddress
                            </div>
                        </div>
                        <hr/>
                        <div class="d-flex justify-content-between">
                            <div class="left-content">
                                Ghi chú
                            </div>
                            <div class="right-content">
                                @context.Data.Note
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-9">
                    <div class="space-coverage">
                        <Table TItem="OrderDetailDTO" DataSource="(context.Data.OrderDetails)" Size="TableSize.Middle">
                            <ColumnDefinitions Context="detailContext">
                                <PropertyColumn Property="d => d.ProductName" Title="Tên sản phẩm"/>
                                <PropertyColumn Property="d => d.Sku" Title="SKU"/>
                                <PropertyColumn Property="d => d.Quantity" Title="Số lượng"/>
                                <PropertyColumn Property="d => FormatCurrency.ToVnCurrency((decimal)d.Price,true)" Title="Giá"/>
                                <PropertyColumn Property="d => d.Discount" Title="Giảm giá"/>
                                <PropertyColumn Property="d => FormatCurrency.ToVnCurrency((decimal)d.GrandTotal,true)" Title="Thành tiền"/>
                                <PropertyColumn Property="d => d.Note" Title="Ghi chú"/>
                            </ColumnDefinitions>
                        </Table>
                        <div class="row">
                            <div class="col-8">

                            </div>
                            <div class="col-4">
                                <div class="d-flex justify-content-between mb-2">
                                    <div class="left-content">
                                        Cộng thành tiền:
                                    </div>
                                    <div class="right-content">
                                        @(FormatCurrency.ToVnCurrency((decimal)context.Data.OrderDetails.Sum(c => c.GrandTotal),true ))
                                    </div>
                                </div>
                                <div class="d-flex justify-content-between mb-2">
                                    <div class="left-content">
                                        Phí vận chuyển:

                                    </div>
                                    <div class="right-content">
                                        @(FormatCurrency.ToVnCurrency(context.Data.ShippingFee ?? 0,true))
                                    </div>
                                </div>
                                <div class="d-flex justify-content-between mb-2">
                                    <div class="left-content">
                                        Mã giảm giá:
                                    </div>
                                    <div class="right-content">
                                        - @(FormatCurrency.ToVnCurrency(context.Data.DiscountPrice ?? 0,true))
                                    </div>
                                </div>
                                <hr>
                                <div class="d-flex justify-content-between mb-2">
                                    <div class="left-content">
                                        Tổng tiền:
                                    </div>
                                    <div class="right-content">
                                         @(FormatCurrency.ToVnCurrency(context.Data.TotalPrice,true))
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        }
        else
        {
            <span>Không có chi tiết đơn hàng</span>
        }
    </ExpandTemplate>
</Table>
<DrawerHistory TItem="OrderHistoryDTO"
               Visible="@isDrawerVisible"
               Title="Lịch sử đơn hàng"
               OnClose="@CloseDrawer"
               Items="@orderHistories">
</DrawerHistory>



@code {
    ITable orderTable;
    List<OrderDTO> orders = new();
    private string activeTab = "All";
    private EOrderStatus targetStatusOrder;
    private GetListOrderResponseDTO metaData = new();
    private int totalRecords = 0;
    private bool isExpaned = false;
    IEnumerable<OrderDTO> selectedRows;
    bool _visible = false;
    bool _confirmLoading = false;
    string _modalText = "";
    string reason = "";
    SelectionType selectionType = SelectionType.Checkbox;
    List<(EOrderStatus Value, string Name)> orderStatusList = new();
    List<(EOrderPaymentMethod Value, string Name)> orderPaymentMethodList = new();
    Dictionary<string,DateTime?[]> dayRanges = new Dictionary<string, DateTime?[]>() { 
        { "Tuần trước",new DateTime?[] { DateTime.Now, DateTime.Now.AddDays(-7) }},
        { "Tháng trước",new DateTime?[] { new DateTime(DateTime.Now.Year,DateTime.Now.Month,1), new DateTime(DateTime.Now.Year,DateTime.Now.Month,1).AddMonths(1).AddDays(-1) }},
        { "3 Ngày trước",new DateTime?[] { DateTime.Now.AddDays(-3), DateTime.Now }},
    };
    private List<OrderHistoryDTO> orderHistories = new();
    private bool isDrawerVisible = false;
    protected override async Task OnInitializedAsync()
    {
        orderStatusList = Enum.GetValues(typeof(EOrderStatus))
            .Cast<EOrderStatus>()
            .Select(x => (
                x,
                x.GetType().GetMember(x.ToString())
                    .First()
                    .GetCustomAttribute<DisplayAttribute>()?.Name ?? x.ToString()
            ))
            .ToList();
        orderPaymentMethodList = Enum.GetValues(typeof(EOrderPaymentMethod))
            .Cast<EOrderPaymentMethod>()
            .Select(x => (
                x,
                x.GetType().GetMember(x.ToString())
                    .First()
                    .GetCustomAttribute<DisplayAttribute>()?.Name ?? x.ToString()
            ))
            .ToList();
        
        
        
        await LoadOrdersAsync();
    }
    private async Task ShowHistory(Guid orderId)
    {
        var result = await OrderClientService.GetListOrderHistoryAsync(orderId);
        orderHistories = result.Items;
        isDrawerVisible = true;
    }
    private void OnClickConfirm(EOrderStatus status,OrderDTO context)
    {
        selectedRows = new List<OrderDTO>()
        {
            context
        };
        ShowPopUpConfirm(status);
    }
    private Task CloseDrawer()
    {
        isDrawerVisible = false;
        return Task.CompletedTask;
    }
    private async Task OnCreationRangeChange(DateRangeChangedEventArgs<DateTime?[]> args)
    {
        filter.CreationDateStartFilter = args.Dates[0];
        filter.CreationDateEndFilter = args.Dates[1];
        await LoadOrdersAsync();
    }  
    private void ShowPopUpConfirm(EOrderStatus status)
    {
        targetStatusOrder = status;
        string txtStatus = "";
        switch (targetStatusOrder)
        {

            case EOrderStatus.Confirmed:
                txtStatus = "xác nhận";
                break;

            case EOrderStatus.InTransit:
                txtStatus = "vận chuyển";
                break;

            case EOrderStatus.Completed:
                txtStatus = "hoàn thành";
                break;

            case EOrderStatus.Canceled:
                txtStatus = "hủy";
                break;

            default:
                txtStatus = "";
                break;
        };
        _modalText = $"Bạn có chắc chắn muốn {txtStatus} đơn hàng {string.Join(",", selectedRows.Reverse().Select(c => c.Code))}";
        _visible = true;
    }

    private async void ExpandCollapseOrder()
    {
        isExpaned = !isExpaned;
        if (isExpaned)
        {
            orderTable.ExpandAll();
        }
        else
        {
            orderTable.CollapseAll();
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task cancelShowModel()
    {
        _visible = false;
        _confirmLoading = false;
        await InvokeAsync(StateHasChanged);
    }
    private async Task ConfirmOrder()
    {
        reason = reason.Trim();
      
        if (String.IsNullOrEmpty(reason) && targetStatusOrder== EOrderStatus.Canceled)
        {
            MessageModalService.Warning("Vui lòng điền lý do từ chối");
            return;
        }
        var bodyUpdate = new UpdateStatusOrderRequestDTO()
        {
            OrderIds = selectedRows.Select(c => c.Id).ToList(),
            Status = targetStatusOrder
        };
       var result = await OrderClientService.UpdateStatusOrderAsync(bodyUpdate);
       if (result.ResponseStatus == BaseStatus.Success)
       {
           await cancelShowModel();
           await MessageModalService.Success("Cập nhật trạng thái đơn hàng thành công");
           selectedRows = new List<OrderDTO>();
           await LoadOrdersAsync();
       }
       else
       {
           await MessageModalService.Warning(result.Message);
       }
       await InvokeAsync(StateHasChanged);
    }
    private async Task OnPageChange(QueryModel<OrderDTO> query)
    {
        filter.PageIndex = query.PageIndex;
        filter.PageSize = query.PageSize;
        await LoadOrdersAsync();
    }

    GetListOrderRequestDTO filter = new GetListOrderRequestDTO()
    {
        PageIndex = 1,
        PageSize = 10,
        CodeFilter = "",
        CustomerNameFilter = null,
        CustomerPhoneNumberFilter = "",
        CustomerEmailFilter = "",
        CreationDateStartFilter = null,
        CreationDateEndFilter = null,
        PaymentMethodFilter = null,
        OrderStatusFilter = null
    };

   
    private async Task OnTabChange()
    {
        if (activeTab == "All")
        {
            filter.OrderStatusFilter = null;
        }
        else if (Enum.TryParse<EOrderStatus>(activeTab, out var status))
        {
            filter.OrderStatusFilter = status;
        }
        selectedRows = new List<OrderDTO>();
        await LoadOrdersAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadOrdersAsync()
    {
        filter.CustomerNameFilter = filter.CustomerNameFilter?.Trim();
        filter.CodeFilter = filter.CodeFilter?.Trim();
        filter.CustomerEmailFilter = filter.CustomerEmailFilter?.Trim();
        filter.CustomerNameFilter = filter.CustomerNameFilter?.Trim();
        var response = await OrderClientService.GetListOrderAsync(filter);
        orders = response.Items ?? new List<OrderDTO>();
        metaData = response.Metadata;
        totalRecords = response.TotalRecords;
        await InvokeAsync(StateHasChanged);
    }

    string GetPaymentMethodName(EOrderPaymentMethod method)
    {
        return method switch
        {
            EOrderPaymentMethod.Cash => "Tiền mặt",
            EOrderPaymentMethod.Transfer => "Chuyển khoản",
            _ => method.ToString()
        };
    }

    string GetStatusName(EOrderStatus status)
    {
        return status switch
        {
            EOrderStatus.Pending => "Chờ xác nhận",
            EOrderStatus.Confirmed => "Đã xác nhận",
            EOrderStatus.InTransit => "Đang giao",
            EOrderStatus.Canceled => "Đã huỷ",
            EOrderStatus.Completed => "Hoàn thành",
            _ => status.ToString()
        };
    }

}