@page "/cms/permission-groups"
@using MeoMeo.Shared.IServices
@using MeoMeo.Contract.DTOs.Permission
@using MeoMeo.Contract.Commons
@using MeoMeo.Shared.Utilities
@using AntDesign
@using Radzen
@using Radzen.Blazor
@using Microsoft.AspNetCore.Components.Web
@using ButtonSize = AntDesign.ButtonSize
@using ButtonType = AntDesign.ButtonType
@inject IPermissionGroupClientService PermissionGroupService
@inject MessageModalService MessageModalService

<PageTitle>Quản lý nhóm quyền</PageTitle>

<div class="permission-groups-container">
    <div class="page-header">
        <Title Level="2">
            <Icon Type="folder" />
            Quản lý nhóm quyền
        </Title>
        <p class="page-subtitle">Quản lý các nhóm quyền và cấu trúc phân cấp</p>
    </div>

    <div class="action-bar">
        <RadzenRow>
            <RadzenColumn Size="6">
                <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem">
                    <RadzenButton Text="Thêm nhóm quyền" Icon="add" ButtonStyle="ButtonStyle.Primary" Click="ShowCreateModal" />
                    <RadzenButton Text="Làm mới" Icon="refresh" ButtonStyle="ButtonStyle.Light" Click="LoadData" />
                    <RadzenButton Text="Lưu thay đổi" Icon="save" ButtonStyle="ButtonStyle.Success" 
                                  Click="SavePermissionChanges" Disabled="@(!HasChanges())" />
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="6">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem">
                    <RadzenCheckBox @bind-Value="@selectAll" Name="selectAll" TValue="bool" 
                                    Change="@(args => OnSelectAllChanged(args))" />
                    <RadzenLabel Text="Chọn tất cả" Component="selectAll" />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </div>

    <div class="content-section">
        @if (isLoading)
        {
                                    <div class="loading-section">
                                                <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
                                        <p>Đang tải dữ liệu...</p>
                                    </div>
        }
        else
        {
                                        <RadzenTree Data="@permissionGroups" 
                                                    Expand="@OnExpand" 
                                                    Change="@OnChange"
                                                    CheckBoxes="true"
                                                    AllowCheckChildren="true"
                                                    AllowCheckParents="true"
                                                    @bind-CheckedValues="@checkedValues"
                                                    Style="width: 100%; height: 600px; overflow: auto;"
                                                    Class="permission-tree">
                                            <RadzenTreeLevel TextProperty="Name" 
                                                             ChildrenProperty="Children"
                                                             HasChildren="@(e => ((PermissionGroupDTO)e).Children?.Any() == true)"
                                                             Template="@TreeNodeTemplate"
                                                              />
                                        </RadzenTree>
        }
    </div>
</div>

<!-- Create/Edit Modal -->
<Modal Title="@(isEdit ? "Chỉnh sửa nhóm quyền" : "Thêm nhóm quyền")" @bind-Visible="showModal"
    OnOk="SavePermissionGroup" OnCancel="CancelModal" Width="600">
    <Form Model="@currentGroup" LabelColSpan="6" WrapperColSpan="18">
        <FormItem Label="Tên nhóm">
            <Input @bind-Value="currentGroup.Name" Placeholder="Nhập tên nhóm quyền" />
        </FormItem>
        <FormItem Label="Mô tả">
            <TextArea @bind-Value="currentGroup.Description" Placeholder="Nhập mô tả" Rows="3" />
        </FormItem>
        <FormItem Label="Nhóm cha">
            <Select TItemValue="Guid?" TItem="PermissionGroupDTO" @bind-Value="currentGroup.ParentId"
                Placeholder="Chọn nhóm cha" AllowClear>
                @foreach (var group in allGroups.Where(g => g.Id != currentGroup.Id))
                {
                                            <SelectOption TItemValue="Guid?" TItem="PermissionGroupDTO" Value="@group.Id" Label="@group.Name" />
                }
            </Select>
        </FormItem>
        <FormItem Label="Thứ tự">
            <AntDesign.InputNumber @bind-Value="currentGroup.Order" Min="0" Placeholder="Thứ tự hiển thị" />
        </FormItem>
    </Form>
</Modal>

@code {
    private List<PermissionGroupDTO> permissionGroups = new();
    private List<PermissionGroupDTO> allGroups = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEdit = false;
    private CreateOrUpdatePermissionGroupDTO currentGroup = new();
    private bool selectAll = false;
    private IEnumerable<object> checkedValues = new List<object>();
    private HashSet<Guid> originalCheckedIds = new();
    private HashSet<Guid> currentCheckedIds = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            permissionGroups = await PermissionGroupService.GetPermissionGroupsTreeAsync();
            allGroups = await PermissionGroupService.GetAllPermissionGroupsAsync();

            // Initialize checked values based on IsGranted property
            var initialCheckedValues = new List<object>();
            CollectCheckedNodes(permissionGroups, initialCheckedValues);
            checkedValues = initialCheckedValues;
            
            // Store original state for comparison
            originalCheckedIds = GetCheckedIds();
            currentCheckedIds = new HashSet<Guid>(originalCheckedIds);
            UpdateSelectAllState();
        }
        catch (Exception ex)
        {
            await MessageModalService.Error("Không thể tải dữ liệu!");
            Console.WriteLine($"Error loading permission groups: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CollectCheckedNodes(List<PermissionGroupDTO> nodes, List<object> checkedList)
    {
        foreach (var node in nodes)
        {
            if (node.IsGranted)
            {
                checkedList.Add(node);
            }
            if (node.Children?.Any() == true)
            {
                CollectCheckedNodes(node.Children, checkedList);
            }
        }
    }

    private void ShowCreateModal()
    {
        isEdit = false;
        currentGroup = new CreateOrUpdatePermissionGroupDTO();
        showModal = true;
    }

    private void ShowEditModal(PermissionGroupDTO group)
    {
        isEdit = true;
        currentGroup = new CreateOrUpdatePermissionGroupDTO
        {
            Id = group.Id,
            Name = group.Name,
            Description = group.Description,
            ParentId = group.ParentId,
            Order = group.Order
        };
        showModal = true;
    }

    private async Task SavePermissionGroup()
    {
        try
        {
            BaseResponse result;
            if (isEdit)
            {
                result = await PermissionGroupService.UpdatePermissionGroupAsync(currentGroup);
            }
            else
            {
                result = await PermissionGroupService.CreatePermissionGroupAsync(currentGroup);
            }

            if (result.ResponseStatus == BaseStatus.Success)
            {
                await MessageModalService.Success(result.Message);
                showModal = false;
                await LoadData();
            }
            else
            {
                await MessageModalService.Error(result.Message);
            }
        }
        catch (Exception ex)
        {
            await MessageModalService.Error("Có lỗi xảy ra!");
            Console.WriteLine($"Error saving permission group: {ex.Message}");
        }
    }

    private void CancelModal()
    {
        showModal = false;
        currentGroup = new CreateOrUpdatePermissionGroupDTO();
    }

    private async Task DeletePermissionGroup(PermissionGroupDTO group)
    {
        try
        {
            var result = await PermissionGroupService.DeletePermissionGroupAsync(group.Id);
            if (result.ResponseStatus == BaseStatus.Success)
            {
                await MessageModalService.Success(result.Message);
                await LoadData();
            }
            else
            {
                await MessageModalService.Error(result.Message);
            }
        }
        catch (Exception ex)
        {
            await MessageModalService.Error("Có lỗi xảy ra!");
            Console.WriteLine($"Error deleting permission group: {ex.Message}");
        }
    }

    // Template for tree nodes with action buttons
    RenderFragment<RadzenTreeItem> TreeNodeTemplate = (context) => @<div class="tree-node-content">
                <div style="display: flex; align-items: center; justify-content: space-between; width: 100%;">
                    <div style="flex: 1;">
                        <span style="font-weight: 500; margin-right: 8px;">@(((PermissionGroupDTO)context.Value).Name)</span>
                        <span style="color: #999; font-size: 12px;">@(((PermissionGroupDTO)context.Value).Description)</span>
                    </div>
                    <div style="display: flex; gap: 4px;" @onclick:stopPropagation="true">
                        @* <Button Type="@ButtonType.Link" Size="@ButtonSize.Small" Icon="edit" *@
                        @*         OnClick="@((e) => { ShowEditModal(context.); })" /> *@
                        @* <Popconfirm Title="@($"Bạn có chắc chắn muốn xóa nhóm quyền '{((PermissionGroupDTO)context.Value).Name}'?")" *@
                        @*             OnConfirm="@((e) => { DeletePermissionGroup((PermissionGroupDTO)context.Value); })"  *@
                        @*             OkText="Đồng ý" CancelText="Hủy"> *@
                        @*     <Button Type="@ButtonType.Link" Size="@ButtonSize.Small" Icon="delete" Danger /> *@
                        @* </Popconfirm> *@
                    </div>
                </div>
    </div>;

    // Event handlers for tree interactions
    private void OnExpand(TreeExpandEventArgs args)
    {
        // Handle tree node expansion if needed
    }

    private void OnChange(TreeEventArgs args)
    {
        currentCheckedIds = GetCheckedIds();
        UpdateSelectAllState();
        StateHasChanged();
    }

    private void OnSelectAllChanged(bool value)
    {
        if (value)
        {
            // Select all nodes
            var allNodes = new List<object>();
            CollectAllNodes(permissionGroups, allNodes);
            checkedValues = allNodes;
        }
        else
        {
            // Deselect all nodes
            checkedValues = new List<object>();
        }
        
        currentCheckedIds = GetCheckedIds();
        UpdateSelectAllState();
        StateHasChanged();
    }

    private void UpdateSelectAllState()
    {
        var totalNodes = 0;
        CountAllNodes(permissionGroups, ref totalNodes);
        selectAll = currentCheckedIds.Count == totalNodes && totalNodes > 0;
    }

    private void CountAllNodes(List<PermissionGroupDTO> nodes, ref int count)
    {
        foreach (var node in nodes)
        {
            count++;
            if (node.Children?.Any() == true)
            {
                CountAllNodes(node.Children, ref count);
            }
        }
    }

    private void CollectAllNodes(List<PermissionGroupDTO> nodes, List<object> nodeList)
    {
        foreach (var node in nodes)
        {
            nodeList.Add(node);
            if (node.Children?.Any() == true)
            {
                CollectAllNodes(node.Children, nodeList);
            }
        }
    }

    private HashSet<Guid> GetCheckedIds()
    {
        var ids = new HashSet<Guid>();
        foreach (var item in checkedValues)
        {
            if (item is PermissionGroupDTO group)
            {
                ids.Add(group.Id);
            }
        }
        return ids;
    }

    private bool HasChanges()
    {
        return !originalCheckedIds.SetEquals(currentCheckedIds);
    }

    private async Task SavePermissionChanges()
    {
        try
        {
            // Here you would implement the logic to save permission changes
            // This might involve calling a service method to update IsGranted states
            
            // For now, just update the original state and show success message
            originalCheckedIds = new HashSet<Guid>(currentCheckedIds);
            
            await MessageModalService.Success("Đã lưu thay đổi phân quyền!");
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await MessageModalService.Error("Có lỗi xảy ra khi lưu thay đổi!");
            Console.WriteLine($"Error saving permission changes: {ex.Message}");
        }
    }
}

