@page "/user-roles"
@* @attribute [Authorize(Roles = "Admin")] *@
@using MeoMeo.Shared.IServices
@using MeoMeo.Contract.DTOs.Permission
@using MeoMeo.Contract.Commons
@using AntDesign
@using Microsoft.AspNetCore.Authorization
@using ButtonSize = AntDesign.ButtonSize
@using ButtonType = AntDesign.ButtonType
@using SpinSize = AntDesign.SpinSize
@using AlertType = AntDesign.AlertType
@inject IUserRoleClientService UserRoleService
@inject IRoleClientService RoleService
@inject MessageService MessageService

<PageTitle>Quản lý người dùng và vai trò</PageTitle>

<div class="user-roles-container">
    <div class="page-header">
        <Title Level="2">
            <Icon Type="user" />
            Quản lý người dùng và vai trò
        </Title>
        <p class="page-subtitle">Gán vai trò cho người dùng</p>
    </div>

    <div class="action-bar">
        <Space>
            <Button Type="@ButtonType.Default" Icon="reload" @onclick="LoadData">
                Làm mới
            </Button>
        </Space>
    </div>

    <div class="content-section">
        @if (isLoading)
        {
            <div class="loading-section">
                <Spin Size="@SpinSize.Large" />
                <p>Đang tải dữ liệu...</p>
            </div>
        }
        else
        {
            <Table DataSource="@users" Bordered>
                <PropertyColumn Property="@(u => u.UserName)" Title="Tên đăng nhập" />
                <PropertyColumn Property="@(u => u.Email)" Title="Email" />
                <Column TData="int" Title="Trạng thái">
                    <Template>
                        <Tag Color="@(context.Status == 1 ? "green" : "red")">
                            @(context.Status == 1 ? "Hoạt động" : "Không hoạt động")
                        </Tag>
                    </Template>
                </Column>
                <Column TData="string" Title="Vai trò hiện tại">
                    <Template>
                        @if (context.Roles.Any())
                        {
                            var currentRole = context.Roles.First();
                            <Tag Color="@GetRoleColor(currentRole.Name)">
                                @currentRole.Name
                            </Tag>
                        }
                        else
                        {
                            <span class="text-muted">Chưa có vai trò</span>
                        }
                    </Template>
                </Column>
                <ActionColumn Title="Thao tác">
                    <Template>
                        <Button Type="@ButtonType.Link" Size="@ButtonSize.Small" Icon="edit"
                            @onclick="() => ShowRoleAssignmentModal(context)">
                            Cập nhật vai trò
                        </Button>
                    </Template>
                </ActionColumn>
            </Table>
        }
    </div>
</div>

<!-- Role Assignment Modal -->
<Modal Title="Cập nhật vai trò cho người dùng" @bind-Visible="showRoleModal" OnOk="AssignRoleToUser"
    OnCancel="CancelRoleModal" Width="500">
    <div class="user-info">
        <div class="user-avatar">
            <Avatar Size="@AntDesign.AvatarSize.Large" Src="@selectedUser.Avatar">
                @(string.IsNullOrEmpty(selectedUser.UserName) ? "U" : selectedUser.UserName.Substring(0, 1).ToUpper())
            </Avatar>
        </div>
        <div class="user-details">
            <h4>@(selectedUser.UserName ?? "N/A")</h4>
            <p>@(selectedUser.Email ?? "N/A")</p>
        </div>
    </div>

    <Divider />

    <div class="role-assignment">
        <h4>Vai trò hiện tại:</h4>
        @if (selectedUser.Roles.Any())
        {
            var currentRole = selectedUser.Roles.First();
            <Tag Color="@GetRoleColor(currentRole.Name)" Style="margin-bottom: 16px;">
                @currentRole.Name
            </Tag>
        }
        else
        {
            <span class="text-muted" Style="margin-bottom: 16px; display: block;">Chưa có vai trò</span>
        }

        <h4>Chọn vai trò mới:</h4>
        <Select TItem="RoleDTO" TItemValue="Guid ?" DataSource="@GetAvailableRolesForUser(selectedUser)"
            @bind-Value="selectedRoleId" Placeholder="Chọn vai trò" Style="width: 100%;" ItemValue="r => r.Id"
            ItemLabel="r => r.Name">
        </Select>

        @if (!GetAvailableRolesForUser(selectedUser).Any())
        {
            <Alert Type="@AlertType.Warning" Message="Không có vai trò nào khả dụng cho loại người dùng này"
                Style="margin-top: 12px;" />
        }
    </div>
</Modal>

@code {
    private List<UserWithRolesDTO> users = new();
    private List<RoleDTO> allRoles = new();
    private bool isLoading = true;
    private bool showRoleModal = false;
    private UserWithRolesDTO selectedUser = new();
    private Guid? selectedRoleId;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            users = await UserRoleService.GetAllUsersWithRolesAsync();
            allRoles = await RoleService.GetAllRolesAsync();
        }
        catch (Exception ex)
        {
            MessageService.Error("Không thể tải dữ liệu!");
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowRoleAssignmentModal(UserWithRolesDTO user)
    {
        selectedUser = user;
        selectedRoleId = null;
        showRoleModal = true;
    }

    private async Task AssignRoleToUser()
    {
        if (!selectedRoleId.HasValue)
        {
            MessageService.Warning("Vui lòng chọn vai trò!");
            return;
        }

        try
        {
            var result = await UserRoleService.AssignRoleToUserAsync(new AssignRoleToUserDTO
            {
                UserId = selectedUser.Id,
                RoleId = selectedRoleId.Value
            });

            if (result.ResponseStatus == BaseStatus.Success)
            {
                MessageService.Success(result.Message);
                await LoadData();
                CancelRoleModal();
            }
            else
            {
                MessageService.Error(result.Message);
            }
        }
        catch (Exception ex)
        {
            MessageService.Error("Có lỗi xảy ra!");
            Console.WriteLine($"Error assigning role to user: {ex.Message}");
        }
    }

    private void CancelRoleModal()
    {
        showRoleModal = false;
        selectedUser = new UserWithRolesDTO();
        selectedRoleId = null;
    }

    // Helper method to get role color
    private string GetRoleColor(string roleName)
    {
        return roleName.ToLower() switch
        {
            "admin" => "red",
            "employee" => "blue",
            "customer" => "green",
            _ => "default"
        };
    }

    // Helper method to determine user type based on roles
    private string GetUserType(UserWithRolesDTO user)
    {
        if (!user.Roles.Any()) return "unknown";

        var roleName = user.Roles.First().Name.ToLower();
        return roleName switch
        {
            "admin" => "admin",
            "employee" => "employee",
            "customer" => "customer",
            _ => "unknown"
        };
    }

    // Helper method to get available roles for a specific user
    private List<RoleDTO> GetAvailableRolesForUser(UserWithRolesDTO user)
    {
        var userType = GetUserType(user);

        return userType switch
        {
            "customer" => allRoles.Where(r => r.Name.ToLower() == "customer").ToList(),
            "employee" => allRoles.Where(r => r.Name.ToLower() == "employee" || r.Name.ToLower() == "admin").ToList(),
            "admin" => allRoles.Where(r => r.Name.ToLower() == "employee" || r.Name.ToLower() == "admin").ToList(),
            _ => allRoles.ToList()
        };
    }
}

<style>
    .user-roles-container {
        padding: 24px;
    }

    .page-header {
        margin-bottom: 24px;
    }

    .page-subtitle {
        color: #666;
        margin-top: 8px;
    }

    .action-bar {
        margin-bottom: 24px;
    }

    .content-section {
        background: white;
        padding: 24px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .loading-section {
        text-align: center;
        padding: 48px;
    }

    .text-muted {
        color: #999;
        font-style: italic;
    }

    .user-info {
        display: flex;
        align-items: center;
        margin-bottom: 16px;
    }

    .user-avatar {
        margin-right: 16px;
    }

    .user-details h4 {
        margin: 0;
        color: #1890ff;
    }

    .user-details p {
        margin: 4px 0 0 0;
        color: #666;
    }

    .role-assignment h4 {
        margin-bottom: 12px;
        color: #333;
        font-size: 14px;
        font-weight: 600;
    }
</style>