@page "/roles"
@attribute [Authorize(Roles = "Admin")]
@using MeoMeo.Shared.IServices
@using MeoMeo.Contract.DTOs.Permission
@using MeoMeo.Contract.Commons
@using AntDesign
@using MeoMeo.Shared.Utilities
@using Microsoft.AspNetCore.Authorization
@using ButtonSize = AntDesign.ButtonSize
@using ButtonType = AntDesign.ButtonType
@using SpinSize = AntDesign.SpinSize
@inject IRoleClientService RoleService
@inject MeoMeo.Shared.Utilities.MessageModalService MessageModalService

<PageTitle>Quản lý vai trò</PageTitle>

<div class="roles-container">
    <div class="page-header">
        <Title Level="2">
            <Icon Type="team" />
            Quản lý vai trò
        </Title>
        <p class="page-subtitle">Quản lý các vai trò trong hệ thống</p>
    </div>

    <div class="action-bar">
        <Space>
            <Button Type="@ButtonType.Primary" Icon="plus" @onclick="ShowCreateModal">
                Thêm vai trò
            </Button>
            <Button Type="@ButtonType.Default" Icon="reload" @onclick="LoadData">
                Làm mới
            </Button>
        </Space>
    </div>

    <div class="content-section">
        @if (isLoading)
        {
            <div class="loading-section">
                <Spin Size="@SpinSize.Large" />
                <p>Đang tải dữ liệu...</p>
            </div>
        }
        else
        {
            <Table DataSource="@roles" Bordered>
                <PropertyColumn Property="@(r => r.Name)" Title="Tên vai trò" />
                <PropertyColumn Property="@(r => r.Description)" Title="Mô tả" />
                <PropertyColumn Property="@(r => r.Status)" Title="Trạng thái">
                    <Template>
                        <Tag Color="@(context.Status == 1 ? "green" : "red")">
                            @(context.Status == 1 ? "Hoạt động" : "Không hoạt động")
                        </Tag>
                    </Template>
                </PropertyColumn>
                <PropertyColumn Property="@(r => r.UserRoles.Count)" Title="Số người dùng" />
                <ActionColumn Title="Thao tác">
                    <Template>
                        <Space>
                            <Button Type="@ButtonType.Link" Size="@ButtonSize.Small" Icon="edit"
                                OnClick="() => ShowEditModal(context)">
                                Chỉnh sửa
                            </Button>
                            <Popconfirm Title="Bạn có chắc chắn muốn xóa vai trò này?" OnConfirm="() => DeleteRole(context)"
                                OkText="Đồng ý" CancelText="Hủy">
                                <Button Type="@ButtonType.Link" Size="@ButtonSize.Small" Icon="delete" Danger></Button>
                            </Popconfirm>
                        </Space>
                    </Template>
                </ActionColumn>
            </Table>
        }
    </div>
</div>

<!-- Create/Edit Role Modal -->
<Modal Title="@(isEdit ? "Chỉnh sửa vai trò" : "Thêm vai trò")" @bind-Visible="showRoleModal" OnOk="SaveRole"
    OnCancel="CancelRoleModal" Width="600">
    <Form Model="@currentRole" LabelColSpan="6" WrapperColSpan="18">
        <FormItem Label="Tên vai trò">
            <Input @bind-Value="currentRole.Name" Placeholder="Nhập tên vai trò" />
        </FormItem>
        <FormItem Label="Mô tả">
            <TextArea @bind-Value="currentRole.Description" Placeholder="Nhập mô tả" Rows="3" />
        </FormItem>
        <FormItem Label="Trạng thái">
            <Select TItemValue="int?" TItem="int?" @bind-Value="currentRole.Status" Placeholder="Chọn trạng thái">
                <SelectOption TItemValue="int?" TItem="int?" Value="1" Label="Hoạt động" />
                <SelectOption TItemValue="int?" TItem="int?" Value="0" Label="Không hoạt động" />
            </Select>
        </FormItem>
    </Form>
</Modal>

@code {
    private List<RoleDTO> roles = new();
    private bool isLoading = true;
    private bool showRoleModal = false;
    private bool isEdit = false;
    private CreateOrUpdateRoleDTO currentRole = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            roles = await RoleService.GetAllRolesAsync();
        }
        catch (Exception ex)
        {
            await MessageModalService.Error("Không thể tải dữ liệu!");
            Console.WriteLine($"Error loading roles: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowCreateModal()
    {
        isEdit = false;
        currentRole = new CreateOrUpdateRoleDTO { Status = 1 };
        showRoleModal = true;
    }

    private void ShowEditModal(RoleDTO role)
    {
        isEdit = true;
        currentRole = new CreateOrUpdateRoleDTO
        {
            Id = role.Id,
            Name = role.Name,
            Description = role.Description,
            Status = role.Status
        };
        showRoleModal = true;
    }

    private async Task SaveRole()
    {
        try
        {
            BaseResponse result;
            if (isEdit)
            {
                result = await RoleService.UpdateRoleAsync(currentRole);
            }
            else
            {
                result = await RoleService.CreateRoleAsync(currentRole);
            }

            if (result.ResponseStatus == BaseStatus.Success)
            {
                await MessageModalService.Success(result.Message);
                showRoleModal = false;
                await LoadData();
            }
            else
            {
                await MessageModalService.Error(result.Message);
            }
        }
        catch (Exception ex)
        {
            await MessageModalService.Error("Có lỗi xảy ra!");
            Console.WriteLine($"Error saving role: {ex.Message}");
        }
    }

    private void CancelRoleModal()
    {
        showRoleModal = false;
        currentRole = new CreateOrUpdateRoleDTO();
    }

    private async Task DeleteRole(RoleDTO role)
    {
        try
        {
            var result = await RoleService.DeleteRoleAsync(role.Id);
            if (result.ResponseStatus == BaseStatus.Success)
            {
                await MessageModalService.Success(result.Message);
                await LoadData();
            }
            else
            {
                await MessageModalService.Error(result.Message);
            }
        }
        catch (Exception ex)
        {
            await MessageModalService.Error("Có lỗi xảy ra!");
            Console.WriteLine($"Error deleting role: {ex.Message}");
        }
    }
}

<style>
    .roles-container {
        padding: 24px;
    }

    .page-header {
        margin-bottom: 24px;
    }

    .page-subtitle {
        color: #666;
        margin-top: 8px;
    }

    .action-bar {
        margin-bottom: 24px;
    }

    .content-section {
        background: white;
        padding: 24px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .loading-section {
        text-align: center;
        padding: 48px;
    }
</style>
