@page "/roles"
@using MeoMeo.Shared.IServices
@using MeoMeo.Contract.DTOs.Permission
@using MeoMeo.Contract.Commons
@using AntDesign
@using MeoMeo.Shared.Utilities
@using ButtonSize = AntDesign.ButtonSize
@using ButtonType = AntDesign.ButtonType
@inject IRoleClientService RoleService
@inject MeoMeo.Shared.Utilities.MessageModalService MessageModalService

<PageTitle>Quản lý vai trò</PageTitle>

<div class="roles-container">
    <div class="page-header">
        <Title Level="2">
            <Icon Type="team" />
            Quản lý vai trò
        </Title>
        <p class="page-subtitle">Quản lý các vai trò và phân quyền</p>
    </div>

    <div class="action-bar">
        <Space>
            <Button Type="@ButtonType.Primary" Icon="plus" @onclick="ShowCreateModal">
                Thêm vai trò
            </Button>
            <Button Type="@ButtonType.Default" Icon="reload" @onclick="LoadData">
                Làm mới
            </Button>
        </Space>
    </div>

    <div class="content-section">
            <Table DataSource="@roles"  Bordered>
                <PropertyColumn Property="@(r => r.Name)" Title="Tên vai trò" />
                <PropertyColumn Property="@(r => r.Description)" Title="Mô tả" />
                <PropertyColumn Property="@(r => r.Status)" Title="Trạng thái">
                    <Template>
                        <Tag Color="@(context.Status == 1 ? "green" : "red")">
                            @(context.Status == 1 ? "Hoạt động" : "Không hoạt động")
                        </Tag>
                    </Template>
                </PropertyColumn>
                <PropertyColumn Property="@(r => r.Permissions.Count)" Title="Số quyền" />
                <ActionColumn Title="Thao tác">
                    <Template>
                        <Space>
                            <Button Type="@ButtonType.Link" Size="@ButtonSize.Small" Icon="setting"
                                OnClick="() => ShowPermissionModal(context)">
                                Phân quyền
                            </Button>
                            <Button Type="@ButtonType.Link" Size="@ButtonSize.Small" Icon="edit"
                                OnClick="() => ShowEditModal(context)"></Button>
                            <Popconfirm Title="Bạn có chắc chắn muốn xóa vai trò này?" OnConfirm="() => DeleteRole(context)"
                                OkText="Đồng ý" CancelText="Hủy">
                                <Button Type="@ButtonType.Link" Size="@ButtonSize.Small" Icon="delete" Danger></Button>
                            </Popconfirm>
                        </Space>
                    </Template>
                </ActionColumn>
            </Table>
        
    </div>
</div>

<!-- Create/Edit Role Modal -->
<Modal Title="@(isEdit ? "Chỉnh sửa vai trò" : "Thêm vai trò")" @bind-Visible="showRoleModal" OnOk="SaveRole"
    OnCancel="CancelRoleModal" Width="600">
    <Form Model="@currentRole" LabelColSpan="6" WrapperColSpan="18">
        <FormItem Label="Tên vai trò">
            <Input @bind-Value="currentRole.Name" Placeholder="Nhập tên vai trò" />
        </FormItem>
        <FormItem Label="Mô tả">
            <TextArea @bind-Value="currentRole.Description" Placeholder="Nhập mô tả" Rows="3" />
        </FormItem>
        <FormItem Label="Trạng thái">
            <Select TItemValue="int?" TItem="int?" @bind-Value="currentRole.Status" Placeholder="Chọn trạng thái">
                <SelectOption TItemValue="int?" TItem="int?" Value="1" Label="Hoạt động" />
                <SelectOption TItemValue="int?" TItem="int?" Value="0" Label="Không hoạt động" />
            </Select>
        </FormItem>
    </Form>
</Modal>

<!-- Permission Assignment Modal -->
<Modal Title="Phân quyền cho vai trò" @bind-Visible="showPermissionModal" OnOk="SavePermissions"
    OnCancel="CancelPermissionModal" Width="800">
    <div class="permission-assignment">
        <div class="permission-tree">
            @if (rolePermissionGroups.Any())
            {
                @foreach (var group in rolePermissionGroups)
                {
                    <div class="permission-group">
                        @RenderPermissionGroup(group)
                    </div>
                }
            }
            else
            {
                <div class="no-permissions">
                    <p>Chưa có quyền nào được gán cho vai trò này.</p>
                </div>
            }
        </div>
    </div>
</Modal>

@code {
    private List<RoleDTO> roles = new();
    private List<PermissionGroupDTO> rolePermissionGroups = new();
    private bool isLoading = true;
    private bool showRoleModal = false;
    private bool showPermissionModal = false;
    private bool isEdit = false;
    private CreateOrUpdateRoleDTO currentRole = new();
    private RoleDTO selectedRole = new();
    private List<Guid> selectedPermissionIds = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            roles = await RoleService.GetAllRolesAsync();
        }
        catch (Exception ex)
        {
            await MessageModalService.Error("Không thể tải dữ liệu!");
            Console.WriteLine($"Error loading roles: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowCreateModal()
    {
        isEdit = false;
        currentRole = new CreateOrUpdateRoleDTO { Status = 1 };
        showRoleModal = true;
    }

    private void ShowEditModal(RoleDTO role)
    {
        isEdit = true;
        currentRole = new CreateOrUpdateRoleDTO
        {
            Id = role.Id,
            Name = role.Name,
            Description = role.Description,
            Status = role.Status
        };
        showRoleModal = true;
    }

    private async Task SaveRole()
    {
        try
        {
            BaseResponse result;
            if (isEdit)
            {
                result = await RoleService.UpdateRoleAsync(currentRole);
            }
            else
            {
                result = await RoleService.CreateRoleAsync(currentRole);
            }

            if (result.ResponseStatus == BaseStatus.Success)
            {
                await MessageModalService.Success(result.Message);
                showRoleModal = false;
                await LoadData();
            }
            else
            {
                await MessageModalService.Error(result.Message);
            }
        }
        catch (Exception ex)
        {
            await MessageModalService.Error("Có lỗi xảy ra!");
            Console.WriteLine($"Error saving role: {ex.Message}");
        }
    }

    private void CancelRoleModal()
    {
        showRoleModal = false;
        currentRole = new CreateOrUpdateRoleDTO();
    }

    private async Task DeleteRole(RoleDTO role)
    {
        try
        {
            var result = await RoleService.DeleteRoleAsync(role.Id);
            if (result.ResponseStatus == BaseStatus.Success)
            {
                await MessageModalService.Success(result.Message);
                await LoadData();
            }
            else
            {
                await MessageModalService.Error(result.Message);
            }
        }
        catch (Exception ex)
        {
            await MessageModalService.Error("Có lỗi xảy ra!");
            Console.WriteLine($"Error deleting role: {ex.Message}");
        }
    }

    private async Task ShowPermissionModal(RoleDTO role)
    {
        selectedRole = role;
        rolePermissionGroups = await RoleService.GetRolePermissionsTreeAsync(role.Id);
        selectedPermissionIds = GetAllAssignedPermissionIds(rolePermissionGroups ?? new List<PermissionGroupDTO>()) ?? new
        List<Guid>();
        showPermissionModal = true;
    }

    private async Task SavePermissions()
    {
        try
        {
            var result = await RoleService.AssignPermissionsToRoleAsync(new AssignPermissionsToRoleDTO
            {
                RoleId = selectedRole.Id,
                PermissionIds = selectedPermissionIds ?? new List<Guid>()
            });

            if (result.ResponseStatus == BaseStatus.Success)
            {
                await MessageModalService.Success(result.Message);
                showPermissionModal = false;
                await LoadData();
            }
            else
            {
                await MessageModalService.Error(result.Message);
            }
        }
        catch (Exception ex)
        {
            await MessageModalService.Error("Có lỗi xảy ra!");
            Console.WriteLine($"Error saving permissions: {ex.Message}");
        }
    }

    private void CancelPermissionModal()
    {
        showPermissionModal = false;
        selectedRole = new RoleDTO();
        selectedPermissionIds?.Clear();
        rolePermissionGroups?.Clear();
    }

    private List<Guid> GetAllAssignedPermissionIds(List<PermissionGroupDTO> groups)
    {
        var ids = new List<Guid>();
        if (groups == null) return ids;

        foreach (var group in groups)
        {
            ids.AddRange(group.Permissions?.Where(p => p.IsAssigned).Select(p => p.Id) ?? new List<Guid>());
            ids.AddRange(GetAllAssignedPermissionIds(group.Children));
        }
        return ids;
    }

    private RenderFragment<PermissionGroupDTO> RenderPermissionGroup => (group) => @<div class="permission-group-item"
    style="margin-left: @(group.ParentId == null ? "0" : "20px")">
    <div class="group-header">
        <strong>@group.Name</strong>
        @if (!string.IsNullOrEmpty(group.Description))
                {
        <span class="group-description">- @group.Description</span>
                }
    </div>
@if (group.Permissions?.Any() == true)
    {
    <div class="permissions-list">
        @foreach (var permission in group.Permissions)
                {
        <div class="permission-item">
            <Checkbox Checked="@permission.IsAssigned"
                OnChange="@((bool isChecked) => TogglePermission(permission.Id, isChecked))">
                @permission.Name
            </Checkbox>
            @if (!string.IsNullOrEmpty(permission.Description))
                        {
            <span class="permission-desc">- @permission.Description</span>
                        }
        </div>
                }
    </div>
    }
@if (group.Children?.Any() == true)
{
        <div class="children-groups">
            @foreach (var child in group.Children)
            {
                @RenderPermissionGroup(child)
            }
        </div>
}
</div>;

private void TogglePermission(Guid permissionId, bool isChecked)
{
    if (isChecked)
    {
        if (!(selectedPermissionIds ?? new List<Guid>()).Contains(permissionId))
            (selectedPermissionIds ??= new List<Guid>()).Add(permissionId);
    }
    else
    {
        selectedPermissionIds?.Remove(permissionId);
    }

    // Update the IsAssigned property in the tree
    UpdatePermissionAssignedState(rolePermissionGroups ?? new List<PermissionGroupDTO>(), permissionId, isChecked);
}

private void UpdatePermissionAssignedState(List<PermissionGroupDTO> groups, Guid permissionId, bool isAssigned)
{
    if (groups == null) return;

    foreach (var group in groups)
    {
        var permission = group.Permissions?.FirstOrDefault(p => p.Id == permissionId);
        if (permission != null)
        {
            permission.IsAssigned = isAssigned;
            return;
        }

        // Recursively check children
        UpdatePermissionAssignedState(group.Children, permissionId, isAssigned);
    }
}
}

<style>
    .roles-container {
        padding: 24px;
    }

    .page-header {
        margin-bottom: 24px;
    }

    .page-subtitle {
        color: #666;
        margin-top: 8px;
    }

    .action-bar {
        margin-bottom: 24px;
    }

    .content-section {
        background: white;
        padding: 24px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .loading-section {
        text-align: center;
        padding: 48px;
    }

    .permission-tree {
        max-height: 500px;
        overflow-y: auto;
        border: 1px solid #f0f0f0;
        border-radius: 6px;
        padding: 16px;
    }

    .permission-group-item {
        margin-bottom: 16px;
        padding: 12px;
        border: 1px solid #e8e8e8;
        border-radius: 4px;
        background-color: #fafafa;
    }

    .group-header {
        margin-bottom: 8px;
        padding-bottom: 8px;
        border-bottom: 1px solid #e8e8e8;
        font-size: 14px;
    }

    .group-description {
        color: #666;
        font-weight: normal;
    }

    .permissions-list {
        margin-left: 16px;
        margin-top: 8px;
    }

    .permission-item {
        display: flex;
        align-items: center;
        margin-bottom: 6px;
        padding: 4px 0;
    }

    .permission-desc {
        margin-left: 8px;
        color: #666;
        font-size: 12px;
    }

    .children-groups {
        margin-top: 12px;
        margin-left: 16px;
    }

    .no-permissions {
        text-align: center;
        padding: 48px;
        color: #999;
    }
</style>
