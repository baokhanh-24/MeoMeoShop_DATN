@page "/manage-customer"
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using MeoMeo.Contract.DTOs
@using MeoMeo.Shared.IServices;
@using MeoMeo.Contract.Commons
@using MeoMeo.Domain.Commons.Enums
@using ButtonSize = AntDesign.ButtonSize
@using ButtonType = AntDesign.ButtonType
@using AntDesign
@inject MeoMeo.Shared.Utilities.MessageModalService MessageModalService
@rendermode InteractiveServer

<div class="d-flex justify-content-between">
    <Breadcrumb>
        <BreadcrumbItem Href="/">Trang chủ</BreadcrumbItem>
        <BreadcrumbItem Href="/manage-customer">Quản lý khách hàng</BreadcrumbItem>
    </Breadcrumb>
    <Button OnClick="addNewCustomer" Type="ButtonType.Primary" Class="mb-2">
        <i class="fas fa-plus"></i> Thêm mới
    </Button>
</div>

<div class="d-flex justify-content-end gap-3 mb-2">

    <div style="width: 200px">
        <Input AllowClear="true" OnClear="OnFilterChanged" @bind-Value="filter.FullNameFilter"
            Placeholder="Nhập theo tên" />
    </div>

    <div style="width: 150px">
        <Input AllowClear="true" OnClear="OnFilterChanged" @bind-Value="filter.PhoneNumberFilter"
            Placeholder="Nhập SĐT" />
    </div>

    <div style="width: 150px">
        <Input AllowClear="true" OnClear="OnFilterChanged" @bind-Value="filter.TaxCodeFilter"
            Placeholder="Nhập mã số thuế" />
    </div>

    <div style="width: 150px">
        <Input AllowClear="true" OnClear="OnFilterChanged" @bind-Value="filter.AddressFilter"
            Placeholder="Nhập địa chỉ" />
    </div>
    <div>
        <DatePicker Class="w-full" TValue="DateOnly ?" @bind-Value="filter.DateOfBirthFilter" />
    </div>
    <div style="width: 150px">
        <Select TItem="(ECustomerStatus Value, string Name)" TItemValue="ECustomerStatus ?" AllowClear
            DataSource="customerStatusList" @bind-Value="filter.StatusFilter" Placeholder="Chọn trạng thái"
            ItemValue="c => (ECustomerStatus?)c.Value" ItemLabel="c => c.Name">
        </Select>
    </div>
    <Tooltip Title="Tìm kiếm">
        <Button @onclick="() => OnFilterChanged()" Type="ButtonType.Primary" Shape="ButtonShape.Circle"
            Icon="@IconType.Outline.Search" />
    </Tooltip>
</div>
<Table DataSource="listOfData" TItem="CustomerDTO" Bordered TableLayout="fixed">
    <ChildContent Context="data">
        <Column TData="string" Title="Họ và tên">
            @data.Name
        </Column>

        <Column TData="string" Title="Mã KH">
            @data.Code
        </Column>

        <Column TData="string" Title="Số điện thoại">
            @data.PhoneNumber
        </Column>

        <Column TData="DateTime ?" Title="Ngày sinh">
            @data.DateOfBirth?.ToString("dd-MM-yyyy")
        </Column>

        <Column TData="string" Title="Mã số thuế">
            @data.TaxCode
        </Column>

        <Column TData="string" Title="Địa chỉ">
            @data.Address
        </Column>

        <Column TData="ECustomerStatus" Title="Trạng thái">
            @customerStatusList.FirstOrDefault(x => x.Value == data.Status).Name
        </Column>

        <ActionColumn Title="Thao tác" Class="text-end gap-2">
            <Tooltip Title="Xem chi tiết">
                <Button Size="ButtonSize.Small" @onclick="() => ViewCustomerDetail(data.Id)" Shape="ButtonShape.Circle">
                    <i class="fas fa-eye"></i>
                </Button>
            </Tooltip>

            <Tooltip Title="Sửa">
                <Button Size="ButtonSize.Small" @onclick="() => EditCustomer(data)" Shape="ButtonShape.Circle">
                    <i class="fas fa-pen"></i>
                </Button>
            </Tooltip>

            <Popconfirm Title=@($"Bạn có chắc muốn xóa khách hàng {data.Name}?")
                OnConfirm="() => DeleteCustomer(data.Id)" OkText="Đồng ý" CancelText="Hủy">
                <Tooltip Title="Xóa">
                    <Button Size="ButtonSize.Small" Danger Shape="ButtonShape.Circle">
                        <i class="fas fa-minus"></i>
                    </Button>
                </Tooltip>
            </Popconfirm>
        </ActionColumn>
    </ChildContent>
</Table>

<!-- Customer Modal -->
<Modal Title="@(isEditMode ? "Chỉnh sửa khách hàng" : "Thêm mới khách hàng")" Visible="@isModalVisible"
    OnOk="@HandleSave" OnCancel="@HandleCancel" ConfirmLoading="@isSaving" Width="600">
    <Form Model="@customerForm" Layout="@FormLayout.Vertical" ValidateOnChange="true">
        <FormItem Label="Họ và tên" Required>
            <Input @bind-Value="customerForm.Name" Placeholder="Nhập họ và tên" MaxLength="100" />
        </FormItem>

        <FormItem Label="Mã khách hàng" Required>
            <Input @bind-Value="customerForm.Code" Placeholder="Nhập mã khách hàng" MaxLength="10" />
        </FormItem>

        <FormItem Label="Số điện thoại" Required>
            <Input @bind-Value="customerForm.PhoneNumber" Placeholder="Nhập số điện thoại" MaxLength="12" />
        </FormItem>

        <FormItem Label="Ngày sinh">
            <DatePicker @bind-Value="customerForm.DateOfBirth" />
        </FormItem>

        <FormItem Label="Mã số thuế">
            <Input @bind-Value="customerForm.TaxCode" Placeholder="Nhập mã số thuế" MaxLength="14" />
        </FormItem>

        <FormItem Label="Địa chỉ" Required>
            <TextArea @bind-Value="customerForm.Address" Placeholder="Nhập địa chỉ" MaxLength="500" Rows="3" />
        </FormItem>

        <FormItem Label="Trạng thái" Required>
            <Select TItem="(ECustomerStatus Value, string Name)" TItemValue="ECustomerStatus"
                DataSource="customerStatusList" @bind-Value="customerForm.Status" Placeholder="Chọn trạng thái"
                ItemValue="c => c.Value" ItemLabel="c => c.Name">
            </Select>
        </FormItem>
    </Form>
</Modal>

@code {
    [Inject] private ICustomerClientService CustomerClientService { get; set; } = default!;
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    // Data
    List<CustomerDTO> listOfData = new();
    List<(ECustomerStatus Value, string Name)> customerStatusList = new();

    // Modal state
    bool isModalVisible = false;
    bool isEditMode = false;
    bool isSaving = false;
    CreateOrUpdateCustomerDTO customerForm = new();

    GetListCustomerRequestDTO filter = new GetListCustomerRequestDTO()
    {
        FullNameFilter = "",
        PhoneNumberFilter = "",
        CodeFilter = "",
        TaxCodeFilter = "",
        AddressFilter = "",
        StatusFilter = null,
        DateOfBirthFilter = null,
        PageIndex = 1,
        PageSize = 10
    };


    protected override async Task OnInitializedAsync()
    {
        customerStatusList = Enum.GetValues(typeof(ECustomerStatus))
        .Cast<ECustomerStatus>()
        .Select(x => (
        x,
        x.GetType().GetMember(x.ToString())
        .First()
        .GetCustomAttribute<DisplayAttribute>()?.Name ?? x.ToString()
        ))
        .ToList();

        await LoadDataAsync();
    }
    private async Task OnStatusChanged(ECustomerStatus? value)
    {
        filter.StatusFilter = value;
        filter.PageIndex = 1;
        await LoadDataAsync();
    }
    private async Task LoadDataAsync()
    {
        var response = await CustomerClientService.GetAllCustomersAsync(filter);
        listOfData = response.Items;
        await InvokeAsync(StateHasChanged);
    }

    async void OnFilterChanged()
    {
        await LoadDataAsync();
    }

    // Modal methods
    void addNewCustomer()
    {
        isEditMode = false;
        customerForm = new CreateOrUpdateCustomerDTO
        {
            Id = Guid.NewGuid(),
            Name = "",
            Code = "",
            PhoneNumber = "",
            DateOfBirth = null,
            TaxCode = "",
            Address = "",
            Status = ECustomerStatus.Enabled,
            UserId = Guid.Empty
        };
        isModalVisible = true;
    }

    void EditCustomer(CustomerDTO customer)
    {
        isEditMode = true;
        customerForm = new CreateOrUpdateCustomerDTO
        {
            Id = customer.Id,
            Name = customer.Name,
            Code = customer.Code,
            PhoneNumber = customer.PhoneNumber,
            DateOfBirth = customer.DateOfBirth,
            TaxCode = customer.TaxCode,
            Address = customer.Address,
            Status = customer.Status,
            UserId = customer.UserId
        };
        isModalVisible = true;
    }

    async Task HandleSave()
    {
        try
        {
            isSaving = true;

            // Validation
            if (string.IsNullOrWhiteSpace(customerForm.Name))
            {
                await MessageModalService.Error("Vui lòng nhập họ và tên!");
                return;
            }

            if (string.IsNullOrWhiteSpace(customerForm.Code))
            {
                await MessageModalService.Error("Vui lòng nhập mã khách hàng!");
                return;
            }

            if (string.IsNullOrWhiteSpace(customerForm.PhoneNumber))
            {
                await MessageModalService.Error("Vui lòng nhập số điện thoại!");
                return;
            }

            if (string.IsNullOrWhiteSpace(customerForm.Address))
            {
                await MessageModalService.Error("Vui lòng nhập địa chỉ!");
                return;
            }

            BaseResponse result;

            if (isEditMode)
            {
                result = await CustomerClientService.UpdateCustomersAsync(customerForm);
            }
            else
            {
                result = await CustomerClientService.CreateCustomersAsync(customerForm);
            }

            if (result.ResponseStatus == BaseStatus.Success)
            {
                await MessageModalService.Success(isEditMode ? "Cập nhật khách hàng thành công!" : "Thêm mới khách hàng thành công!");
                isModalVisible = false;
                await LoadDataAsync();
            }
            else
            {
                await MessageModalService.Error(result.Message);
            }
        }
        catch (Exception ex)
        {
            await MessageModalService.Error($"Có lỗi xảy ra: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    void HandleCancel()
    {
        isModalVisible = false;
        customerForm = new CreateOrUpdateCustomerDTO();
    }

    void ViewCustomerDetail(Guid customerId)
    {
        NavigationManager.NavigateTo($"/customer-detail/{customerId}");
    }

    async Task DeleteCustomer(Guid id)
    {
        try
        {
            var response = await CustomerClientService.DeleteCustomersAsync(id);
            if (response.ResponseStatus == BaseStatus.Success)
            {
                await MessageModalService.Success("Xóa khách hàng thành công!");
                await LoadDataAsync();
            }
            else
            {
                await MessageModalService.Error("Xóa khách hàng thất bại");
            }
        }
        catch (Exception ex)
        {
            await MessageModalService.Error($"Có lỗi xảy ra: {ex.Message}");
        }
    }
}
