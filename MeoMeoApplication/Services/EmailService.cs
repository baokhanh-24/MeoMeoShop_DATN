using MailKit.Net.Smtp;
using MailKit.Security;
using MimeKit;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System.Text;
using MeoMeo.Shared.IServices;

namespace MeoMeo.Application.Services
{
    public class EmailService : IEmailService
    {
        private readonly IConfiguration _configuration;
        private readonly ILogger<EmailService> _logger;
        private readonly EmailSettings _emailSettings;

        public EmailService(IConfiguration configuration, ILogger<EmailService> logger)
        {
            _configuration = configuration;
            _logger = logger;
            _emailSettings = _configuration.GetSection("EmailSettings").Get<EmailSettings>() ?? new EmailSettings();
        }

        public async Task<bool> SendEmailAsync(string toEmail, string subject, string body, bool isHtml = true)
        {
            try
            {
                var message = new MimeMessage();
                message.From.Add(new MailboxAddress(_emailSettings.FromName, _emailSettings.FromEmail));
                message.To.Add(new MailboxAddress("", toEmail));
                message.Subject = subject;

                if (isHtml)
                {
                    message.Body = new TextPart("html") { Text = body };
                }
                else
                {
                    message.Body = new TextPart("plain") { Text = body };
                }

                using var client = new SmtpClient();
                await client.ConnectAsync(_emailSettings.SmtpServer, _emailSettings.SmtpPort, _emailSettings.EnableSsl ? SecureSocketOptions.StartTls : SecureSocketOptions.None);

                if (!_emailSettings.UseDefaultCredentials)
                {
                    await client.AuthenticateAsync(_emailSettings.SmtpUsername, _emailSettings.SmtpPassword);
                }

                await client.SendAsync(message);
                await client.DisconnectAsync(true);

                _logger.LogInformation($"Email sent successfully to {toEmail}");
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Failed to send email to {toEmail}: {ex.Message}");
                return false;
            }
        }

        public async Task<bool> SendEmployeeNotificationAsync(string employeeEmail, string employeeName, string action)
        {
            var subject = $"Th√¥ng b√°o {action} nh√¢n vi√™n - MeoMeo Shop";
            var body = GetEmployeeNotificationTemplate(employeeName, action);
            return await SendEmailAsync(employeeEmail, subject, body);
        }

        public async Task<bool> SendPasswordResetEmailAsync(string userEmail, string resetToken, string userName)
        {
            var subject = "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - MeoMeo Shop";
            var resetLink = $"{_emailSettings.BaseUrl}/reset-password?token={resetToken}";
            var body = GetPasswordResetTemplate(userName, resetLink);
            return await SendEmailAsync(userEmail, subject, body);
        }

        public async Task<bool> SendNewPasswordEmailAsync(string userEmail, string newPassword, string userName)
        {
            var subject = "M·∫≠t kh·∫©u m·ªõi - MeoMeo Shop";
            var body = GetNewPasswordTemplate(userName, newPassword);
            return await SendEmailAsync(userEmail, subject, body);
        }

        public async Task<bool> SendOrderConfirmationEmailAsync(string customerEmail, string customerName, string orderNumber, decimal totalAmount)
        {
            var subject = $"X√°c nh·∫≠n ƒë∆°n h√†ng #{orderNumber} - MeoMeo Shop";
            var body = GetOrderConfirmationTemplate(customerName, orderNumber, totalAmount);
            return await SendEmailAsync(customerEmail, subject, body);
        }

        public async Task<bool> SendDailyReportEmailAsync(string adminEmail, string reportData)
        {
            var subject = $"B√°o c√°o h√†ng ng√†y - {DateTime.Now:dd/MM/yyyy} - MeoMeo Shop";
            var body = GetDailyReportTemplate(reportData);
            return await SendEmailAsync(adminEmail, subject, body);
        }

        public async Task<bool> SendWeeklyReportEmailAsync(string adminEmail, string reportData)
        {
            var subject = $"B√°o c√°o h√†ng tu·∫ßn - Tu·∫ßn {GetWeekOfYear(DateTime.Now)} - MeoMeo Shop";
            var body = GetWeeklyReportTemplate(reportData);
            return await SendEmailAsync(adminEmail, subject, body);
        }

        private string GetEmployeeNotificationTemplate(string employeeName, string action)
        {
            var actionText = action switch
            {
                "t·∫°o m·ªõi" => "ƒë∆∞·ª£c t·∫°o m·ªõi",
                "c·∫≠p nh·∫≠t" => "ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
                "x√≥a" => "b·ªã x√≥a",
                _ => action
            };

            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <title>Th√¥ng b√°o nh√¢n vi√™n</title>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0; }}
        .content {{ background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }}
        .highlight {{ color: #667eea; font-weight: bold; }}
        .footer {{ text-align: center; margin-top: 20px; color: #666; font-size: 12px; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üè¢ MeoMeo Shop</h1>
            <p>H·ªá th·ªëng qu·∫£n l√Ω nh√¢n vi√™n</p>
        </div>
        <div class='content'>
            <h2>Th√¥ng b√°o quan tr·ªçng</h2>
            <p>Xin ch√†o,</p>
            <p>Th√¥ng tin nh√¢n vi√™n <span class='highlight'>{employeeName}</span> ƒë√£ {actionText} trong h·ªá th·ªëng.</p>
            <p>Vui l√≤ng ki·ªÉm tra th√¥ng tin chi ti·∫øt trong h·ªá th·ªëng CMS.</p>
            <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© MeoMeo Shop</p>
        </div>
        <div class='footer'>
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng MeoMeo Shop</p>
        </div>
    </div>
</body>
</html>";
        }

        private string GetPasswordResetTemplate(string userName, string resetLink)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</title>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0; }}
        .content {{ background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }}
        .button {{ background: #667eea; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 20px 0; }}
        .footer {{ text-align: center; margin-top: 20px; color: #666; font-size: 12px; }}
        .warning {{ background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üîê MeoMeo Shop</h1>
            <p>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</p>
        </div>
        <div class='content'>
            <h2>Xin ch√†o {userName}!</h2>
            <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n.</p>
            <p>Nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p>
            <a href='{resetLink}' class='button'>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
            <div class='warning'>
                <strong>‚ö†Ô∏è L∆∞u √Ω:</strong>
                <ul>
                    <li>Link n√†y ch·ªâ c√≥ hi·ªáu l·ª±c trong 24 gi·ªù</li>
                    <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y</li>
                    <li>ƒê·ªÉ b·∫£o m·∫≠t, kh√¥ng chia s·∫ª link n√†y v·ªõi ai kh√°c</li>
                </ul>
            </div>
            <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© MeoMeo Shop</p>
        </div>
        <div class='footer'>
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng MeoMeo Shop</p>
        </div>
    </div>
</body>
</html>";
        }

        private string GetNewPasswordTemplate(string userName, string newPassword)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <title>M·∫≠t kh·∫©u m·ªõi</title>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0; }}
        .content {{ background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }}
        .password-box {{ background: white; padding: 20px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #667eea; text-align: center; }}
        .password-text {{ font-size: 24px; font-weight: bold; color: #667eea; letter-spacing: 2px; font-family: monospace; }}
        .highlight {{ color: #667eea; font-weight: bold; }}
        .footer {{ text-align: center; margin-top: 20px; color: #666; font-size: 12px; }}
        .warning {{ background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üîê MeoMeo Shop</h1>
            <p>M·∫≠t kh·∫©u m·ªõi</p>
        </div>
        <div class='content'>
            <h2>Xin ch√†o {userName}!</h2>
            <p>Ch√∫ng t√¥i ƒë√£ t·∫°o m·∫≠t kh·∫©u m·ªõi cho t√†i kho·∫£n c·ªßa b·∫°n.</p>
            
            <div class='password-box'>
                <h3>M·∫≠t kh·∫©u m·ªõi c·ªßa b·∫°n:</h3>
                <div class='password-text'>{newPassword}</div>
            </div>
            
            <div class='warning'>
                <strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong>
                <ul>
                    <li>H√£y ƒë·ªïi m·∫≠t kh·∫©u ngay sau khi ƒëƒÉng nh·∫≠p</li>
                    <li>Kh√¥ng chia s·∫ª m·∫≠t kh·∫©u v·ªõi ai kh√°c</li>
                    <li>ƒê·ªÉ b·∫£o m·∫≠t, h√£y s·ª≠ d·ª•ng m·∫≠t kh·∫©u m·∫°nh</li>
                    <li>L∆∞u m·∫≠t kh·∫©u ·ªü n∆°i an to√†n</li>
                </ul>
            </div>
            
            <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© MeoMeo Shop</p>
        </div>
        <div class='footer'>
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng MeoMeo Shop</p>
        </div>
    </div>
</body>
</html>";
        }

        private string GetOrderConfirmationTemplate(string customerName, string orderNumber, decimal totalAmount)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <title>X√°c nh·∫≠n ƒë∆°n h√†ng</title>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0; }}
        .content {{ background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }}
        .order-info {{ background: white; padding: 20px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #667eea; }}
        .highlight {{ color: #667eea; font-weight: bold; }}
        .footer {{ text-align: center; margin-top: 20px; color: #666; font-size: 12px; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üõçÔ∏è MeoMeo Shop</h1>
            <p>X√°c nh·∫≠n ƒë∆°n h√†ng</p>
        </div>
        <div class='content'>
            <h2>C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng!</h2>
            <p>Xin ch√†o <span class='highlight'>{customerName}</span>,</p>
            <p>Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c ƒë∆°n h√†ng c·ªßa b·∫°n v√† ƒëang x·ª≠ l√Ω.</p>
            
            <div class='order-info'>
                <h3>Th√¥ng tin ƒë∆°n h√†ng:</h3>
                <p><strong>M√£ ƒë∆°n h√†ng:</strong> <span class='highlight'>#{orderNumber}</span></p>
                <p><strong>T·ªïng ti·ªÅn:</strong> <span class='highlight'>{totalAmount:N0} VNƒê</span></p>
                <p><strong>Ng√†y ƒë·∫∑t:</strong> {DateTime.Now:dd/MM/yyyy HH:mm}</p>
            </div>

            <p>Ch√∫ng t√¥i s·∫Ω g·ª≠i th√¥ng tin v·∫≠n chuy·ªÉn ƒë·∫øn b·∫°n trong th·ªùi gian s·ªõm nh·∫•t.</p>
            <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© MeoMeo Shop</p>
        </div>
        <div class='footer'>
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng MeoMeo Shop</p>
        </div>
    </div>
</body>
</html>";
        }

        private string GetDailyReportTemplate(string reportData)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <title>B√°o c√°o h√†ng ng√†y</title>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 800px; margin: 0 auto; padding: 20px; }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0; }}
        .content {{ background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }}
        .report-section {{ background: white; padding: 20px; border-radius: 5px; margin: 20px 0; }}
        .highlight {{ color: #667eea; font-weight: bold; }}
        .footer {{ text-align: center; margin-top: 20px; color: #666; font-size: 12px; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üìä MeoMeo Shop</h1>
            <p>B√°o c√°o h√†ng ng√†y - {DateTime.Now:dd/MM/yyyy}</p>
        </div>
        <div class='content'>
            <h2>T·ªïng quan ho·∫°t ƒë·ªông ng√†y</h2>
            <div class='report-section'>
                <h3>üìà Th·ªëng k√™ ch√≠nh</h3>
                <pre style='white-space: pre-wrap; font-family: monospace;'>{reportData}</pre>
            </div>
            <p>Tr√¢n tr·ªçng,<br>H·ªá th·ªëng b√°o c√°o MeoMeo Shop</p>
        </div>
        <div class='footer'>
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng MeoMeo Shop</p>
        </div>
    </div>
</body>
</html>";
        }

        private string GetWeeklyReportTemplate(string reportData)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <title>B√°o c√°o h√†ng tu·∫ßn</title>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 800px; margin: 0 auto; padding: 20px; }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0; }}
        .content {{ background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }}
        .report-section {{ background: white; padding: 20px; border-radius: 5px; margin: 20px 0; }}
        .highlight {{ color: #667eea; font-weight: bold; }}
        .footer {{ text-align: center; margin-top: 20px; color: #666; font-size: 12px; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üìä MeoMeo Shop</h1>
            <p>B√°o c√°o h√†ng tu·∫ßn - Tu·∫ßn {GetWeekOfYear(DateTime.Now)}</p>
        </div>
        <div class='content'>
            <h2>T·ªïng quan ho·∫°t ƒë·ªông tu·∫ßn</h2>
            <div class='report-section'>
                <h3>üìà Th·ªëng k√™ t·ªïng h·ª£p</h3>
                <pre style='white-space: pre-wrap; font-family: monospace;'>{reportData}</pre>
            </div>
            <p>Tr√¢n tr·ªçng,<br>H·ªá th·ªëng b√°o c√°o MeoMeo Shop</p>
        </div>
        <div class='footer'>
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng MeoMeo Shop</p>
        </div>
    </div>
</body>
</html>";
        }

        public async Task<bool> SendReportEmailWithAttachmentAsync(string adminEmail, string subject, string body, byte[] attachmentData, string attachmentFileName)
        {
            try
            {
                var message = new MimeMessage();
                message.From.Add(new MailboxAddress(_emailSettings.FromName, _emailSettings.FromEmail));
                message.To.Add(new MailboxAddress("", adminEmail));
                message.Subject = subject;

                // Create multipart message
                var multipart = new Multipart("mixed");

                // Add HTML body
                var htmlBody = new TextPart("html") { Text = GetReportEmailTemplate(body) };
                multipart.Add(htmlBody);

                // Add Excel attachment
                var attachment = new MimePart("application", "vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                {
                    Content = new MimeContent(new MemoryStream(attachmentData)),
                    ContentDisposition = new ContentDisposition(ContentDisposition.Attachment),
                    ContentTransferEncoding = ContentEncoding.Base64,
                    FileName = attachmentFileName
                };
                multipart.Add(attachment);

                message.Body = multipart;

                using var client = new SmtpClient();
                await client.ConnectAsync(_emailSettings.SmtpServer, _emailSettings.SmtpPort, _emailSettings.EnableSsl ? SecureSocketOptions.StartTls : SecureSocketOptions.None);

                if (!_emailSettings.UseDefaultCredentials)
                {
                    await client.AuthenticateAsync(_emailSettings.SmtpUsername, _emailSettings.SmtpPassword);
                }

                await client.SendAsync(message);
                await client.DisconnectAsync(true);

                _logger.LogInformation($"Report email with attachment sent successfully to {adminEmail}");
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Failed to send report email with attachment to {adminEmail}: {ex.Message}");
                return false;
            }
        }

        private string GetReportEmailTemplate(string reportContent)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <title>B√°o c√°o h·ªá th·ªëng</title>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 800px; margin: 0 auto; padding: 20px; }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0; }}
        .content {{ background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }}
        .report-section {{ background: white; padding: 20px; border-radius: 5px; margin: 20px 0; }}
        .highlight {{ color: #667eea; font-weight: bold; }}
        .footer {{ text-align: center; margin-top: 20px; color: #666; font-size: 12px; }}
        .attachment-info {{ background: #e8f4fd; padding: 15px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #667eea; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üìä MeoMeo Shop</h1>
            <p>B√°o c√°o h·ªá th·ªëng</p>
        </div>
        <div class='content'>
            <div class='attachment-info'>
                <h3>üìé File ƒë√≠nh k√®m</h3>
                <p>B√°o c√°o chi ti·∫øt ƒë√£ ƒë∆∞·ª£c ƒë√≠nh k√®m trong file Excel. Vui l√≤ng m·ªü file ƒë·ªÉ xem th√¥ng tin ƒë·∫ßy ƒë·ªß.</p>
            </div>
            
            <div class='report-section'>
                <h3>üìà T√≥m t·∫Øt</h3>
                <p>{reportContent}</p>
            </div>
            
            <p>Tr√¢n tr·ªçng,<br>H·ªá th·ªëng b√°o c√°o MeoMeo Shop</p>
        </div>
        <div class='footer'>
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng MeoMeo Shop</p>
        </div>
    </div>
</body>
</html>";
        }
        private int GetWeekOfYear(DateTime date)
        {
            var culture = System.Globalization.CultureInfo.CurrentCulture;
            return culture.Calendar.GetWeekOfYear(date, System.Globalization.CalendarWeekRule.FirstDay, DayOfWeek.Monday);
        }
    }

    public class EmailSettings
    {
        public string SmtpServer { get; set; } = "smtp.gmail.com";
        public int SmtpPort { get; set; } = 587;
        public string SmtpUsername { get; set; } = "";
        public string SmtpPassword { get; set; } = "";
        public string FromEmail { get; set; } = "";
        public string FromName { get; set; } = "";
        public bool EnableSsl { get; set; } = true;
        public bool UseDefaultCredentials { get; set; } = false;
        public string BaseUrl { get; set; } = "http://localhost:3000";
    }
}
