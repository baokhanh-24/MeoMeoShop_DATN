@page "/orders"
@using AntDesign
@using MeoMeo.Shared.IServices
@using MeoMeo.Contract.DTOs.Order
@using MeoMeo.Contract.DTOs.Order.Return
@using MeoMeo.Contract.Commons
@using MeoMeo.Contract.DTOs
@using MeoMeo.Contract.DTOs.VietQR
@using MeoMeo.PORTAL.Components.Pages.ProfilePages
@using System.IO
@using BankDTO = MeoMeo.Contract.DTOs.VietQR.BankDTO
@inject NavigationManager Navigation
@inject MeoMeo.Shared.Utilities.MessageModalService MessageModalService
@inject IOrderClientService OrderClient
@inject ICartClientService CartClient
@inject IOrderReturnClientService OrderReturnClient
@inject IConfiguration Configuration
@inject IVietQRClientService VietQRClientService
@layout ProfileLayout
<div >

            <div>
                <div class="d-flex justify-content-between" style="justify-items: center;">
                    <div class="title">Đơn hàng của tôi</div>
                    <div class="search-container">
                        <Search Placeholder="Tìm theo mã đơn hàng"
                                @bind-Value="SearchValue"
                                OnSearch="OnSearch"
                                EnterButton="true"
                                Loading="IsLoading" />
                    </div>
                </div>

                <div class="status-container" style="display: flex; gap:16px; margin-top: 10px; width: 100%; background-color: #FFFFFF; border-top-left-radius: 8px; border-top-right-radius: 8px; overflow-x: auto;">
                    @foreach (var tab in StatusTabs)
                    {
                        <div
                             style="@GetTabStyles(tab)"
                             @onclick="() => OnTabClick(tab)">
                            @tab.Label (@GetStatusCount(tab.Value))
                        </div>
                    }
                </div>

                <div style="margin-top: 10px; display: flex; flex-direction: column; gap: 10px; justify-content: space-between;">
                    @if (!IsLoading)
                    {
                        @if (Orders.Count == 0)
                        {
                            <div class="row">
                                <div class="col-12">
                                    <div class="space-coverage text-center">
                                        <img class="empty-cart" src="/images/Cart.svg" alt="" />
                                        <div class="empty-text mt-4">Bạn chưa có đơn hàng nào.</div>
                                        <div class="d-flex justify-content-center">
                                            <button class="shopping-now mt-1" @onclick="@(() => Navigation.NavigateTo("/"))">Mua sắm ngay</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            @foreach (var order in Orders)
                            {
                                <div class="order-card">
                                    <!-- Header đơn hàng -->
                                    <div class="order-header">
                                        <div class="order-info">
                                            <div class="order-code">
                                                <i class="fas fa-receipt"></i>
                                                <span><b>Mã đơn:</b> @order.Code</span>
                                            </div>
                                            <div class="order-date">
                                                <i class="fas fa-calendar-alt"></i>
                                                <span><b>Ngày tạo:</b> @order.CreationTime.ToString("dd/MM/yyyy HH:mm")</span>
                                            </div>
                                            @if (order.DeliveryDate.HasValue)
                                            {
                                                <div class="delivery-date">
                                                    <i class="fas fa-truck"></i>
                                                    <span><b>Giao hàng dự kiến:</b> @order.DeliveryDate.Value.ToString("dd/MM/yyyy")</span>
                                                </div>
                                            }
                                            @if (order.Status == Domain.Commons.Enums.EOrderStatus.Canceled && !string.IsNullOrEmpty(order.Reason))
                                            {
                                                <div class="cancel-reason">
                                                    <i class="fas fa-times-circle text-danger"></i>
                                                    <span><b>Lý do hủy:</b> @order.Reason</span>
                                                </div>
                                            }
                                        </div>
                                        <div class="order-status">
                                            <Tag Color="@GetStatusColor(order.Status)">
                                                @GetStatusDisplayName(order.Status)
                                            </Tag>
                                        </div>
                                    </div>

                                    <!-- Thông tin thanh toán -->
                                    <div class="payment-info">
                                        <h6 class="payment-title">
                                            <i class="fas fa-credit-card"></i>
                                            Hình thức thanh toán
                                        </h6>
                                        <div class="payment-details">
                                            <div><b>Phương thức:</b> @GetPaymentMethodName(order.PaymentMethod)</div>
                                            @if (order.Status == Domain.Commons.Enums.EOrderStatus.Completed && order.ReceiveDate.HasValue)
                                            {
                                                <div><b>Ngày nhận hàng:</b> @order.ReceiveDate.Value.ToString("dd/MM/yyyy HH:mm")</div>
                                            }
                                        </div>
                                    </div>

                                    <!-- Thông tin sản phẩm -->
                                    <div class="order-products">
                                        <h6 class="products-title">
                                            <i class="fas fa-box"></i>
                                            Sản phẩm đã đặt
                                        </h6>
                                        @foreach (var item in order.OrderDetails)
                                        {
                                            <div class="product-item">
                                                <div class="product-image">
                                                    <Image Width="60" Height="60" 
                                                           Src="@(backendUrl + "/" + item.Image)" 
                                                          Fallback="@(backendUrl + "/Images/fallback.jpeg")"
                                                           PreviewVisible="false"
                                                           Class="product-img" />
                                                </div>
                                                <div class="product-info">
                                                    <div class="product-name">@item.ProductName</div>
                                                    <div class="product-sku">SKU: @item.Sku</div>
                                                    <div class="product-variant">
                                                        @if (!string.IsNullOrEmpty(item.SizeName))
                                                        {
                                                            <span class="size-badge">Size: @item.SizeName</span>
                                                        }
                                                        @if (!string.IsNullOrEmpty(item.ColourName))
                                                        {
                                                            <span class="color-badge">Màu: @item.ColourName</span>
                                                        }
                                                    </div>
                                                </div>
                                                <div class="product-quantity">
                                                    <span class="quantity-badge">x @(item.Quantity)</span>
                                                </div>
                                                <div class="product-price">
                                                    <div class="price-original">@item.Price.ToString("N0") đ</div>
                                                    @if (item.Discount > 0)
                                                    {
                                                        <div class="price-discount">-@item.Discount.ToString("N0") đ</div>
                                                    }
                                                </div>
                                                <div class="product-total">
                                                    <div class="total-label">Tổng:</div>
                                                    <div class="total-amount">@item.GrandTotal.ToString("N0") đ</div>
                                                </div>
                                            </div>
                                        }
                                    </div>

                                    <!-- Thông tin giao hàng -->
                                    @if (!string.IsNullOrEmpty(order.CustomerName) || !string.IsNullOrEmpty(order.CustomerPhoneNumber) || !string.IsNullOrEmpty(order.DeliveryAddress))
                                    {
                                        <div class="delivery-info">
                                            <h6 class="delivery-title">
                                                <i class="fas fa-map-marker-alt"></i>
                                                Thông tin giao hàng
                                            </h6>
                                            <div class="delivery-details">
                                                <div><b>Người nhận:</b> @order.CustomerName</div>
                                                <div><b>Số điện thoại:</b> @order.CustomerPhoneNumber</div>
                                                <div><b>Địa chỉ:</b> @order.DeliveryAddress</div>
                                            </div>
                                        </div>
                                    }

                                    <!-- Tổng kết đơn hàng -->
                                    <div class="order-summary">
                                        <div class="summary-row">
                                            <span>Tổng tiền sản phẩm:</span>
                                            <span>@order.TotalPrice.ToString("N0") đ</span>
                                        </div>
                                        @if (order.DiscountPrice > 0)
                                        {
                                            <div class="summary-row discount">
                                                <span>Giảm giá:</span>
                                                <span>-@order.DiscountPrice.Value.ToString("N0") đ</span>
                                            </div>
                                        }
                                        @if (order.ShippingFee > 0)
                                        {
                                            <div class="summary-row">
                                                <span>Phí vận chuyển:</span>
                                                <span>@order.ShippingFee.Value.ToString("N0") đ</span>
                                            </div>
                                        }
                                        <div class="summary-row total">
                                            <span><b>Tổng thanh toán:</b></span>
                                            <span><b>@((order.TotalPrice - (order.DiscountPrice ?? 0) + (order.ShippingFee ?? 0)).ToString("N0")) đ</b></span>
                                        </div>
                                    </div>

                                    <!-- Thông tin hoàn hàng -->
                                    @if (order.OrderReturn != null)
                                    {
                                        <div class="order-return-info">
                                            <h6 class="return-title">
                                                <i class="fas fa-undo"></i>
                                                Thông tin hoàn hàng
                                            </h6>
                                            <div class="return-details">
                                                <div class="d-flex justify-content-between">
                                                    <div class="left-content">
                                                        <strong>Mã hoàn hàng:</strong> @order.OrderReturn.Code
                                                    </div>
                                                    <div class="right-content">
                                                        <span class="badge bg-info">@order.OrderReturn.StatusDisplayName</span>
                                                        <Button Size="@AntDesign.ButtonSize.Small" 
                                                                Type="@AntDesign.ButtonType.Primary" 
                                                                OnClick="@(() => ShowOrderReturnDialog(order.OrderReturn))"
                                                                Class="ms-2">
                                                            <i class="fas fa-eye"></i> Xem chi tiết
                                                        </Button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }

                                    <!-- Nút thao tác -->
                                    <div class="order-actions">
                                        @if (order.Status == Domain.Commons.Enums.EOrderStatus.Pending)
                                        {
                                            <Button Type="@AntDesign.ButtonType.Default" 
                                                    Size="@AntDesign.ButtonSize.Small" 
                                                    OnClick="@(() => OpenCancelModal(order))"
                                                    Icon="close-circle">
                                                Hủy đơn
                                            </Button>
                                        }
                                        @if (order.Status == Domain.Commons.Enums.EOrderStatus.Completed)
                                        {
                                            <Button Type="@AntDesign.ButtonType.Primary" 
                                                    Size="@AntDesign.ButtonSize.Small" 
                                                    OnClick="@(() => ReorderProducts(order))"
                                                    Icon="shopping-cart"
                                                    Loading="@(ReorderingOrderId == order.Id)">
                                                Mua lại
                                            </Button>
                                            <Button Type="@AntDesign.ButtonType.Default" 
                                                    Size="@AntDesign.ButtonSize.Small" 
                                                    OnClick="@(() => OpenReturnModal(order))"
                                                    Icon="rollback"
                                                    Loading="@(CheckingReturnOrderId == order.Id)">
                                                Hoàn trả
                                            </Button>
                                        }
                                        <Button Type="@AntDesign.ButtonType.Primary" 
                                                Size="@AntDesign.ButtonSize.Small" 
                                                OnClick="@(() => Navigation.NavigateTo($"/order/{order.Id}"))"
                                                Icon="eye">
                                            Xem chi tiết
                                        </Button>
                                    </div>
                                </div>
                            }
                        }
                    }
                    else
                    {
                        <Skeleton Active/>
                        <Skeleton Active/>
                    }
                </div>

                @if (Orders.Count < TotalRecords)
                {
                    <div class="text-center mt-3 mb-3">
                        <i class="fas fa-chevron-down"></i>
                        <span style="cursor: pointer; font-size: 14px;" class="view-more" @onclick="LoadMore">
                            Xem thêm @(TotalRecords - Orders.Count) đơn hàng
                        </span>
                    </div>
                }
            </div>
</div>

<!-- Modal hủy đơn hàng -->
<Modal Title="Hủy đơn hàng" 
       Visible="@ShowCancelModal" 
       OnOk="ConfirmCancelOrder" 
       OnCancel="@(() => ShowCancelModal = false)">
    <div class="cancel-order-modal">
        <div class="warning-message">
            <i class="fas fa-exclamation-triangle text-warning"></i>
            <span>Bạn có chắc chắn muốn hủy đơn hàng <strong>@SelectedOrder?.Code</strong>?</span>
        </div>
        <div class="form-group mt-3">
            <label><b>Lý do hủy đơn hàng:</b></label>
            <TextArea @bind-Value="CancelReason" 
                     Placeholder="Nhập lý do hủy đơn hàng (bắt buộc)"
                     Rows="3"
                     MaxLength="500" />
        </div>
        <div class="note mt-2">
            <small class="text-muted">
                <i class="fas fa-info-circle"></i>
                Lưu ý: Đơn hàng đã hủy không thể khôi phục lại.
            </small>
        </div>
    </div>
</Modal>

<!-- Modal hoàn trả hàng -->
<Modal Title="Hoàn trả hàng" 
       Visible="@ShowReturnModal" 
       OnCancel="@(() => ShowReturnModal = false)"
       Width="800"
       MaxBodyHeight="600"
       Footer="null">
    <div class="return-order-modal">
        @if (AvailableReturnItems?.Any() == true)
        {
            <div class="return-info">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i>
                    <span>Chọn sản phẩm và số lượng muốn hoàn trả. Bạn có thể hoàn trả từng phần hoặc toàn bộ đơn hàng.</span>
                </div>
            </div>

            <div class="return-items">
                <h6><i class="fas fa-box"></i> Sản phẩm có thể hoàn trả</h6>
                @foreach (var item in AvailableReturnItems)
                {
                    <div class="return-item">
                        <div class="item-info">
                            <Image Width="50" Height="50" 
                                   Src="@(backendUrl + "/" + item.Image)" 
                                   Fallback="@(backendUrl + "/Images/fallback.jpeg")"
                                   PreviewVisible="false" />
                            <div class="item-details">
                                <div class="item-name">@item.ProductName</div>
                                <div class="item-sku">SKU: @item.Sku</div>
                                <div class="item-price">@item.UnitPrice.ToString("N0") đ</div>
                            </div>
                        </div>
                        <div class="item-quantity">
                            <span>Có thể hoàn: @item.AvailableQuantity</span>
                            <AntDesign.InputNumber @bind-Value="item.Quantity" 
                                                   Min="0" 
                                                   Max="item.AvailableQuantity"
                                                   Style="width: 100px; margin-left: 10px;" />
                        </div>
                        <div class="item-reason">
                            <TextArea @bind-Value="item.Reason" 
                                     Placeholder="Lý do hoàn trả sản phẩm này (tùy chọn)"
                                     Rows="2"
                                     MaxLength="200"></TextArea>
                        </div>
                    </div>
                }
            </div>

            <div class="return-details">
                <div class="form-group">
                    <label><b>Lý do hoàn trả chung:</b></label>
                    <TextArea @bind-Value="ReturnReason" 
                             Placeholder="Nhập lý do hoàn trả (bắt buộc)"
                             Rows="3"
                             MaxLength="500"></TextArea>
                </div>

                <!-- File upload section -->
                <div class="form-group">
                    <label><b>Đính kèm ảnh/video minh chứng (bắt buộc):</b></label>
                    <div class="file-upload-container" style="position: relative;">
                        <div class="file-upload-area @(IsProcessingReturnFiles ? "processing" : "")"
                             style="cursor: pointer; border: 2px dashed #d9d9d9; padding: 20px; text-align: center; border-radius: 8px; background: #fafafa;">
                            @if (IsProcessingReturnFiles)
                            {
                                <div style="display: flex; flex-direction: column; align-items: center;">
                                    <Spin Size="SpinSize.Large"/>
                                    <div style="margin-top: 8px; color: #666;">Đang xử lý file...</div>
                                </div>
                            }
                            else
                            {
                                <Icon Type="@IconType.Outline.Upload" Style="font-size: 24px; color: #999;"/>
                                <div style="margin-top: 8px; color: #666;">Tải ảnh và video minh chứng</div>
                                <div style="font-size: 12px; color: #999;">Tối đa 10 ảnh + 2 video (Click để chọn file)</div>
                            }
                        </div>

                        <InputFile @ref="FileInputReturn" OnChange="OnReturnFileSelected" multiple accept="image/*,video/*"
                                   disabled="@IsProcessingReturnFiles" style="
                                   position: absolute;
                                   top: 0;
                                   left: 0;
                                   width: 100%;
                                   height: 100%;
                                   opacity: 0;
                                   cursor: pointer;
                               "/>
                    </div>

                    @if (ReturnUploads?.Any() == true)
                    {
                        <div class="file-preview-container" style="margin-top: 8px;">
                            @for (int i = 0; i < ReturnUploads.Count; i++)
                            {
                                var index = i;
                                var file = ReturnUploads[i];
                                <div class="file-preview-item" style="display:inline-block; position: relative; margin: 4px;">
                                    @if (file.ContentType.StartsWith("image/"))
                                    {
                                        <img src="@GetReturnFilePreviewUrl(file)" 
                                             style="width: 80px; height: 80px; object-fit: cover; border-radius: 6px; border: 1px solid #e8e8e8;"
                                             alt="@file.FileName" />
                                    }
                                    else if (file.ContentType.StartsWith("video/"))
                                    {
                                        <div style="width: 80px; height: 80px; background: #f0f0f0; border-radius: 6px; border: 1px solid #e8e8e8; display: flex; align-items: center; justify-content: center;">
                                            <Icon Type="@IconType.Outline.PlayCircle" Style="font-size: 24px; color: #666;" />
                                        </div>
                                    }
                                    <button type="button" @onclick="() => RemoveReturnFile(index)"
                                            style="position: absolute; top: -8px; right: -8px; background: #ff4d4f; color: white; border: none; border-radius: 50%; width: 20px; height: 20px; cursor: pointer; display: flex; align-items: center; justify-content: center; font-size: 12px;">
                                        ×
                                    </button>
                                    <div style="font-size: 10px; color: #666; margin-top: 2px; text-align: center; max-width: 80px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                        @file.FileName
                                    </div>
                                </div>
                            }
                        </div>
                        <div style="margin-top: 8px; font-size: 12px; color: #666;">
                            Đã tải: @(ReturnUploads.Count(x => x.ContentType.StartsWith("image/"))) ảnh, @(ReturnUploads.Count(x => x.ContentType.StartsWith("video/"))) video
                        </div>
                    }
                </div>

                <div class="form-group">
                    <label><b>Phương thức hoàn tiền:</b></label>
                    <Select TItem="RefundMethodOption" TItemValue="int" @bind-Value="SelectedRefundMethod" 
                            DataSource="RefundMethodOptions" ValueName="Value" LabelName="Label"
                            Placeholder="Chọn phương thức hoàn tiền..." Style="width: 100%;">
                    </Select>
                </div>

                @if (SelectedRefundMethod == (int)Domain.Commons.Enums.ERefundMethod.BankTransfer)
                {
                    <div class="bank-info">
                        <div class="form-group">
                            <label>Chọn ngân hàng:</label>
                            <Select TItem="BankDTO" TItemValue="int?" @bind-Value="SelectedBankId" 
                                    DataSource="Banks" ValueName="Id" LabelName="Name"
                                    Placeholder="Chọn ngân hàng..." 
                                    Style="width: 100%;"
                                    Loading="@IsLoadingBanks"
                                    OnSelectedItemChanged="OnBankSelected">
                                <ItemTemplate  Context="bank">
                                    <div style="display: flex; align-items: center; gap: 8px;">
                                        <img src="@((bank as BankDTO)?.Logo)" 
                                             alt="@((bank as BankDTO)?.ShortName)" 
                                             style="width: 56px; height: 56px; object-fit: contain;" />
                                        <span>@((bank as BankDTO)?.Name)</span>
                                    </div>
                                </ItemTemplate>
                            </Select>
                        </div>
                        <div class="form-group">
                            <label>Tên chủ tài khoản:</label>
                            <Input @bind-Value="BankAccountName" Placeholder="Tên chủ tài khoản" />
                        </div>
                        <div class="form-group">
                            <label>Số tài khoản:</label>
                            <Input @bind-Value="BankAccountNumber" Placeholder="Số tài khoản ngân hàng" />
                        </div>
                        @if (SelectedBank != null)
                        {
                            <div class="bank-details">
                                <div class="bank-logo">
                                    <img src="@SelectedBank.Logo" alt="@SelectedBank.ShortName" style="width: 40px; height: 40px; object-fit: contain;" />
                                </div>
                                <div class="bank-info-text">
                                    <div><strong>@SelectedBank.Name</strong></div>
                                    <div>Mã ngân hàng: @SelectedBank.Bin</div>
                                    <div>Tên viết tắt: @SelectedBank.ShortName</div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else if ( SelectedRefundMethod == (int)Domain.Commons.Enums.ERefundMethod.InStore)
                {
                    <div class="contact-info">
                        <div class="form-group">
                            <label>Tên người liên hệ:</label>
                            <Input @bind-Value="ContactName" Placeholder="Tên người nhận" />
                        </div>
                        <div class="form-group">
                            <label>Số điện thoại:</label>
                            <Input @bind-Value="ContactPhone" Placeholder="Số điện thoại liên hệ" />
                        </div>
                    </div>
                }
            </div>

            <div class="return-summary">
                <div class="summary-info">
                    <div>Tổng sản phẩm hoàn trả: <strong>@GetSelectedItemCount()</strong></div>
                    <div>Số tiền dự kiến hoàn: <strong>@GetEstimatedRefund().ToString("N0") đ</strong></div>
                </div>
                <div class="return-note">
                    <small class="text-muted">
                        <i class="fas fa-info-circle"></i>
                        Số tiền thực tế hoàn trả sẽ được xác nhận sau khi xử lý yêu cầu.
                    </small>
                </div>
            </div>

            <div class="modal-actions">
                <Button Type="@AntDesign.ButtonType.Default" OnClick="@(() => ShowReturnModal = false)">
                    Hủy
                </Button>
                <Button Type="@AntDesign.ButtonType.Primary" 
                        OnClick="SubmitReturn" 
                        Loading="@IsSubmittingReturn"
                        Disabled="@(!CanSubmitReturn())">
                    Gửi yêu cầu hoàn trả
                </Button>
            </div>
        }
        else
        {
            <div class="no-return-items">
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <span>Đơn hàng này không thể hoàn trả hoặc đã hết thời hạn hoàn trả.</span>
                </div>
            </div>
        }
    </div>
</Modal>

<!-- Order Return Dialog -->
<Modal Title="Chi tiết đơn hoàn hàng" 
       Visible="@orderReturnDialogVisible"
       OnCancel="@(() => orderReturnDialogVisible = false)"
       Footer="null"
       Width="800">
    @if (selectedOrderReturn != null)
    {
                <div class="order-return-detail">
                    <!-- Basic Info -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="info-item">
                                <label>Mã đơn hoàn hàng:</label>
                                <span class="value">@selectedOrderReturn.Code</span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-item">
                                <label>Trạng thái:</label>
                                <span class="badge bg-info">@selectedOrderReturn.StatusDisplayName</span>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="info-item">
                                <label>Lý do hoàn hàng:</label>
                                <span class="value">@selectedOrderReturn.Reason</span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-item">
                                <label>Phương thức hoàn tiền:</label>
                                <span class="value">@selectedOrderReturn.RefundMethodDisplayName</span>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="info-item">
                                <label>Số tiền hoàn:</label>
                                <span class="value text-success fw-bold">@selectedOrderReturn.TotalRefundAmount.ToString("N0") đ</span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-item">
                                <label>Số lượng sản phẩm:</label>
                                <span class="value">@selectedOrderReturn.TotalItemCount</span>
                            </div>
                        </div>
                    </div>

                    <!-- Products Returned -->
                    @if (selectedOrderReturn.Items != null && selectedOrderReturn.Items.Any())
                    {
                                <div class="mb-3">
                                    <h6>Sản phẩm hoàn trả</h6>
                                    <div class="table-responsive">
                                        <table class="table table-sm table-bordered">
                                            <thead class="table-light">
                                                <tr>
                                                    <th>Sản phẩm</th>
                                                    <th>Size</th>
                                                    <th>Màu sắc</th>
                                                    <th>SKU</th>
                                                    <th>Số lượng</th>
                                                    <th>Đơn giá</th>
                                                    <th>Thành tiền</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var item in selectedOrderReturn.Items)
                                                {
                                                            <tr>
                                                                <td>
                                                                    <div class="d-flex align-items-center">
                                                                        @if (!string.IsNullOrEmpty(item.ImageUrl))
                                                                        {
                                                                                    <Image Src="@(backendUrl + "/" + item.ImageUrl)" 
                                                                                           Width="40" 
                                                                                           Height="40" 
                                                                                           Class="me-2 rounded"
                                                                                           Preview="true"/>
                                                                        }
                                                                        <span>@item.ProductName</span>
                                                                    </div>
                                                                </td>
                                                                <td>@item.SizeName</td>
                                                                <td>@item.ColourName</td>
                                                                <td>@item.Sku</td>
                                                                <td class="text-center">@item.Quantity</td>
                                                                <td class="text-end">@item.UnitPrice.ToString("N0") đ</td>
                                                                <td class="text-end fw-bold">@item.TotalPrice.ToString("N0") đ</td>
                                                            </tr>
                                                }
                                            </tbody>
                                            <tfoot class="table-light">
                                                <tr>
                                                    <td colspan="6" class="text-end fw-bold">Tổng cộng:</td>
                                                    <td class="text-end fw-bold text-success">@selectedOrderReturn.TotalRefundAmount.ToString("N0") đ</td>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>
                                </div>
                    }

                    <!-- Bank Information -->
                    @if (selectedOrderReturn.BankInfo != null && selectedOrderReturn.RefundMethod == Domain.Commons.Enums.ERefundMethod.BankTransfer)
                    {
                                <div class="mb-3">
                                    <h6>Thông tin ngân hàng</h6>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="info-item">
                                                <label>Tên ngân hàng:</label>
                                                <span class="value">@selectedOrderReturn.BankInfo.BankName</span>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="info-item">
                                                <label>Số tài khoản:</label>
                                                <span class="value fw-bold">@selectedOrderReturn.BankInfo.AccountNumber</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="info-item">
                                                <label>Tên chủ tài khoản:</label>
                                                <span class="value">@selectedOrderReturn.BankInfo.AccountHolderName</span>
                                            </div>
                                        </div>
                                        @if (!string.IsNullOrEmpty(selectedOrderReturn.BankInfo.BranchName))
                                        {
                                            <div class="col-md-6">
                                                <div class="info-item">
                                                    <label>Chi nhánh:</label>
                                                    <span class="value">@selectedOrderReturn.BankInfo.BranchName</span>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                    }

                    <!-- Contact Information for InStore -->
                    @if (selectedOrderReturn.RefundMethod == Domain.Commons.Enums.ERefundMethod.InStore && 
                         (!string.IsNullOrEmpty(selectedOrderReturn.ContactName) || !string.IsNullOrEmpty(selectedOrderReturn.ContactPhone)))
                    {
                                <div class="mb-3">
                                    <h6>Thông tin liên hệ</h6>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="info-item">
                                                <label>Họ tên:</label>
                                                <span class="value">@selectedOrderReturn.ContactName</span>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="info-item">
                                                <label>Số điện thoại:</label>
                                                <span class="value fw-bold">@selectedOrderReturn.ContactPhone</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                    }

                    <!-- Files -->
                    @if (selectedOrderReturn.Files != null && selectedOrderReturn.Files.Any())
                    {
                                <div class="mb-3">
                                    <h6>File đính kèm</h6>
                                    <div class="order-return-files-grid">
                                        @foreach (var file in selectedOrderReturn.Files)
                                        {
                                                    <div class="file-preview-item">
                                                        @if (file.ContentType.StartsWith("video/"))
                                                        {
                                                                    <div class="video-preview-container">
                                                                        <video controls class="file-preview-video">
                                                                            <source src="@file.Url" type="video/mp4"/>
                                                                            Trình duyệt của bạn không hỗ trợ video.
                                                                        </video>
                                                                        <div class="file-info">
                                                                            <div class="file-name">@file.Name</div>
                                                                            <div class="file-type">Video</div>
                                                                        </div>
                                                                    </div>
                                                        }
                                                        else if (file.ContentType.StartsWith("image/"))
                                                        {
                                                                    <div class="image-preview-container">
                                                                        <Image Src="@(backendUrl + "/" + file.Url)" 
                                                                               Class="file-preview-image" 
                                                                               Alt="@file.Name"
                                                                               Preview="true"/>
                                                                    </div>
                                                        }
                                                        else
                                                        {
                                                                    <div class="file-preview-container">
                                                                        <div class="file-icon">
                                                                            <i class="fas fa-file-alt"></i>
                                                                        </div>
                                                                        <div class="file-info">
                                                                            <div class="file-name">@file.Name</div>
                                                                            <div class="file-type">File</div>
                                                                        </div>
                                                                    </div>
                                                        }
                                                    </div>
                                        }
                                    </div>
                                </div>
                    }
                </div>
    }
</Modal>

@code {
    private string SearchValue = string.Empty;
    private bool IsLoading = false;
    private int TotalRecords = 0;
    private bool ShowCancelModal = false;
    private string CancelReason = string.Empty;
    private OrderDTO? SelectedOrder = null;
    private Guid? ReorderingOrderId = null;
    
    // Return order variables
    private bool ShowReturnModal = false;
    private Guid? CheckingReturnOrderId = null;
    private List<OrderReturnItemDetailDTO>? AvailableReturnItems = null;
    private string ReturnReason = string.Empty;
    private int SelectedRefundMethod = (int)Domain.Commons.Enums.ERefundMethod.BankTransfer;
    private string BankName = string.Empty;
    private string BankAccountName = string.Empty;
    private string BankAccountNumber = string.Empty;
    private string ContactName = string.Empty;
    private string ContactPhone = string.Empty;
    private bool IsSubmittingReturn = false;
    
    // VietQR Bank variables
    private List<BankDTO> Banks = new();
    private BankDTO? SelectedBank = null;
    private int? SelectedBankId = null;
    private bool IsLoadingBanks = false;
    
    // File upload variables for return
    private List<MeoMeo.Shared.IServices.ReturnFileUpload> ReturnUploads = new();
    private bool IsProcessingReturnFiles = false;
    private InputFile? FileInputReturn;
    private GetListOrderRequestDTO Filter = new() { PageIndex = 1, PageSize = 10 };
    private List<OrderDTO> Orders = new();
    private string backendUrl = "";
    private GetListOrderResponseDTO metaData = new();
    private string activeTab = "All";
    private List<StatusTab> StatusTabs = new()
    {
        new() { Key = "All", Label = "Tất cả", Value = null },
        new() { Key = "Pending", Label = "Chờ xác nhận", Value = (int)Domain.Commons.Enums.EOrderStatus.Pending },
        new() { Key = "Confirmed", Label = "Đã xác nhận", Value = (int)Domain.Commons.Enums.EOrderStatus.Confirmed },
        new() { Key = "InTransit", Label = "Đang giao", Value = (int)Domain.Commons.Enums.EOrderStatus.InTransit },
        new() { Key = "Completed", Label = "Hoàn thành", Value = (int)Domain.Commons.Enums.EOrderStatus.Completed },
        new() { Key = "Canceled", Label = "Đã huỷ", Value = (int)Domain.Commons.Enums.EOrderStatus.Canceled },
        new() { Key = "PendingReturn", Label = "Chờ hoàn hàng", Value = (int)Domain.Commons.Enums.EOrderStatus.PendingReturn },
        new() { Key = "Returned", Label = "Đã hoàn hàng", Value = (int)Domain.Commons.Enums.EOrderStatus.Returned },
        new() { Key = "RejectReturned", Label = "Từ chối hoàn hàng", Value = (int)Domain.Commons.Enums.EOrderStatus.RejectReturned }
    };

    protected override async Task OnInitializedAsync()
    {
        backendUrl = Configuration["ApiSettings:BaseUrl"] ?? "";
        await FetchOrders();
        await LoadBanks();
    }

    private async Task FetchOrders()
    {
        try
        {
            IsLoading = true;
            var result = await OrderClient.GetMyOrdersAsync(Filter);
            TotalRecords = result.TotalRecords;
            Orders = result.Items?.ToList() ?? new List<OrderDTO>();
            metaData = result.Metadata ?? new GetListOrderResponseDTO();
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Lỗi khi tải đơn hàng: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadBanks()
    {
        try
        {
            IsLoadingBanks = true;
            Banks = await VietQRClientService.GetBanksAsync();
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Lỗi khi tải danh sách ngân hàng: {ex.Message}");
        }
        finally
        {
            IsLoadingBanks = false;
        }
    }

    private async Task LoadMore()
    {
        Filter.PageSize += 10;
        await FetchOrders();
    }

    private async Task OnSearch(string value)
    {
        Filter.PageIndex = 1;
        Filter.PageSize = 10;
        Filter.CodeFilter = string.IsNullOrWhiteSpace(value) ? null : value;
        await FetchOrders();
    }

    private async Task OnTabClick(StatusTab tab)
    {
        activeTab = tab.Key;
        Filter.PageIndex = 1;
        Filter.PageSize = 10;
        Filter.OrderStatusFilter = tab.Value.HasValue ? (Domain.Commons.Enums.EOrderStatus?)tab.Value.Value : null;
        await FetchOrders();
    }

    private void OpenCancelModal(OrderDTO order)
    {
        SelectedOrder = order;
        CancelReason = string.Empty;
        ShowCancelModal = true;
    }

    private async Task ConfirmCancelOrder()
    {
        if (string.IsNullOrWhiteSpace(CancelReason?.Trim()))
        {
            MessageModalService.Warning("Vui lòng nhập lý do hủy đơn hàng!");
            return;
        }

        if (SelectedOrder == null) return;

        try
        {
            var result = await OrderClient.CancelOrderAsync(SelectedOrder.Id);
            
            if (result.ResponseStatus == BaseStatus.Success)
            {
                MessageModalService.Success("Hủy đơn hàng thành công!");
                ShowCancelModal = false;
                await FetchOrders();
            }
            else
            {
                MessageModalService.Error($"Lỗi khi hủy đơn hàng: {result.Message}");
            }
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Lỗi khi hủy đơn hàng: {ex.Message}");
        }
    }

    private async Task ReorderProducts(OrderDTO order)
    {
        try
        {
            ReorderingOrderId = order.Id;
            
            // Thêm từng sản phẩm vào giỏ hàng
            foreach (var item in order.OrderDetails)
            {
                var addToCartRequest = new AddToCartDTO
                {
                    ProductDetailId = item.ProductDetailId,
                    Quantity = item.Quantity
                };
                
                var result = await CartClient.AddToCartAsync(addToCartRequest);
                if (result?.ResponseStatus == BaseStatus.Error)
                {
                    MessageModalService.Warning($"Không thể thêm sản phẩm {item.ProductName}: {result.Message}");
                }
            }
            
            MessageModalService.Success("Đã thêm tất cả sản phẩm vào giỏ hàng!");
            Navigation.NavigateTo("/cart");
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Lỗi khi mua lại: {ex.Message}");
        }
        finally
        {
            ReorderingOrderId = null;
            StateHasChanged();
        }
    }

    private int GetStatusCount(int? valueStatus)
    {
        if (!valueStatus.HasValue) return metaData.TotalAll;
        
        return valueStatus.Value switch
        {
            (int)Domain.Commons.Enums.EOrderStatus.Pending => metaData.Pending,
            (int)Domain.Commons.Enums.EOrderStatus.Confirmed => metaData.Confirmed,
            (int)Domain.Commons.Enums.EOrderStatus.InTransit => metaData.InTransit,
            (int)Domain.Commons.Enums.EOrderStatus.Completed => metaData.Completed,
            (int)Domain.Commons.Enums.EOrderStatus.Canceled => metaData.Canceled,
            (int)Domain.Commons.Enums.EOrderStatus.PendingReturn => metaData.PendingReturn,
            (int)Domain.Commons.Enums.EOrderStatus.Returned => metaData.Returned,
            (int)Domain.Commons.Enums.EOrderStatus.RejectReturned => metaData.RejectReturned,
            _ => 0
        };
    }


    private string GetTabStyles(StatusTab tab)
    {
        var isActive = activeTab == tab.Key;
        var borderColor = isActive ? "rgba(0, 131, 61, 1)" : "#FFFFFF";
        var textColor = isActive ? "rgba(0, 131, 61, 1)" : "rgba(34, 49, 63, 1)";
        return $"cursor: pointer; height: 48px; border-bottom: 1px solid {borderColor}; font-size: 14px; color: {textColor}; background-color: #ffff; display: flex; justify-content: center; align-items: center; white-space: nowrap;";
    }

    private string GetStatusDisplayName(Domain.Commons.Enums.EOrderStatus status)
    {
        return status switch
        {
            Domain.Commons.Enums.EOrderStatus.Pending => "Chờ xác nhận",
            Domain.Commons.Enums.EOrderStatus.Confirmed => "Đã xác nhận",
            Domain.Commons.Enums.EOrderStatus.InTransit => "Đang giao",
            Domain.Commons.Enums.EOrderStatus.Completed => "Hoàn thành",
            Domain.Commons.Enums.EOrderStatus.Canceled => "Đã hủy",
            Domain.Commons.Enums.EOrderStatus.PendingReturn => "Chờ hoàn hàng",
            Domain.Commons.Enums.EOrderStatus.Returned => "Đã hoàn hàng",
            Domain.Commons.Enums.EOrderStatus.RejectReturned => "Từ chối hoàn hàng",
            _ => status.ToString()
        };
    }

    private string GetStatusColor(Domain.Commons.Enums.EOrderStatus status)
    {
        return status switch
        {
            Domain.Commons.Enums.EOrderStatus.Pending => "orange",
            Domain.Commons.Enums.EOrderStatus.Confirmed => "blue",
            Domain.Commons.Enums.EOrderStatus.InTransit => "geekblue",
            Domain.Commons.Enums.EOrderStatus.Completed => "green",
            Domain.Commons.Enums.EOrderStatus.Canceled => "red",
            Domain.Commons.Enums.EOrderStatus.PendingReturn => "yellow",
            Domain.Commons.Enums.EOrderStatus.Returned => "gray",
            Domain.Commons.Enums.EOrderStatus.RejectReturned => "red",
            _ => "default"
        };
    }

    private string GetPaymentMethodName(Domain.Commons.Enums.EOrderPaymentMethod paymentMethod)
    {
        return paymentMethod switch
        {
            Domain.Commons.Enums.EOrderPaymentMethod.Cash => "Tiền mặt",
            Domain.Commons.Enums.EOrderPaymentMethod.Transfer => "Chuyển khoản ngân hàng",
            _ => paymentMethod.ToString()
        };
    }

    // Return order methods
    private async Task OpenReturnModal(OrderDTO order)
    {
        try
        {
            CheckingReturnOrderId = order.Id;
            StateHasChanged();

            // Get detailed return information
            var returnInfo = await OrderReturnClient.GetOrderReturnInfoAsync(order.Id);
            if (returnInfo?.ResponseStatus != BaseStatus.Success)
            {
                MessageModalService.Error(returnInfo?.Message ?? "Không thể tải thông tin hoàn trả. Vui lòng thử lại sau.");
                return;
            }

            if (!returnInfo.CanReturn)
            {
                var message = returnInfo.Message;
                if (returnInfo.NonReturnableProducts.Any())
                {
                    message += "\n\nSản phẩm không thể hoàn trả:\n• " + string.Join("\n• ", returnInfo.NonReturnableProducts);
                }
                MessageModalService.Warning(message);
                return;
            }

            // Get available items for return
            AvailableReturnItems = await OrderReturnClient.GetAvailableItemsForReturnAsync(order.Id);
            
            if (AvailableReturnItems?.Any() != true)
            {
                MessageModalService.Warning("Không có sản phẩm nào có thể hoàn trả trong đơn hàng này.");
                return;
            }

            // Show success message with returnable products info
            var successMessage = returnInfo.Message;
            if (returnInfo.ReturnableProducts.Any())
            {
                successMessage += ":\n• " + string.Join("\n• ", returnInfo.ReturnableProducts);
            }
            MessageModalService.Success(successMessage);

            // Reset form
            ReturnReason = string.Empty;
            SelectedRefundMethod = (int)Domain.Commons.Enums.ERefundMethod.BankTransfer;
            SelectedBank = null;
            SelectedBankId = null;
            BankName = string.Empty;
            BankAccountName = string.Empty;
            BankAccountNumber = string.Empty;
            ContactName = string.Empty;
            ContactPhone = string.Empty;
            ReturnUploads.Clear(); // Reset file uploads

            SelectedOrder = order; // Store selected order for later use
            ShowReturnModal = true;
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Lỗi khi tải thông tin hoàn trả: {ex.Message}");
        }
        finally
        {
            CheckingReturnOrderId = null;
            StateHasChanged();
        }
    }

    private async Task SubmitReturn()
    {
        try
        {
            if (!CanSubmitReturn() || SelectedOrder == null)
                return;

            IsSubmittingReturn = true;
            StateHasChanged();

            var selectedItems = AvailableReturnItems!
                .Where(item => item.Quantity > 0)
                .Select(item => new OrderReturnItemDTO
                {
                    OrderDetailId = item.OrderDetailId,
                    Quantity = item.Quantity,
                    Reason = item.Reason
                }).ToList();

            var request = new CreatePartialOrderReturnDTO
            {
                OrderId = SelectedOrder.Id,
                Reason = ReturnReason,
                RefundMethod = (Domain.Commons.Enums.ERefundMethod)SelectedRefundMethod,
                Items = selectedItems,
                FileUploads = ReturnUploads.Select(file => new OrderReturnFileUpload
                {
                    FileName = file.FileName,
                    ContentType = file.ContentType
                }).ToList()
            };

            // Set additional fields based on refund method
            if (SelectedRefundMethod == (int)Domain.Commons.Enums.ERefundMethod.BankTransfer)
            {
                request.BankName = BankName;
                request.BankAccountName = BankAccountName;
                request.BankAccountNumber = BankAccountNumber;
            }
            else
            {
                request.ContactName = ContactName;
                request.ContactPhone = ContactPhone;
            }

            var result = await OrderReturnClient.CreatePartialOrderReturnAsync(request, ReturnUploads);
            
            if (result.ResponseStatus == BaseStatus.Success)
            {
                MessageModalService.Success(result.Message);
                ShowReturnModal = false;
                await FetchOrders(); // Refresh orders
            }
            else
            {
                MessageModalService.Error(result.Message);
            }
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Lỗi khi gửi yêu cầu hoàn trả: {ex.Message}");
        }
        finally
        {
            IsSubmittingReturn = false;
            StateHasChanged();
        }
    }

    private void OnBankSelected(BankDTO bank)
    {
        SelectedBank = bank;
        SelectedBankId = bank?.Id;
        BankName = bank?.Name ?? string.Empty;
        StateHasChanged();
    }

    private bool CanSubmitReturn()
    {
        if (string.IsNullOrWhiteSpace(ReturnReason))
            return false;

        if (AvailableReturnItems?.Any(item => item.Quantity > 0) != true)
            return false;

        // Check if at least one file is uploaded (required)
        if (!ReturnUploads?.Any() == true)
            return false;

        if (SelectedRefundMethod == (int)Domain.Commons.Enums.ERefundMethod.BankTransfer)
        {
            return SelectedBank != null && 
                   !string.IsNullOrWhiteSpace(BankAccountName) && 
                   !string.IsNullOrWhiteSpace(BankAccountNumber);
        }
        else
        {
            return !string.IsNullOrWhiteSpace(ContactName) && 
                   !string.IsNullOrWhiteSpace(ContactPhone);
        }
    }

    private int GetSelectedItemCount()
    {
        return AvailableReturnItems?.Sum(item => item.Quantity) ?? 0;
    }

    private decimal GetEstimatedRefund()
    {
        return AvailableReturnItems?
            .Where(item => item.Quantity > 0)
            .Sum(item => (decimal)(item.UnitPrice * item.Quantity)) ?? 0;
    }

    // Return file upload methods
    private async Task OnReturnFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            IsProcessingReturnFiles = true;
            StateHasChanged();

            var files = e.GetMultipleFiles(12); // Max 12 files total
                    var processedFiles = new List<MeoMeo.Shared.IServices.ReturnFileUpload>();

            // Count current files
            var currentImageCount = ReturnUploads.Count(x => x.ContentType.StartsWith("image/"));
            var currentVideoCount = ReturnUploads.Count(x => x.ContentType.StartsWith("video/"));

            // Count new files to be added
            var newImageCount = 0;
            var newVideoCount = 0;

            foreach (var file in files)
            {
                try
                {
                    var maxSize = file.ContentType.StartsWith("video/") ? 50 * 1024 * 1024 : 10 * 1024 * 1024; // 50MB for video, 10MB for image
                    if (file.Size > maxSize)
                    {
                        MessageModalService.Error($"File {file.Name} quá lớn. Kích thước tối đa: {maxSize / (1024 * 1024)}MB");
                        continue;
                    }

                    var isImage = file.ContentType.StartsWith("image/");
                    var isVideo = file.ContentType.StartsWith("video/");

                    if (!isImage && !isVideo)
                    {
                        MessageModalService.Error($"File {file.Name} không phải là ảnh hoặc video.");
                        continue;
                    }

                    // Check limits for each file type
                    if (isVideo)
                    {
                        if (currentVideoCount + newVideoCount >= 2)
                        {
                            MessageModalService.Warning("Chỉ được tải tối đa 2 video");
                            continue;
                        }
                        newVideoCount++;
                    }
                    else if (isImage)
                    {
                        if (currentImageCount + newImageCount >= 10)
                        {
                            MessageModalService.Warning("Chỉ được tải tối đa 10 ảnh");
                            continue;
                        }
                        newImageCount++;
                    }

                    var base64 = await ConvertToBase64(file);
                    var fileUpload = new MeoMeo.Shared.IServices.ReturnFileUpload
                    {
                        FileName = file.Name,
                        ContentType = file.ContentType,
                        Base64Data = base64
                    };

                    processedFiles.Add(fileUpload);
                }
                catch (Exception ex)
                {
                    MessageModalService.Error($"Lỗi xử lý file {file.Name}: {ex.Message}");
                }
            }

            ReturnUploads.AddRange(processedFiles);
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Lỗi khi tải file: {ex.Message}");
        }
        finally
        {
            IsProcessingReturnFiles = false;
            StateHasChanged();
        }
    }

    private string GetReturnFilePreviewUrl(MeoMeo.Shared.IServices.ReturnFileUpload file)
    {
        if (!string.IsNullOrEmpty(file.Base64Data))
        {
            return $"data:{file.ContentType};base64,{file.Base64Data}";
        }
        return $"{backendUrl}/Images/fallback.jpeg";
    }

    private void RemoveReturnFile(int index)
    {
        if (index >= 0 && index < ReturnUploads.Count)
        {
            ReturnUploads.RemoveAt(index);
            StateHasChanged();
        }
    }

    private async Task<string> ConvertToBase64(IBrowserFile file)
    {
        var maxSize = file.ContentType.StartsWith("video/") ? 50 * 1024 * 1024 : 10 * 1024 * 1024;
        using var stream = file.OpenReadStream(maxAllowedSize: maxSize);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        var bytes = memoryStream.ToArray();
        return Convert.ToBase64String(bytes);
    }

    private class StatusTab
    {
        public string Key { get; set; } = string.Empty;
        public string Label { get; set; } = string.Empty;
        public int? Value { get; set; }
    }

    private class RefundMethodOption
    {
        public int Value { get; set; }
        public string Label { get; set; } = string.Empty;
    }

    private List<RefundMethodOption> RefundMethodOptions = new()
    {
        new() { Value = (int)Domain.Commons.Enums.ERefundMethod.BankTransfer, Label = "Chuyển khoản ngân hàng" },
        new() { Value = (int)Domain.Commons.Enums.ERefundMethod.InStore, Label = "Nhận tại cửa hàng" },
    };

    // Order Return Dialog variables
    private bool orderReturnDialogVisible = false;
    private OrderReturnSummaryDTO? selectedOrderReturn = null;

    private void ShowOrderReturnDialog(OrderReturnSummaryDTO orderReturn)
    {
        selectedOrderReturn = orderReturn;
        orderReturnDialogVisible = true;
    }

}

<style>
    .title { font-size: 24px; font-weight: bold; color: #00833D; }
    .search-container { width: 300px; }
    .status-container { box-shadow: 0 2px 8px rgba(0,0,0,0.1); }
    .empty-cart { width: 120px; height: 120px; margin: 0 auto; }
    .empty-text { font-size: 16px; color: #666; margin-top: 16px; }
    .shopping-now { background-color: #00833D; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; margin-top: 8px; }
    .shopping-now:hover { background-color: #006b32; }
    .view-more { color: #00833D; font-weight: 500; }
    .view-more:hover { text-decoration: underline; }

    /* Order Card Styles */
    .order-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        padding: 20px;
        margin-bottom: 16px;
        border: 1px solid #e8e8e8;
    }

    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 1px solid #f0f0f0;
    }

    .order-info {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .order-code, .order-date, .delivery-date, .cancel-reason {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 14px;
        color: #666;
    }

    .order-code i, .order-date i, .delivery-date i {
        color: #00833D;
        width: 16px;
    }

    .cancel-reason i {
        color: #ff4d4f;
        width: 16px;
    }

    .order-status {
        text-align: right;
    }

    /* Payment Info */
    .payment-info {
        margin-bottom: 20px;
        padding: 15px;
        background: #f0f8ff;
        border-radius: 8px;
        border-left: 4px solid #1890ff;
    }

    .payment-title {
        color: #333;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .payment-title i {
        color: #1890ff;
    }

    .payment-details {
        display: flex;
        flex-direction: column;
        gap: 4px;
        font-size: 14px;
        color: #666;
    }

    /* Products Section */
    .order-products {
        margin-bottom: 20px;
    }

    .products-title {
        color: #333;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .products-title i {
        color: #00833D;
    }

    .product-item {
        display: flex;
        align-items: center;
        padding: 12px;
        border: 1px solid #f0f0f0;
        border-radius: 8px;
        margin-bottom: 8px;
        background: #fafafa;
    }

    .product-image {
        margin-right: 15px;
        flex-shrink: 0;
    }

    .product-img {
        border-radius: 6px;
        border: 1px solid #e8e8e8;
    }

    .product-info {
        flex: 1;
        margin-right: 15px;
    }

    .product-name {
        font-weight: 600;
        color: #333;
        margin-bottom: 4px;
        font-size: 14px;
    }

    .product-sku {
        color: #666;
        font-size: 12px;
        margin-bottom: 2px;
    }

    .product-variant {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        align-items: center;
    }

    .size-badge, .color-badge {
        background: #f0f0f0;
        color: #666;
        padding: 2px 6px;
        border-radius: 4px;
        font-size: 11px;
        font-weight: 500;
    }

    .size-badge {
        background: #e6f7ff;
        color: #1890ff;
    }

    .color-badge {
        background: #fff7e6;
        color: #fa8c16;
    }

    .product-quantity {
        margin-right: 15px;
    }

    .quantity-badge {
        background: #00833D;
        color: white;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 600;
    }

    .product-price {
        text-align: center;
        margin-right: 15px;
        min-width: 80px;
    }

    .price-original {
        font-size: 14px;
        color: #333;
        margin-bottom: 2px;
    }

    .price-discount {
        font-size: 12px;
        color: #ff4d4f;
        font-weight: 600;
    }

    .product-total {
        text-align: right;
        min-width: 100px;
    }

    .total-label {
        font-size: 12px;
        color: #666;
        margin-bottom: 2px;
    }

    .total-amount {
        font-size: 16px;
        font-weight: 600;
        color: #00833D;
    }

    /* Delivery Info */
    .delivery-info {
        margin-bottom: 20px;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
        border-left: 4px solid #00833D;
    }

    .delivery-title {
        color: #333;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .delivery-title i {
        color: #00833D;
    }

    .delivery-details {
        display: flex;
        flex-direction: column;
        gap: 4px;
        font-size: 14px;
        color: #666;
    }

    /* Order Summary */
    .order-summary {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 0;
        border-bottom: 1px solid #e8e8e8;
    }

    .summary-row:last-child {
        border-bottom: none;
        border-top: 2px solid #00833D;
        padding-top: 12px;
        margin-top: 8px;
    }

    .summary-row.discount {
        color: #ff4d4f;
    }

    .summary-row.total {
        font-size: 16px;
        color: #00833D;
    }

    /* Order Actions */
    .order-actions {
        display: flex;
        justify-content: flex-end;
        gap: 12px;
        padding-top: 15px;
        border-top: 1px solid #f0f0f0;
    }

    /* Cancel Modal */
    .cancel-order-modal {
        padding: 10px 0;
    }

    .warning-message {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 15px;
        background: #fff7e6;
        border: 1px solid #ffd591;
        border-radius: 6px;
        color: #d46b08;
    }

    .warning-message i {
        font-size: 18px;
    }

    .form-group label {
        display: block;
        margin-bottom: 8px;
        color: #333;
        font-weight: 500;
    }

    .note {
        padding: 10px;
        background: #f6ffed;
        border: 1px solid #b7eb8f;
        border-radius: 6px;
        color: #389e0d;
    }

    .note i {
        margin-right: 5px;
    }

    /* Return Modal Styles */
    .return-order-modal {
        padding: 10px 0;
    }

    .return-info .alert {
        padding: 12px;
        border-radius: 6px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .alert-info {
        background: #e6f7ff;
        border: 1px solid #91d5ff;
        color: #0050b3;
    }

    .alert-warning {
        background: #fff7e6;
        border: 1px solid #ffd591;
        color: #d46b08;
    }

    .return-items h6 {
        color: #333;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .return-item {
        border: 1px solid #f0f0f0;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        background: #fafafa;
    }

    .item-info {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-bottom: 10px;
    }

    .item-details {
        flex: 1;
    }

    .item-name {
        font-weight: 600;
        color: #333;
        margin-bottom: 4px;
    }

    .item-sku {
        color: #666;
        font-size: 12px;
        margin-bottom: 2px;
    }

    .item-price {
        color: #00833D;
        font-weight: 600;
        font-size: 14px;
    }

    .item-quantity {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 10px;
        padding: 10px;
        background: #f0f8ff;
        border-radius: 6px;
    }

    .item-reason {
        margin-top: 10px;
    }

    .return-details {
        margin-top: 20px;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
    }

    .return-details .form-group {
        margin-bottom: 15px;
    }

    .return-details label {
        display: block;
        margin-bottom: 5px;
        color: #333;
        font-weight: 500;
    }

    .bank-info, .contact-info {
        margin-top: 15px;
        padding: 15px;
        background: white;
        border-radius: 6px;
        border: 1px solid #e8e8e8;
    }

    .bank-details {
        margin-top: 15px;
        padding: 15px;
        background: #f0f8ff;
        border-radius: 8px;
        border-left: 4px solid #1890ff;
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .bank-logo {
        flex-shrink: 0;
    }

    .bank-info-text {
        flex: 1;
    }

    .bank-info-text div {
        margin-bottom: 4px;
        font-size: 14px;
    }

    .bank-info-text div:first-child {
        font-size: 16px;
        color: #1890ff;
    }

    .return-summary {
        margin-top: 20px;
        padding: 15px;
        background: #fff7e6;
        border-radius: 8px;
        border-left: 4px solid #fa8c16;
    }

    .summary-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        color: #d46b08;
        font-weight: 600;
    }

    .return-note {
        margin-top: 10px;
        text-align: center;
    }

    .return-note .text-muted {
        color: #666;
        font-size: 12px;
    }

    .return-note i {
        margin-right: 5px;
        color: #1890ff;
    }

    .modal-actions {
        margin-top: 20px;
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        padding-top: 15px;
        border-top: 1px solid #f0f0f0;
    }

    .no-return-items {
        text-align: center;
        padding: 20px;
    }

    /* File Upload Styles */
    .file-upload-container {
        margin-bottom: 15px;
    }

    .file-upload-area {
        transition: all 0.3s ease;
        border: 2px dashed #d9d9d9;
        background: #fafafa;
    }

    .file-upload-area:hover {
        border-color: #00833D;
        background: #f6ffed;
    }

    .file-upload-area.processing {
        border-color: #1890ff;
        background: #e6f7ff;
    }

    .file-preview-container {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-top: 8px;
    }

    .file-preview-item {
        position: relative;
        display: inline-block;
    }

    .file-preview-item img {
        border-radius: 6px;
        border: 1px solid #e8e8e8;
        transition: transform 0.2s ease;
    }

    .file-preview-item:hover img {
        transform: scale(1.05);
    }

    .file-preview-item button {
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        transition: all 0.2s ease;
    }

    .file-preview-item button:hover {
        background: #d32f2f !important;
        transform: scale(1.1);
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .order-header {
            flex-direction: column;
            gap: 15px;
        }

        .order-status {
            text-align: left;
        }

        .product-item {
            flex-direction: column;
            text-align: center;
            gap: 10px;
        }

        .product-image {
            margin-right: 0;
            margin-bottom: 10px;
        }

        .product-info {
            margin-right: 0;
            margin-bottom: 10px;
            text-align: center;
        }

        .product-quantity, .product-price, .product-total {
            margin-right: 0;
            margin-bottom: 10px;
        }

        .order-actions {
            flex-direction: column;
        }

        .order-actions button {
            width: 100%;
        }
    }

    /* Order Return Dialog Styles */
    .order-return-detail {
        padding: 16px;
    }

    .info-item {
        margin-bottom: 12px;
    }

    .info-item label {
        font-weight: 600;
        color: #666;
        display: block;
        margin-bottom: 4px;
    }

    .info-item .value {
        color: #333;
        font-size: 14px;
    }

    /* Order Return Products Table */
    .table-responsive {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .table-sm th,
    .table-sm td {
        padding: 8px 12px;
        vertical-align: middle;
    }

    .table-light th {
        background-color: #f8f9fa;
        font-weight: 600;
        color: #495057;
        border-bottom: 2px solid #dee2e6;
    }

    .table tbody tr:hover {
        background-color: #f8f9fa;
    }

    .table tfoot tr {
        background-color: #e9ecef;
        font-weight: 600;
    }

    /* Order Return Files Display */
    .order-return-files-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 12px;
        margin-top: 8px;
    }

    .file-preview-item {
        border: 1px solid #e8e8e8;
        border-radius: 8px;
        overflow: hidden;
        background: #fff;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .file-preview-item:hover {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        transform: translateY(-2px);
        border-color: #1890ff;
    }

    /* Video Preview */
    .video-preview-container {
        position: relative;
    }

    .file-preview-video {
        width: 100%;
        height: 120px;
        object-fit: cover;
        background: #f5f5f5;
    }

    /* Image Preview */
    .image-preview-container {
        position: relative;
    }

    .file-preview-image {
        width: 100%;
        height: 120px;
        object-fit: cover;
        background: #f5f5f5;
        border-radius: 4px;
    }

    /* Ant Design Image specific styles */
    .image-preview-container .ant-image {
        width: 100%;
        height: 120px;
        display: block;
    }

    .image-preview-container .ant-image-img {
        width: 100%;
        height: 120px;
        object-fit: cover;
        border-radius: 4px;
    }

    .image-preview-container .ant-image-placeholder {
        height: 120px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f5f5f5;
        border-radius: 4px;
    }

    /* File Preview */
    .file-preview-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 16px;
        height: 120px;
        justify-content: center;
        position: relative;
    }

    .file-icon {
        font-size: 32px;
        color: #1890ff;
        margin-bottom: 8px;
    }

    /* File Info */
    .file-info {
        padding: 8px;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        font-size: 12px;
    }

    .file-name {
        font-weight: 600;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        margin-bottom: 2px;
    }

    .file-type {
        opacity: 0.8;
        font-size: 10px;
    }

    /* Order Return Info Section */
    .order-return-info {
        margin-bottom: 20px;
        padding: 15px;
        background: #f0f8ff;
        border-radius: 8px;
        border-left: 4px solid #1890ff;
    }

    .return-title {
        color: #333;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .return-title i {
        color: #1890ff;
    }

    .return-details {
        display: flex;
        flex-direction: column;
        gap: 4px;
        font-size: 14px;
        color: #666;
    }

    .left-content {
        flex: 1;
    }

    .right-content {
        display: flex;
        align-items: center;
        gap: 8px;
    }
</style>