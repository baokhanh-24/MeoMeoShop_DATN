@page "/orders"
@using AntDesign
@using MeoMeo.Shared.IServices
@using MeoMeo.Contract.DTOs.Order
@using MeoMeo.Contract.Commons
@inject NavigationManager Navigation
@inject MessageService MessageService
@inject IOrderClientService OrderClient

<div>
    <div class="d-flex justify-content-between" style="justify-items: center;">
        <div class="title">Đơn hàng của tôi</div>
        <div class="search-container">
            <Search Placeholder="Tìm theo mã đơn hàng"
                    @bind-Value="SearchValue"
                    OnSearch="OnSearch"
                    EnterButton="true"
                    Loading="IsLoading" />
        </div>
    </div>

    <div class="status-container" style="display: flex; margin-top: 10px; width: 100%; background-color: #FFFFFF; border-top-left-radius: 8px; border-top-right-radius: 8px; overflow-x: auto;">
        @foreach (var tab in StatusTabs)
        {
            <div class="@GetTabClasses(tab)"
                 style="@GetTabStyles(tab)"
                 @onclick="() => OnTabClick(tab)">
                @tab.Label (@GetStatusCount(tab.Value))
            </div>
        }
    </div>

    <div style="margin-top: 10px; display: flex; flex-direction: column; gap: 10px; justify-content: space-between;">
        @if (!IsLoading)
        {
            @if (Orders.Count == 0)
            {
                <div class="row">
                    <div class="col-12">
                        <div class="space-coverage text-center">
                            <img class="empty-cart" src="/images/products/Cart.svg" alt="" />
                            <div class="empty-text mt-4">Bạn chưa có đơn hàng nào.</div>
                            <div class="d-flex justify-content-center">
                                <button class="shopping-now mt-1" @onclick="@(() => Navigation.NavigateTo("/"))">Mua sắm ngay</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                @foreach (var order in Orders)
                {
                    <div class="space-coverage">
                        <div class="d-flex justify-content-between">
                            <div>
                                <div><b>Mã đơn:</b> @order.Code</div>
                                <div><b>Ngày tạo:</b> @order.CreationTime.ToString("dd/MM/yyyy HH:mm")</div>
                            </div>
                            <div>
                                <Tag Color="@(order.Status == Domain.Commons.Enums.EOrderStatus.Pending ? "orange" : order.Status == Domain.Commons.Enums.EOrderStatus.Confirmed ? "blue" : order.Status == Domain.Commons.Enums.EOrderStatus.InTransit ? "geekblue" : order.Status == Domain.Commons.Enums.EOrderStatus.Completed ? "green" : "red")">
                                    @order.Status.ToString()
                                </Tag>
                            </div>
                        </div>
                        <div class="mt-2">
                            @foreach (var item in order.OrderDetails)
                            {
                                <div class="d-flex justify-content-between">
                                    <span>@item.Sku</span>
                                    <span>x@item.Quantity</span>
                                    <span>@item.Price.ToString("N0") đ</span>
                                </div>
                            }
                        </div>
                        <div class="d-flex justify-content-between mt-2">
                            <div><b>Tổng tiền:</b></div>
                            <div>@order.TotalPrice.ToString("N0") đ</div>
                        </div>
                    </div>
                }
            }
        }
        else
        {
            <Skeleton Active/>
            <Skeleton Active/>
        }
    </div>

    @if (Orders.Count < TotalRecords)
    {
        <div class="text-center mt-3 mb-3">
            <img class="star-vote" src="/images/products/droparrrow.svg" alt="" />
            <span style="cursor: pointer; font-size: 14px;" class="view-more" @onclick="LoadMore">
                Xem thêm @(TotalRecords - Orders.Count) đơn hàng
            </span>
        </div>
    }
</div>

@code {
    private string SearchValue = string.Empty;
    private bool IsLoading = false;
    private int TotalRecords = 0;
    private GetListOrderRequestDTO Filter = new() { PageIndex = 1, PageSize = 10 };
    private List<OrderDTO> Orders = new();

    private List<StatusTab> StatusTabs = new()
    {
        new() { Key = "0", Label = "Tất cả", Value = null },
        new() { Key = "1", Label = "Chờ xác nhận", Value = (int)Domain.Commons.Enums.EOrderStatus.Pending },
        new() { Key = "2", Label = "Đang giao", Value = (int)Domain.Commons.Enums.EOrderStatus.InTransit },
        new() { Key = "3", Label = "Đã giao", Value = (int)Domain.Commons.Enums.EOrderStatus.Completed },
        new() { Key = "4", Label = "Đã huỷ", Value = (int)Domain.Commons.Enums.EOrderStatus.Canceled }
    };

    protected override async Task OnInitializedAsync()
    {
        await FetchOrders();
    }

    private async Task FetchOrders()
    {
        try
        {
            IsLoading = true;
            var result = await OrderClient.GetListOrderAsync(Filter);
            TotalRecords = result.TotalRecords;
            Orders = result.Items?.ToList() ?? new List<OrderDTO>();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Lỗi khi tải đơn hàng: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadMore()
    {
        Filter.PageSize += 10;
        await FetchOrders();
    }

    private async Task OnSearch(string value)
    {
        Filter.PageIndex = 1;
        Filter.PageSize = 10;
        Filter.CodeFilter = string.IsNullOrWhiteSpace(value) ? null : value;
        await FetchOrders();
    }

    private async Task OnTabClick(StatusTab tab)
    {
        Filter.PageIndex = 1;
        Filter.PageSize = 10;
        Filter.OrderStatusFilter = tab.Value.HasValue ? (Domain.Commons.Enums.EOrderStatus?)tab.Value.Value : null;
        await FetchOrders();
    }

    private int GetStatusCount(int? valueStatus)
    {
        // For PORTAL simplify: use current page totals if metadata not available here
        return TotalRecords;
    }

    private string GetTabClasses(StatusTab tab)
    {
        var baseClasses = "col-4 col-sm-4 col-md-3";
        baseClasses += tab.Key == "2" ? " col-lg-4" : " col-lg-2";
        return baseClasses;
    }

    private string GetTabStyles(StatusTab tab)
    {
        var isActive = Filter.OrderStatusFilter.HasValue && (int)Filter.OrderStatusFilter.Value == (tab.Value ?? -1);
        var borderColor = isActive ? "rgba(0, 131, 61, 1)" : "#FFFFFF";
        var textColor = isActive ? "rgba(0, 131, 61, 1)" : "rgba(34, 49, 63, 1)";
        return $"cursor: pointer; height: 48px; border-bottom: 1px solid {borderColor}; font-size: 14px; color: {textColor}; background-color: #ffff; display: flex; justify-content: center; align-items: center; white-space: nowrap;";
    }

    private class StatusTab
    {
        public string Key { get; set; } = string.Empty;
        public string Label { get; set; } = string.Empty;
        public int? Value { get; set; }
    }
}

<style>
    .title { font-size: 24px; font-weight: bold; color: #00833D; }
    .search-container { width: 300px; }
    .status-container { box-shadow: 0 2px 8px rgba(0,0,0,0.1); }
    .empty-cart { width: 120px; height: 120px; margin: 0 auto; }
    .empty-text { font-size: 16px; color: #666; margin-top: 16px; }
    .shopping-now { background-color: #00833D; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; margin-top: 8px; }
    .shopping-now:hover { background-color: #006b32; }
    .star-vote { width: 16px; height: 16px; margin-right: 8px; }
    .view-more { color: #00833D; font-weight: 500; }
    .view-more:hover { text-decoration: underline; }
</style>