@page "/order/{OrderId:guid}"
@using AntDesign
@using MeoMeo.Shared.IServices
@using MeoMeo.Contract.DTOs.Order
@using MeoMeo.Contract.DTOs.Order.Return
@using MeoMeo.Contract.Commons
@using MeoMeo.Contract.DTOs.OrderDetail
@using MeoMeo.Domain.Commons.Enums
@using System.IO
@using MeoMeo.Contract.DTOs.VietQR
@inject NavigationManager Navigation
@inject MeoMeo.Shared.Utilities.MessageModalService MessageModalService
@inject IOrderClientService OrderClient
@inject IOrderReturnClientService OrderReturnClient
@inject IConfiguration Configuration
@inject IVietQRClientService VietQRClientService

@if(Order !=null)
{
    <div class="order-detail-container content-background">
        <div class="order-header">
            <div class="d-flex justify-content-between align-items-center">
                <h2>Chi tiết đơn hàng: @Order.Code</h2>
                <Button Type="@AntDesign.ButtonType.Default" OnClick="@(() => Navigation.NavigateTo("/orders"))">
                    <Icon Type="arrow-left" />
                    Quay lại
                </Button>
            </div>
        </div>

        <div class="order-info-section">
            <h3>Thông tin đơn hàng</h3>
            <div class="row">
                <div class="col-md-6">
                    <div class="info-item">
                        <span class="label">Trạng thái:</span>
                        <Tag Color="@GetStatusColor(Order.Status)">
                            @GetStatusName(Order.Status)
                        </Tag>
                    </div>
                    <div class="info-item">
                        <span class="label">Ngày tạo:</span>
                        <span>@Order.CreationTime.ToString("dd/MM/yyyy HH:mm")</span>
                    </div>
                    <div class="info-item">
                        <span class="label">Ngày giao:</span>
                        <span>@(Order.DeliveryDate?.ToString("dd/MM/yyyy HH:mm") ?? "Chưa giao")</span>
                    </div>
                    <div class="info-item">
                        <span class="label">Ngày nhận:</span>
                        <span>@(Order.ReceiveDate?.ToString("dd/MM/yyyy HH:mm") ?? "Chưa nhận")</span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="info-item">
                        <span class="label">Tổng tiền:</span>
                        <span class="price">@Order.TotalPrice.ToString("N0") đ</span>
                    </div>
                    <div class="info-item">
                        <span class="label">Phí vận chuyển:</span>
                        <span>@(Order.ShippingFee?.ToString("N0") ?? "0") đ</span>
                    </div>
                    <div class="info-item">
                        <span class="label">Địa chỉ giao:</span>
                        <span>@Order.DeliveryAddress</span>
                    </div>
                    <div class="info-item">
                        <span class="label">Ghi chú:</span>
                        <span>@(string.IsNullOrEmpty(Order.Note) ? "Không có" : Order.Note)</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="order-items-section">
            <h3>Sản phẩm đã đặt</h3>
            <div class="order-items">
                @foreach (var item in OrderDetailsWithReturn)
                {
                    <div class="order-item">
                        <div class="item-image">
                            <img src="@item.OrderDetail.Image" alt="@item.OrderDetail.ProductName" />
                        </div>
                        <div class="item-info">
                            <div class="item-name">@item.OrderDetail.ProductName</div>
                            <div class="item-sku">SKU: @item.OrderDetail.Sku</div>
                            <div class="item-price">@item.OrderDetail.Price.ToString("N0") đ x @item.OrderDetail.Quantity</div>
                        </div>
                        <div class="item-total">
                            @((item.OrderDetail.Price * item.OrderDetail.Quantity).ToString("N0")) đ
                        </div>
                    </div>
                }
            </div>
        </div>

        @if (CanCreateReturn)
        {
            <div class="return-section">
                <h3>Yêu cầu hoàn hàng</h3>
                <div class="return-info">
                    <Alert Type="@AlertType.Info" ShowIcon="true">
                        Bạn có thể tạo yêu cầu hoàn hàng trong vòng 5 ngày kể từ ngày nhận hàng.
                        @if (DaysSinceReceived.HasValue)
                        {
                            <span>Còn @(5 - DaysSinceReceived.Value) ngày.</span>
                        }
                    </Alert>
                </div>
                <Button Type="@AntDesign.ButtonType.Primary" OnClick="@ShowReturnModal" Class="mt-3">
                    <Icon Type="rollback" />
                    Tạo yêu cầu hoàn hàng
                </Button>
            </div>
        }

        @if (OrderReturns.Any())
        {
            <div class="return-history-section">
                <h3>Lịch sử yêu cầu hoàn hàng</h3>
                @foreach (var returnRequest in OrderReturns)
                {
                    <div class="return-item">
                        <div class="return-header">
                            <div class="return-header-left">
                                <span class="return-code">@returnRequest.Code</span>
                                <span class="return-date">@returnRequest.CreationTime.ToString("dd/MM/yyyy HH:mm")</span>
                            </div>
                            <Tag Color="@GetReturnStatusColor(returnRequest.Status)">
                                @returnRequest.StatusDisplayName
                            </Tag>
                        </div>
                        <div class="return-details">
                            <div class="return-info-row">
                                <div><strong>Lý do:</strong> @returnRequest.Reason</div>
                                <div><strong>Phương thức hoàn:</strong> @returnRequest.RefundMethodDisplayName</div>
                            </div>
                            <div class="return-info-row">
                                <div><strong>Số sản phẩm:</strong> @returnRequest.TotalItemCount</div>
                                <div><strong>Số tiền dự kiến:</strong> <span
                                        class="estimated-amount">@returnRequest.TotalRefundAmount.ToString("N0") đ</span></div>
                            </div>
                            @if (returnRequest.PayBackAmount.HasValue)
                            {
                                <div class="return-financial-info">
                                    <div class="payback-amount">
                                        <strong>Số tiền đã hoàn:</strong>
                                        <span class="actual-amount">@returnRequest.PayBackAmount.Value.ToString("N0") đ</span>
                                    </div>
                                    @if (returnRequest.PayBackDate.HasValue)
                                    {
                                        <div class="payback-date">
                                            <strong>Ngày hoàn tiền:</strong> @returnRequest.PayBackDate.Value.ToString("dd/MM/yyyy HH:mm")
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                        <div class="return-actions">
                            <Button Type="@AntDesign.ButtonType.Link" Size="@AntDesign.ButtonSize.Small"
                                OnClick="@(() => Navigation.NavigateTo($"/order-return/{returnRequest.Id}"))">
                                Xem chi tiết
                            </Button>
                            @if (returnRequest.Status == Domain.Commons.Enums.EOrderReturnStatus.Pending)
                            {
                                <Button Type="@AntDesign.ButtonType.Link" Size="@AntDesign.ButtonSize.Small" Danger="true"
                                    OnClick="@(() => CancelReturn(returnRequest.Id))">
                                    Hủy yêu cầu
                                </Button>
                            }
                        </div>
                    </div>
                }
            </div>
        }
</div>
}


@if (IsReturnModalVisible)
{
    <Modal Title="Tạo yêu cầu hoàn hàng" Visible="@IsReturnModalVisible" OnCancel="@HideReturnModal"           MaxBodyHeight="600"
        OnOk="@CreateReturnRequest" OkText="@("Gửi yêu cầu")" CancelText="@("Hủy")" ConfirmLoading="@IsSubmitting">
        <Form Model="@ReturnRequest" Layout="@FormLayout.Vertical">
            <FormItem Label="Lý do hoàn hàng" Required>
                <TextArea @bind-Value="@ReturnRequest.Reason" Rows="3"
                    Placeholder="Vui lòng mô tả lý do bạn muốn hoàn hàng..." />
            </FormItem>

            <FormItem Label="Chọn sản phẩm cần hoàn" Required>
                <div class="return-items-selection">
                    @foreach (var item in OrderDetailsWithReturn)
                    {
                        <div class="return-item-checkbox">
                            <Checkbox @bind-Checked="@item.IsSelectedForReturn">
                                @item.OrderDetail.ProductName (SKU: @item.OrderDetail.Sku)
                            </Checkbox>
                            @if (item.IsSelectedForReturn)
                            {
                                <AntDesign.InputNumber @bind-Value="@item.ReturnQuantity" Min="1" Max="@item.OrderDetail.Quantity"
                                    Placeholder="Số lượng" />
                            }
                        </div>
                    }
                </div>
            </FormItem>

            <FormItem Label="Phương thức nhận tiền" Required>
                <RadioGroup @bind-Value="@ReturnRequest.RefundMethod">
                    <Radio Value="@ERefundMethod.BankTransfer">Chuyển khoản</Radio>
                    <Radio Value="@ERefundMethod.InStore">Nhận tại cửa hàng</Radio>
                </RadioGroup>
            </FormItem>

            @if (ReturnRequest.RefundMethod == ERefundMethod.BankTransfer)
            {
                <FormItem Label="Thông tin ngân hàng">
                    <div class="form-group">
                        <label>Chọn ngân hàng:</label>
                        <Select TItem="BankDTO" TItemValue="int?" @bind-Value="SelectedBankId" 
                                DataSource="Banks" ValueName="Id" LabelName="Name"
                                Placeholder="Chọn ngân hàng..." 
                                Style="width: 100%;"
                                Loading="@IsLoadingBanks"
                                OnSelectedItemChanged="OnBankSelected">
                            <ItemTemplate  Context="bank">
                                <div style="display: flex; align-items: center; gap: 8px;">
                                    <img src="@((bank as BankDTO)?.Logo)" 
                                         alt="@((bank as BankDTO)?.ShortName)" 
                                         style="width: 56px; height: 56px; object-fit: contain;" />
                                    <span>@((bank as BankDTO)?.Name)</span>
                                </div>
                            </ItemTemplate>
                        </Select>
                    </div>
                    <div class="form-group">
                        <label>Tên chủ tài khoản:</label>
                        <Input @bind-Value="@ReturnRequest.BankAccountName" Placeholder="Tên chủ tài khoản" />
                    </div>
                    <div class="form-group">
                        <label>Số tài khoản:</label>
                        <Input @bind-Value="@ReturnRequest.BankAccountNumber" Placeholder="Số tài khoản ngân hàng" />
                    </div>
                    @if (SelectedBank != null)
                    {
                        <div class="bank-details">
                            <div class="bank-logo">
                                <img src="@SelectedBank.Logo" alt="@SelectedBank.ShortName" style="width: 40px; height: 40px; object-fit: contain;" />
                            </div>
                            <div class="bank-info-text">
                                <div><strong>@SelectedBank.Name</strong></div>
                                <div>Mã ngân hàng: @SelectedBank.Bin</div>
                                <div>Tên viết tắt: @SelectedBank.ShortName</div>
                            </div>
                        </div>
                    }
                </FormItem>
            }
            else
            {
                <FormItem Label="Thông tin liên hệ">
                    <Input @bind-Value="@ReturnRequest.ContactName" Placeholder="Tên người nhận" />
                    <Input @bind-Value="@ReturnRequest.ContactPhone" Placeholder="Số điện thoại" Class="mt-2" />
                </FormItem>
            }

            <!-- File upload section -->
            <div class="form-group">
                <label><b>Đính kèm ảnh/video minh chứng (bắt buộc):</b></label>
                <div class="file-upload-container" style="position: relative;">
                    <div class="file-upload-area @(IsProcessingReturnFiles ? "processing" : "")"
                         style="cursor: pointer; border: 2px dashed #d9d9d9; padding: 20px; text-align: center; border-radius: 8px; background: #fafafa;">
                        @if (IsProcessingReturnFiles)
                        {
                            <div style="display: flex; flex-direction: column; align-items: center;">
                                <Spin Size="SpinSize.Large"/>
                                <div style="margin-top: 8px; color: #666;">Đang xử lý file...</div>
                            </div>
                        }
                        else
                        {
                            <Icon Type="@IconType.Outline.Upload" Style="font-size: 24px; color: #999;"/>
                            <div style="margin-top: 8px; color: #666;">Tải ảnh và video minh chứng</div>
                            <div style="font-size: 12px; color: #999;">Tối đa 10 ảnh + 2 video (Click để chọn file)</div>
                        }
                    </div>

                    <InputFile @ref="FileInputReturn" OnChange="OnReturnFileSelected" multiple accept="image/*,video/*"
                               disabled="@IsProcessingReturnFiles" style="
                               position: absolute;
                               top: 0;
                               left: 0;
                               width: 100%;
                               height: 100%;
                               opacity: 0;
                               cursor: pointer;
                           "/>
                </div>

                @if (ReturnUploads?.Any() == true)
                {
                    <div class="file-preview-container" style="margin-top: 8px;">
                        @for (int i = 0; i < ReturnUploads.Count; i++)
                        {
                            var index = i;
                            var file = ReturnUploads[i];
                            <div class="file-preview-item" style="display:inline-block; position: relative; margin: 4px;">
                                @if (file.ContentType.StartsWith("image/"))
                                {
                                    <img src="@GetReturnFilePreviewUrl(file)" 
                                         style="width: 80px; height: 80px; object-fit: cover; border-radius: 6px; border: 1px solid #e8e8e8;"
                                         alt="@file.FileName" />
                                }
                                else if (file.ContentType.StartsWith("video/"))
                                {
                                    <div style="width: 80px; height: 80px; background: #f0f0f0; border-radius: 6px; border: 1px solid #e8e8e8; display: flex; align-items: center; justify-content: center;">
                                        <Icon Type="@IconType.Outline.PlayCircle" Style="font-size: 24px; color: #666;" />
                                    </div>
                                }
                                <button type="button" @onclick="() => RemoveReturnFile(index)"
                                        style="position: absolute; top: -8px; right: -8px; background: #ff4d4f; color: white; border: none; border-radius: 50%; width: 20px; height: 20px; cursor: pointer; display: flex; align-items: center; justify-content: center; font-size: 12px;">
                                    ×
                                </button>
                                <div style="font-size: 10px; color: #666; margin-top: 2px; text-align: center; max-width: 80px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                    @file.FileName
                                </div>
                            </div>
                        }
                    </div>
                    <div style="margin-top: 8px; font-size: 12px; color: #666;">
                        Đã tải: @(ReturnUploads.Count(x => x.ContentType.StartsWith("image/"))) ảnh, @(ReturnUploads.Count(x => x.ContentType.StartsWith("video/"))) video
                    </div>
                }
            </div>
        </Form>
    </Modal>
}

@code {
    [Parameter]
    public Guid OrderId { get; set; }

    private OrderDTO? Order;
    private List<OrderReturnListDTO> OrderReturns = new();
    private List<OrderDetailWithReturn> OrderDetailsWithReturn = new();
    private bool IsLoading = true;
    private bool IsReturnModalVisible = false;
    private bool IsSubmitting = false;
    private CreatePartialOrderReturnDTO ReturnRequest = new();
    // File upload variables for return
    private List<MeoMeo.Shared.IServices.ReturnFileUpload> ReturnUploads = new();
    private bool IsProcessingReturnFiles = false;
    private InputFile? FileInputReturn;
    private string backendUrl = "";
    
    // VietQR Bank variables
    private List<BankDTO> Banks = new();
    private BankDTO? SelectedBank = null;
    private int? SelectedBankId = null;
    private bool IsLoadingBanks = false;

    private bool CanCreateReturn => Order?.Status == EOrderStatus.Completed &&
    Order.ReceiveDate.HasValue &&
    DaysSinceReceived <= 5;

    private int? DaysSinceReceived => Order?.ReceiveDate.HasValue == true
    ? (int)(DateTime.Now - Order.ReceiveDate.Value).TotalDays
    : null;

    protected override async Task OnInitializedAsync()
    {
        backendUrl = Configuration["BackendUrl"] ?? "";
        await LoadOrderData();
        await LoadBanks();
    }

    private async Task LoadOrderData()
    {
        try
        {
            IsLoading = true;

            // Load order by ID
            Order = await OrderClient.GetOrderByIdAsync(OrderId);

            if (Order != null)
            {
                // Create wrapper objects for order details
                OrderDetailsWithReturn = Order.OrderDetails.Select(od => new OrderDetailWithReturn
                {
                    OrderDetail = od,
                    IsSelectedForReturn = false,
                    ReturnQuantity = 0
                }).ToList();

                // Load return requests for this order
                var returnRequests = await OrderReturnClient.GetByOrderIdAsync(Order.Id);
                OrderReturns = returnRequests ?? new List<OrderReturnListDTO>();
            }
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Lỗi khi tải dữ liệu: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadBanks()
    {
        try
        {
            IsLoadingBanks = true;
            Banks = await VietQRClientService.GetBanksAsync();
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Lỗi khi tải danh sách ngân hàng: {ex.Message}");
        }
        finally
        {
            IsLoadingBanks = false;
        }
    }

    private void OnBankSelected(BankDTO bank)
    {
        SelectedBank = bank;
        SelectedBankId = bank?.Id;
        ReturnRequest.BankName = bank?.Name ?? string.Empty;
        StateHasChanged();
    }

    private void ShowReturnModal()
    {
        ReturnRequest = new CreatePartialOrderReturnDTO
        {
            OrderId = Order!.Id,
            Reason = string.Empty,
            RefundMethod = ERefundMethod.BankTransfer,
            Items = new List<OrderReturnItemDTO>(),
            FileUploads = new List<OrderReturnFileUpload>()
        };

        // Reset selection
        foreach (var item in OrderDetailsWithReturn)
        {
            item.IsSelectedForReturn = false;
            item.ReturnQuantity = 0;
        }

        // Reset file uploads
        ReturnUploads.Clear();
        
        // Reset bank selection
        SelectedBank = null;
        SelectedBankId = null;

        IsReturnModalVisible = true;
    }

    private void HideReturnModal()
    {
        IsReturnModalVisible = false;
    }

    private async Task CreateReturnRequest()
    {
        try
        {
            // Validate form
            if (string.IsNullOrWhiteSpace(ReturnRequest.Reason))
            {
                MessageModalService.Error("Vui lòng nhập lý do hoàn hàng");
                return;
            }

            var selectedItems = OrderDetailsWithReturn.Where(x => x.IsSelectedForReturn && x.ReturnQuantity > 0).ToList();
            if (!selectedItems.Any())
            {
                MessageModalService.Error("Vui lòng chọn ít nhất một sản phẩm để hoàn");
                return;
            }

            // Validate file uploads
            if (!ReturnUploads?.Any() == true)
            {
                MessageModalService.Error("Vui lòng đính kèm ít nhất một ảnh hoặc video minh chứng");
                return;
            }

            // Build return items
            ReturnRequest.Items = selectedItems.Select(x => new OrderReturnItemDTO
            {
                OrderDetailId = x.OrderDetail.Id,
                Quantity = x.ReturnQuantity,
                Reason = string.Empty
            }).ToList();

            // Build return files
            ReturnRequest.FileUploads = ReturnUploads.Select(file => new OrderReturnFileUpload
            {
                FileName = file.FileName,
                ContentType = file.ContentType
            }).ToList();

            IsSubmitting = true;
            var result = await OrderReturnClient.CreatePartialOrderReturnAsync(ReturnRequest, ReturnUploads);

            if (result.ResponseStatus == BaseStatus.Success)
            {
                MessageModalService.Success(result.Message ?? "Đã tạo yêu cầu hoàn hàng thành công");
                HideReturnModal();
                await LoadOrderData(); // Reload to show new return request
            }
            else
            {
                MessageModalService.Error(result.Message ?? "Không thể tạo yêu cầu hoàn hàng");
            }
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Lỗi: {ex.Message}");
        }
        finally
        {
            IsSubmitting = false;
        }
    }

    private async Task CancelReturn(Guid returnId)
    {
        try
        {
            var result = await OrderReturnClient.CancelOrderReturnAsync(returnId);
            if (result.ResponseStatus == BaseStatus.Success)
            {
                MessageModalService.Success("Hủy yêu cầu hoàn trả thành công!");
                await LoadOrderData(); // Reload to refresh return status
            }
            else
            {
                MessageModalService.Error(result.Message);
            }
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Lỗi khi hủy yêu cầu hoàn trả: {ex.Message}");
        }
    }

    private string GetStatusName(EOrderStatus status) => status switch
    {
        EOrderStatus.Pending => "Chờ xác nhận",
        EOrderStatus.Confirmed => "Đã xác nhận",
        EOrderStatus.InTransit => "Đang giao",
        EOrderStatus.Completed => "Hoàn thành",
        EOrderStatus.Canceled => "Đã hủy",
        _ => status.ToString()
    };

    private string GetStatusColor(EOrderStatus status) => status switch
    {
        EOrderStatus.Pending => "orange",
        EOrderStatus.Confirmed => "blue",
        EOrderStatus.InTransit => "geekblue",
        EOrderStatus.Completed => "green",
        EOrderStatus.Canceled => "red",
        _ => "default"
    };

    private string GetReturnStatusName(EOrderReturnStatus status) => status switch
    {
        EOrderReturnStatus.Pending => "Chờ duyệt",
        EOrderReturnStatus.Approved => "Đã duyệt",
        EOrderReturnStatus.Rejected => "Từ chối",
        EOrderReturnStatus.Received => "Đã nhận hàng",
        EOrderReturnStatus.Refunded => "Đã hoàn tiền",
        _ => status.ToString()
    };

    private string GetReturnStatusColor(EOrderReturnStatus status) => status switch
    {
        EOrderReturnStatus.Pending => "orange",
        EOrderReturnStatus.Approved => "blue",
        EOrderReturnStatus.Rejected => "red",
        EOrderReturnStatus.Received => "geekblue",
        EOrderReturnStatus.Refunded => "green",
        _ => "default"
    };

    private string GetRefundMethodName(ERefundMethod method) => method switch
    {
        ERefundMethod.BankTransfer => "Chuyển khoản",
        ERefundMethod.InStore => "Nhận tại cửa hàng",
        _ => method.ToString()
    };

    // Return file upload methods
    private async Task OnReturnFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            IsProcessingReturnFiles = true;
            StateHasChanged();

            var files = e.GetMultipleFiles(12); // Max 12 files total
            var processedFiles = new List<MeoMeo.Shared.IServices.ReturnFileUpload>();

            // Count current files
            var currentImageCount = ReturnUploads.Count(x => x.ContentType.StartsWith("image/"));
            var currentVideoCount = ReturnUploads.Count(x => x.ContentType.StartsWith("video/"));

            // Count new files to be added
            var newImageCount = 0;
            var newVideoCount = 0;

            foreach (var file in files)
            {
                try
                {
                    var maxSize = file.ContentType.StartsWith("video/") ? 50 * 1024 * 1024 : 10 * 1024 * 1024; // 50MB for video, 10MB for
                if (file.Size > maxSize)
                    {
                        MessageModalService.Error($"File {file.Name} quá lớn. Kích thước tối đa: {maxSize / (1024 * 1024)}MB");
                        continue;
                    }

                    var isImage = file.ContentType.StartsWith("image/");
                    var isVideo = file.ContentType.StartsWith("video/");

                    if (!isImage && !isVideo)
                    {
                        MessageModalService.Error($"File {file.Name} không phải là ảnh hoặc video.");
                        continue;
                    }

                    // Check limits for each file type
                    if (isVideo)
                    {
                        if (currentVideoCount + newVideoCount >= 2)
                        {
                            MessageModalService.Warning("Chỉ được tải tối đa 2 video");
                            continue;
                        }
                        newVideoCount++;
                    }
                    else if (isImage)
                    {
                        if (currentImageCount + newImageCount >= 10)
                        {
                            MessageModalService.Warning("Chỉ được tải tối đa 10 ảnh");
                            continue;
                        }
                        newImageCount++;
                    }

                    var base64 = await ConvertToBase64(file);
                    var fileUpload = new MeoMeo.Shared.IServices.ReturnFileUpload
                    {
                        FileName = file.Name,
                        ContentType = file.ContentType,
                        Base64Data = base64
                    };

                    processedFiles.Add(fileUpload);
                }
                catch (Exception ex)
                {
                    MessageModalService.Error($"Lỗi xử lý file {file.Name}: {ex.Message}");
                }
            }

            ReturnUploads.AddRange(processedFiles);
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Lỗi khi tải file: {ex.Message}");
        }
        finally
        {
            IsProcessingReturnFiles = false;
            StateHasChanged();
        }
    }

    private string GetReturnFilePreviewUrl(MeoMeo.Shared.IServices.ReturnFileUpload file)
    {
        if (!string.IsNullOrEmpty(file.Base64Data))
        {
            return $"data:{file.ContentType};base64,{file.Base64Data}";
        }
        return $"{backendUrl}/Images/fallback.jpeg";
    }

    private void RemoveReturnFile(int index)
    {
        if (index >= 0 && index < ReturnUploads.Count)
        {
            ReturnUploads.RemoveAt(index);
            StateHasChanged();
        }
    }

    private async Task<string> ConvertToBase64(IBrowserFile file)
    {
        var maxSize = file.ContentType.StartsWith("video/") ? 50 * 1024 * 1024 : 10 * 1024 * 1024;
        using var stream = file.OpenReadStream(maxAllowedSize: maxSize);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        var bytes = memoryStream.ToArray();
        return Convert.ToBase64String(bytes);
    }

    private class OrderDetailWithReturn
    {
        public OrderDetailDTO OrderDetail { get; set; } = null!;
        public bool IsSelectedForReturn { get; set; }
        public int ReturnQuantity { get; set; }
    }
}

<style>
    .order-detail-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .order-header h2 {
        color: #00833D;
        margin: 0;
    }

    .order-info-section,
    .order-items-section,
    .return-section,
    .return-history-section {
        background: white;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .order-info-section h3,
    .order-items-section h3,
    .return-section h3,
    .return-history-section h3 {
        color: #00833D;
        margin-bottom: 20px;
        border-bottom: 2px solid #00833D;
        padding-bottom: 10px;
    }

    .info-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
        padding: 8px 0;
    }

    .info-item .label {
        font-weight: 600;
        color: #333;
    }

    .price {
        font-weight: 600;
        color: #00833D;
        font-size: 18px;
    }

    .order-items {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .order-item {
        display: flex;
        align-items: center;
        padding: 15px;
        border: 1px solid #e8e8e8;
        border-radius: 8px;
        background: #fafafa;
    }

    .item-image img {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 4px;
        margin-right: 15px;
    }

    .item-info {
        flex: 1;
    }

    .item-name {
        font-weight: 600;
        margin-bottom: 5px;
    }

    .item-sku {
        color: #666;
        font-size: 14px;
        margin-bottom: 5px;
    }

    .item-price {
        color: #00833D;
    }

    .item-total {
        font-weight: 600;
        color: #00833D;
        font-size: 16px;
    }

    .return-info {
        margin-bottom: 20px;
    }

    .return-history-section .return-item {
        border: 1px solid #e8e8e8;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
        background: white;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .return-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #f0f0f0;
    }

    .return-header-left {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .return-code {
        font-weight: 600;
        color: #00833D;
        font-size: 16px;
    }

    .return-date {
        color: #666;
        font-size: 14px;
    }

    .return-details {
        margin-bottom: 15px;
    }

    .return-info-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
        padding: 5px 0;
    }

    .return-info-row div {
        flex: 1;
        font-size: 14px;
    }

    .estimated-amount {
        color: #666;
        font-style: italic;
    }

    .return-financial-info {
        margin-top: 15px;
        padding: 15px;
        background: #f0f8ff;
        border-radius: 8px;
        border-left: 4px solid #00833D;
    }

    .payback-amount {
        margin-bottom: 8px;
    }

    .actual-amount {
        color: #00833D;
        font-weight: 600;
        font-size: 16px;
    }

    .payback-date {
        color: #666;
        font-size: 14px;
    }

    .return-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        padding-top: 10px;
        border-top: 1px solid #f0f0f0;
    }

    /* File Upload Styles */
    .file-upload-container {
        margin-bottom: 15px;
    }

    .file-upload-area {
        transition: all 0.3s ease;
        border: 2px dashed #d9d9d9;
        background: #fafafa;
    }

    .file-upload-area:hover {
        border-color: #00833D;
        background: #f6ffed;
    }

    .file-upload-area.processing {
        border-color: #1890ff;
        background: #e6f7ff;
    }

    .file-preview-container {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-top: 8px;
    }

    .file-preview-item {
        position: relative;
        display: inline-block;
    }

    .file-preview-item img {
        border-radius: 6px;
        border: 1px solid #e8e8e8;
        transition: transform 0.2s ease;
    }

    .file-preview-item:hover img {
        transform: scale(1.05);
    }

    .file-preview-item button {
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        transition: all 0.2s ease;
    }

    .file-preview-item button:hover {
        background: #d32f2f !important;
        transform: scale(1.1);
    }

    .bank-details {
        margin-top: 15px;
        padding: 15px;
        background: #f0f8ff;
        border-radius: 8px;
        border-left: 4px solid #1890ff;
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .bank-logo {
        flex-shrink: 0;
    }

    .bank-info-text {
        flex: 1;
    }

    .bank-info-text div {
        margin-bottom: 4px;
        font-size: 14px;
    }

    .bank-info-text div:first-child {
        font-size: 16px;
        color: #1890ff;
    }

    .return-items-selection {
        max-height: 300px;
        overflow-y: auto;
        border: 1px solid #d9d9d9;
        border-radius: 4px;
        padding: 10px;
    }

    .return-item-checkbox {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 0;
        border-bottom: 1px solid #f0f0f0;
    }

    .return-item-checkbox:last-child {
        border-bottom: none;
    }
</style>
