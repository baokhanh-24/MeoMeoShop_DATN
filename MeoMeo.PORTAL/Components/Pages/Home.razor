@page "/"
@using System.ComponentModel.DataAnnotations
@inject MessageService MessageService
@inject NavigationManager NavigationManager
@using MeoMeo.Shared.IServices
@using System.Linq
@using MeoMeo.Contract.DTOs.Product
@using MeoMeo.Contract.DTOs
@using MeoMeo.Contract.DTOs.Size
@using MeoMeo.Domain.Commons
@using MeoMeo.PORTAL.Components.Pages.ProductCard
@using ButtonType = AntDesign.ButtonType
@inject IProductClientService ProductClientService
@inject ISizeClientService SizeClientService
@inject IColourClientService ColourClientService
@inject IJSRuntime JS
@inject IConfiguration Configuration

<video autoplay muted loop playsinline >
                <source src="videos/background.mp4" type="video/mp4">
            </video>

<GridRow Class="position-relative overflow-hidden bg-light-blue" Gutter="16">

    <Carousel Autoplay="@TimeSpan.FromSeconds(3)" >
        <CarouselSlick>
            <div class="container">
                <GridRow Class="align-items-center">
                    <GridCol Span="12">
                    <div>
                        <Title Level="1" Class="display-2 text-uppercase text-dark pb-5">Your Products Are
                            Great.</Title>
                        <Button Type="@ButtonType.Dashed" Class="btn-medium btn-dark text-uppercase btn-rounded"
                                OnClick="@(() => NavigateToShop())">
                            Mua Sản Phẩm
                        </Button>
                    </div>
                    </GridCol>
                    <GridCol Md="11">
                    <div class="image-holder">
                        <img src="images/giaynike.png" alt="banner"/>
                    </div>
                    </GridCol>
                </GridRow>
            </div>
        </CarouselSlick>
        <CarouselSlick>
            <div class="container">
                <GridRow Class="flex-wrap align-items-center" Gutter="16">
                    <GridCol Md="12">
                    <div class="banner-content">
                        <Title Level="1" Class="display-2 text-uppercase text-dark pb-5">Technology Hack You Won't
                            Get</Title>
                        <Button Type="@ButtonType.Dashed" Class="btn-medium btn-dark text-uppercase btn-rounded"
                                OnClick="@(() => NavigateToShop())">
                            Mua Sản Phẩm
                        </Button>
                    </div>
                    </GridCol>
                    <GridCol Md="11">
                    <div class="image-holder">
                        <img src="images/giaynike.png" alt="banner"/>
                    </div>
                    </GridCol>
                </GridRow>
            </div>
        </CarouselSlick>
    </Carousel>
</GridRow>

<GridRow Gutter="16">
    <GridCol Span="22" Offset="1">
<GridRow Class="padding-large" Gutter="16">
    <GridCol Span="6" Class="pb-3">
    <div class="icon-box d-flex">
        <div class="icon-box-icon pe-3 pb-3">
            <Icon Type="shopping-cart" Class="cart-outline"/>
        </div>
        <div class="icon-box-content">
            <Title Level="3" Class="card-title text-uppercase text-dark">Giao hàng miễn phí</Title>
            <Paragraph>Chúng tôi luôn sẵn sàng phục vụ bạn với dịch vụ tốt nhất.</Paragraph>
        </div>
    </div>
    </GridCol>
    <GridCol Span="6" Class="pb-3">
    <div class="icon-box d-flex">
        <div class="icon-box-icon pe-3 pb-3">
            <Icon Type="quality" Class="quality"/>
        </div>
        <div class="icon-box-content">
            <Title Level="3" Class="card-title text-uppercase text-dark">Đảm bảo chất lượng</Title>
            <Paragraph>Sản phẩm của chúng tôi luôn đảm bảo chất lượng hàng đầu.</Paragraph>
        </div>
    </div>
    </GridCol>
    <GridCol Span="6" Class="pb-3">
    <div class="icon-box d-flex">
        <div class="icon-box-icon pe-3 pb-3">
            <Icon Type="tag" Class="price-tag"/>
        </div>
        <div class="icon-box-content">
            <Title Level="3" Class="card-title text-uppercase text-dark">Ưu đãi mỗi ngày</Title>
            <Paragraph>Nhận ưu đãi hấp dẫn mỗi ngày cho mọi sản phẩm.</Paragraph>
        </div>
    </div>
    </GridCol>
    <GridCol Span="6" Class="pb-3">
    <div class="icon-box d-flex">
        <div class="icon-box-icon pe-3 pb-3">
            <Icon Type="safety" Class="shield-plus"/>
        </div>
        <div class="icon-box-content">
            <Title Level="3" Class="card-title text-uppercase text-dark">Thanh toán an toàn 100%</Title>
            <Paragraph>Bảo mật tuyệt đối trong mọi giao dịch thanh toán.</Paragraph>
        </div>
    </div>
    </GridCol>
</GridRow>

<GridRow Class="product-store position-relative padding-large no-padding-top" Id="product" Gutter="16">
    <GridCol Span="4" Md="4" Sm="24">
        <div class="space-coverage">
            <Title Level="4">Bộ lọc</Title>
            <Divider />
            <Form TModel="GetListProductRequestDTO" Model="filter">
                <FormItem Label="Từ khóa">
                    <Search Placeholder="Tìm theo tên" @bind-Value="filter.NameFilter" OnSearch="_ => ApplyFilter()" />
                </FormItem>
                <FormItem Label="Màu sắc">
                    <Select TItem="ColourDTO" TItemValue="Guid?" 
                            @bind-Value="filter.ColourFilter"
                            DataSource="colours"
                            ValueName="Id" 
                            LabelName="Name"
                            AllowClear
                            Placeholder="Chọn màu">
                    </Select>
                </FormItem>
                <FormItem Label="Size">
                    <Select TItem="SizeDTO" TItemValue="Guid?" 
                            @bind-Value="filter.SizeFilter"
                            DataSource="sizes"
                            ValueName="Id" 
                            LabelName="Value"
                            AllowClear
                            Placeholder="Chọn size">
                    </Select>
                </FormItem>
                <FormItem Label="Khoảng giá">
                    <Select TItem="PriceRangeOption" TItemValue="int?" 
                            @bind-Value="selectedPriceRange"
                            OnChange="OnPriceRangeChanged"
                            AllowClear Placeholder="Chọn mức giá"
                            ValueName="Id" LabelName="Label"
                            DataSource="priceRanges">
                    </Select>
                </FormItem>
                <FormItem>
                    <Button Type="@ButtonType.Primary" OnClick="ApplyFilter">Áp dụng</Button>
                    <Button Class="ms-2" OnClick="ResetFilter">Xóa lọc</Button>
                </FormItem>
            </Form>
        </div>
    </GridCol>
    <GridCol Span="20" Md="20" Sm="24">
        <ProductCard LstProduct="@products" IsGridSelected="true" />
        <div class="mt-4 d-flex justify-content-center">
            <Pagination Total="@totalRecords" PageSize="@filter.PageSize" Current="@filter.PageIndex" OnChange="OnPageChanged" />
        </div>
    </GridCol>
</GridRow>
    </GridCol>
</GridRow>
<GridRow Class="bg-light-blue overflow-hidden mt-5 padding-xlarge"
     style="background-image: url('images/single-image1.png');background-position: right; background-repeat: no-repeat;">
    <GridCol Md="12" Sm="24">
    <div class="text-content offset-4 padding-medium">
        <Title Level="3">Giảm 10%</Title>
        <Title Level="2" Class="display-2 pb-5 text-uppercase text-dark">New year sale</Title>
        <Button Type="@ButtonType.Dashed" Class="btn-medium btn-dark text-uppercase btn-rounded"
                OnClick="@(() => NavigateToShop())">
            Mua ngay
        </Button>
    </div>
    </GridCol>
    <GridCol Md="12" Sm="24">
    </GridCol>
</GridRow>

<!-- Best Sellers -->
<GridRow Class="position-relative padding-large">
    <GridCol Span="24">
    <div class="position-relative">
        <Title Level="2" Class="text-uppercase text-dark mb-3">Sản phẩm bán chạy trong tuần</Title>
        @if (bestSellers.Any())
        {
            <Carousel Dots="false">
                @foreach (var group in ChunkBestSellers(bestSellers, 4))
                {
                    <CarouselSlick>
                        <GridRow Gutter="16">
                            @foreach (var item in group)
                            {
                                <GridCol Span="6" Md="8" Sm="12">
                                    <Card Class="h-100">
                                        <div class="product-image">
                                            <img src="@FormatThumbnail(item.Thumbnail)" alt="@item.Name" />
                                        </div>
                                        <div class="mt-2 fw-bold">@item.Name</div>
                                        <div class="text-muted">Đã bán: @item.TotalSold</div>
                                        <div class="mt-1">
                                            @if (item.MinPrice.HasValue)
                                            {
                                                <span>
                                                    @(((decimal)item.MinPrice.Value).ToString("C0", new System.Globalization.CultureInfo("vi-VN")))
                                                </span>
                                                @if (item.MaxPrice.HasValue && item.MaxPrice.Value != item.MinPrice.Value)
                                                {
                                                    <span> - @(((decimal)item.MaxPrice.Value).ToString("C0", new System.Globalization.CultureInfo("vi-VN")))</span>
                                                }
                                            }
                                        </div>
                                    </Card>
                                </GridCol>
                            }
                        </GridRow>
                    </CarouselSlick>
                }
            </Carousel>
        }
        else
        {
            <Empty />
        }
    </div>
    </GridCol>
</GridRow>

<GridRow Class="position-relative">
    <GridCol Span="24">
    <div class="review-content position-relative">
        <Carousel Autoplay="@TimeSpan.FromSeconds(3)" Class="testimonial-swiper">
            <div class="quotation text-center">
                <Icon Type="quote" Class="quote"/>
            </div>
            @foreach (var testimonial in Testimonials)
            {
                <CarouselSlick>
                    <div class="text-center d-flex justify-content-center">
                        <div class="review-item GridCol-md-10">
                            <blockquote>@testimonial.Comment</blockquote>
                            <div class="rating">
                                <Rate Disabled DefaultValue="@testimonial.Rating" />
                            </div>
                            <div class="author-detail">
                                <div class="name text-dark text-uppercase pt-2">@testimonial.AuthorName</div>
                            </div>
                        </div>
                    </div>
                </CarouselSlick>
            }
        </Carousel>
    </div>
    </GridCol>
</GridRow>

<!-- Subscribe Section -->
<GridRow Class="container-grid padding-large position-relative overflow-hidden">
    <GridCol Span="24">
    <div class="subscribe-content bg-dark d-flex flex-wrap justify-content-center align-items-center padding-medium">
        <GridCol Md="12" Sm="24">
        <div class="display-header pe-3">
            <Title Level="2" Class="display-7 text-uppercase text-light">Đăng ký ngay</Title>
            <Paragraph Class="text-light">
                Nhận thông tin mới nhất, cập nhật và ưu đãi trực tiếp vào hộp thư của bạn.
            </Paragraph>
        </div>
        </GridCol>
        <GridCol Md="11" Sm="24">
            @* <Form TModel="SubscriptionModel"  *@
            @*       Model="subscriptionModel"  *@
            @*       OnFinish="@HandleSubscribe"  *@
            @*       Class="subscription-form validate"> *@
            @*     <FormItem Label="Email" Name="@nameof(SubscriptionModel.Email)"> *@
            @*         <Input @bind-Value="subscriptionModel.Email" /> *@
            @*     </FormItem> *@
            @* </Form> *@
        </GridCol>
    </div>
    </GridCol>
</GridRow>
@code {
    private List<ProductResponseDTO> products { get; set; } = new();
    private List<BestSellerItemDTO> bestSellers { get; set; } = new();
    private List<ProductResponseDTO> recentlyViewed { get; set; } = new();
    private List<Testimonial> Testimonials { get; set; } = new();
    private SubscriptionModel subscriptionModel = new();
    private GetListProductRequestDTO filter = new() { PageIndex = 1, PageSize = 12 };
    private List<SizeDTO> sizes = new();
    private List<ColourDTO> colours = new();
    public class PriceRangeOption
    {
        public int Id { get; set; }   // dùng cho bind
        public string Label { get; set; }
    }
    private int? selectedPriceRange;
    private List<PriceRangeOption> priceRanges = new()
    {
        new PriceRangeOption { Id = 1, Label = "Dưới 500.000đ" },
        new PriceRangeOption { Id = 2, Label = "500.000đ - 1.000.000đ" },
        new PriceRangeOption { Id = 3, Label = "1.000.000đ - 2.000.000đ" },
        new PriceRangeOption { Id = 4, Label = "2.000.000đ - 3.000.000đ" },
        new PriceRangeOption { Id = 5, Label = "3.000.000đ - 4.000.000đ" },
        new PriceRangeOption { Id = 6, Label = "4.000.000đ - 5.000.000đ" },
        new PriceRangeOption { Id = 7, Label = "Trên 5.000.000đ" },
    };
    private int totalRecords { get; set; }
    private decimal GetRandomRating()
    {
    var random = new Random();
    return Convert.ToDecimal(Math.Round(random.NextDouble() * 10) / 2);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadFilterOptions();
        await LoadProductsAsync();
        await LoadBestSellersAsync();
        await LoadRecentlyViewedAsync();

        // Initialize testimonials
        Testimonials = new List<Testimonial>
        {
            new Testimonial
            {
                AuthorName = "Emma Chamberlin",
                Comment = "The product is amazing, I am really satisfied with the quality and service. I will continue to shop here and recommend it to my friends.",
                Rating = 4
            }
        };
    }

    private async Task AddToCart(ProductResponseDTO product)
    {
        MessageService.Success($"Đã thêm {product.Name} vào giỏ hàng");
    }

    private async Task HandleSubscribe()
    {
        MessageService.Success("Đăng ký thành công!");
        subscriptionModel.Email = string.Empty;
    }

    private void NavigateToShop()
    {
        NavigationManager.NavigateTo("/Shop");
    }

    private async Task LoadFilterOptions()
    {
        // sizes
        var sizeResp = await SizeClientService.GetAllSizeAsync(new GetListSizeRequestDTO { PageIndex = 1, PageSize = 100 });
        sizes = sizeResp.Items ?? new List<SizeDTO>();
        // colours
        var colourResp = await ColourClientService.GetAllColoursAsync();
        colours = (colourResp ?? Enumerable.Empty<MeoMeo.Domain.Entities.Colour>())
            .Select(c => new ColourDTO { Id = c.Id, Name = c.Name, Code = c.Code, Status = c.Status })
            .ToList();
    }

    private async Task LoadProductsAsync()
    {
        var response = await ProductClientService.GetAllProductAsync(filter);
        products = response.Items ?? new List<ProductResponseDTO>();
        totalRecords = response.TotalRecords;
        StateHasChanged();
    }

    private async Task LoadBestSellersAsync()
    {
        bestSellers = await ProductClientService.GetWeeklyBestSellersAsync(12);
    }

    private async Task LoadRecentlyViewedAsync()
    {
        try
        {
            var ids = await JS.InvokeAsync<string?>("localStorage.getItem", "recent_product_ids");
            if (!string.IsNullOrWhiteSpace(ids))
            {
                var idList = ids.Split(',', StringSplitOptions.RemoveEmptyEntries)
                    .Select(s => Guid.TryParse(s, out var id) ? id : Guid.Empty)
                    .Where(g => g != Guid.Empty)
                    .Distinct()
                    .Take(12)
                    .ToList();
                // TODO: call API to get products by these ids when endpoint available
            }
        }
        catch { }
    }

    private static List<List<BestSellerItemDTO>> ChunkBestSellers(List<BestSellerItemDTO> list, int size)
    {
        var result = new List<List<BestSellerItemDTO>>();
        for (int i = 0; i < list.Count; i += size)
        {
            result.Add(list.GetRange(i, Math.Min(size, list.Count - i)));
        }
        return result;
    }

    private string FormatThumbnail(string? thumbnail)
    {
        if (string.IsNullOrWhiteSpace(thumbnail)) return "images/products/chilli.png";
        var baseUrl = Configuration?["ApiSettings:BaseUrl"] ?? string.Empty;
        return $"{baseUrl.TrimEnd('/')}/{thumbnail.TrimStart('/')}";
    }

    private async Task OnPageChanged(PaginationEventArgs args)
    {
        filter.PageIndex = args.Page;
        filter.PageSize = args.PageSize;
        await LoadProductsAsync();
    }

    private async Task ApplyFilter()
    {
        filter.PageIndex = 1;
        await LoadProductsAsync();
    }

    private void ResetFilter()
    {
        filter = new GetListProductRequestDTO { PageIndex = 1, PageSize = 12 };
        selectedPriceRange = null;
        _ = LoadProductsAsync();
    }

    private void OnPriceRangeChanged(int? value)
    {
        selectedPriceRange = value;
        switch (value)
        {
            case 1: filter.MinPriceFilter = 0; filter.MaxPriceFilter = 500_000; break;
            case 2: filter.MinPriceFilter = 500_000; filter.MaxPriceFilter = 1_000_000; break;
            case 3: filter.MinPriceFilter = 1_000_000; filter.MaxPriceFilter = 2_000_000; break;
            case 4: filter.MinPriceFilter = 2_000_000; filter.MaxPriceFilter = 3_000_000; break;
            case 5: filter.MinPriceFilter = 3_000_000; filter.MaxPriceFilter = 4_000_000; break;
            case 6: filter.MinPriceFilter = 4_000_000; filter.MaxPriceFilter = 5_000_000; break;
            case 7: filter.MinPriceFilter = 5_000_000; filter.MaxPriceFilter = null; break;
            default: filter.MinPriceFilter = null; filter.MaxPriceFilter = null; break;
        }
    }

    public class Testimonial
    {
        public string AuthorName { get; set; }
        public string Comment { get; set; }
        public int Rating { get; set; }
    }

    public class SubscriptionModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; }
    }
    
}