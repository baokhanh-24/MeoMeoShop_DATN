@page "/profile/reviews"
@using MeoMeo.Shared.IServices
@using MeoMeo.Contract.DTOs
@using MeoMeo.Shared.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using MeoMeo.Contract.DTOs.Order
@using MeoMeo.Contract.DTOs.OrderDetail
@using MeoMeo.PORTAL.Components.Layout
@using MeoMeo.Shared.Utilities
@using AntDesign
@using MeoMeo.Contract.Commons
@using MeoMeo.Contract.DTOs.Product
@using MeoMeo.Contract.DTOs.ProductReview
@using Microsoft.AspNetCore.Http
@using ButtonType = AntDesign.ButtonType
@inject IProductReviewClientService ProductReviewService
@inject IProductClientService ProductService
@inject IOrderClientService OrderService
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject MessageService MessageService
@inject IConfiguration Configuration
@layout ProfileLayout

<div class="product-reviews-container">
    <div class="page-header">
        <Title Level="2">
            <Icon Type="star" />
            Đánh giá sản phẩm
        </Title>
        <p class="page-subtitle">Xem và quản lý đánh giá sản phẩm của bạn</p>
    </div>

    <!-- Tabs -->
    <Tabs ActiveKey="@activeTab" OnTabClick="OnTabClick">
        <TabPane Key="pending" Tab="Chờ đánh giá">
            <div class="pending-reviews-section">
                @if (isLoading)
                {
                    <div class="loading-section">
                        <Spin Size="SpinSize.Large" />
                        <p>Đang tải sản phẩm...</p>
                    </div>
                }
                else if (unreviewedItems.Any())
                {
                    <div class="items-list">
                        @foreach (var item in unreviewedItems)
                        {
                            <Card Class="item-review-card" Style="margin-bottom: 16px;">
                                <div class="item-header">
                                    <div class="item-info">
                                        <div class="product-image">
                                            <img src="@GetProductImageUrl(item.ProductImage)" alt="@item.ProductName" />
                                        </div>
                                        <div class="product-details">
                                            <Title Level="5">@item.ProductName</Title>
                                            <p class="product-variant">@item.ColorName - @item.SizeName</p>
                                            <p class="order-info">Đơn hàng: #@item.OrderCode | Ngày: @item.OrderDate.ToString("dd/MM/yyyy")</p>
                                        </div>
                                    </div>
                                    <Button Type="@ButtonType.Primary" Icon="star" @onclick="() => OpenReviewModal(item)">
                                        Đánh giá
                                    </Button>
                                </div>
                            </Card>
                        }
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <Empty>
                            <Button Type="@ButtonType.Primary" Icon="shopping" @onclick="GoToProducts">
                                Mua sắm ngay
                            </Button>
                        </Empty>
                    </div>
                }
            </div>
        </TabPane>

        <TabPane Key="completed" Tab="Đã đánh giá">
            <div class="completed-reviews-section">
                @if (isLoading)
                {
                    <div class="loading-section">
                        <Spin Size="SpinSize.Large" />
                        <p>Đang tải đánh giá...</p>
                    </div>
                }
                else if (userReviews.Any())
                {
                    <div class="reviews-list">
                        @foreach (var review in userReviews)
                        {
                            <Card Class="review-card" Style="margin-bottom: 16px;">
                                <div class="review-header">
                                    <div class="product-info">
                                        <div class="product-image">
                                            <img src="@GetProductImageUrl(review.ProductDetail?.Product?.Thumbnail)" alt="@review.ProductDetail?.Product?.Name" />
                                        </div>
                                        <div class="product-details">
                                            <Title Level="5">@review.ProductDetail?.Product?.Name</Title>
                                            <p class="product-variant">@review.ProductDetail?.Colour?.Name - @review.ProductDetail?.Size?.Name</p>
                                            <p class="review-date">@review.CreationTime.ToString("dd/MM/yyyy HH:mm")</p>
                                        </div>
                                    </div>
                                    <div class="review-rating">
                                        <Rate Value="@review.Rating" Disabled="true" />
                                    </div>
                                </div>

                                <Divider />

                                <div class="review-content">
                                    <p>@review.Content</p>
                                    @if (review.ProductReviewFiles?.Any() == true)
                                    {
                                        <div class="review-images">
                                            <ImagePreviewGroup>
                                                @foreach (var image in review.ProductReviewFiles)
                                                {
                                                    <Image Width="80" Height="80" Src="@GetProductImageUrl(image.FileUrl)" />
                                                }
                                            </ImagePreviewGroup>
                                        </div>
                                    }
                                </div>

                                <div class="review-actions">
                                    <Space>
                                        <Button Type="@ButtonType.Link" Icon="edit" @onclick="() => EditReview(review)">
                                            Chỉnh sửa
                                        </Button>
                                        <Button Type="@ButtonType.Link" Icon="delete" Danger="true"
                                            @onclick="() => DeleteReview(review.Id)">
                                            Xóa
                                        </Button>
                                    </Space>
                                </div>
                            </Card>
                        }
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <Empty>
                            <Button Type="@ButtonType.Primary" Icon="star" @onclick="() => activeTab = 'pending'">
                                Xem sản phẩm cần đánh giá
                            </Button>
                        </Empty>
                    </div>
                }
            </div>
        </TabPane>
    </Tabs>
</div>

<!-- Review Modal -->
<Modal Title="@("Đánh giá sản phẩm " + (selectedItem?.ProductName ?? ""))"  
       @bind-Visible="showReviewModal"  
       Width="800" 
       OnCancel="CancelReview" 
       Footer="null"> 

    @if (selectedItem != null)
    {
        <GridRow Gutter="(16, 16)" Align="RowAlign.Middle"> 
            <GridCol Span="4"> 
                <Image Width="100%"
                       Class="product-img" Fallback="@(backendUrl+"/Images/fallback.jpeg")"
                       Src="@GetProductImageUrl(selectedItem.ProductImage)" />
            </GridCol> 
            <GridCol Span="20"> 
                <div>
                    <div class="d-flex justify-content-between align-items-center">
                        <label>Thông tin sản phẩm:</label>
                        <div class="mt-2 text-muted" style="font-size:12px;">
                            <Icon Type="@IconType.Outline.InfoCircle" style="margin-right: 4px;" />
                            Đánh giá sản phẩm từ đơn hàng đã mua.
                        </div>
                    </div>

                    <!-- Thông tin đơn hàng -->
                    <div style="margin-top: 12px; padding: 12px; background: #f6ffed; border-radius: 6px; border-left: 4px solid #52c41a;">
                        <div style="font-size: 13px; color: #666; display: flex; align-items: center; gap: 8px;">
                            <Icon Type="@IconType.Outline.ShoppingCart" style="color: #52c41a;" />
                            <span>Đánh giá từ đơn hàng: <strong>@selectedItem.OrderCode</strong></span>
                            <span>•</span>
                            <span>Ngày đặt: @selectedItem.OrderDate.ToString("dd/MM/yyyy")</span>
                        </div>
                    </div>

                    <!-- Thông tin sản phẩm -->
                    <div style="margin-top: 12px; padding: 12px; background: #f0f8ff; border-radius: 6px; border-left: 4px solid #1890ff;">
                        <div style="font-size: 13px; color: #666;">
                            <div style="font-weight: 500; color: #1890ff; margin-bottom: 4px;">
                                @selectedItem.ProductName
                            </div>
                            <div style="color: #666;">
                                Phân loại: @selectedItem.ColorName - @selectedItem.SizeName
                            </div>
                            <div style="color: #666;">
                                Số lượng: @selectedItem.Quantity | Giá: @selectedItem.Price.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))
                            </div>
                        </div>
                    </div>
                </div>
            </GridCol> 
        </GridRow> 

        <Divider />
            
        <div style="text-align: center; margin: 16px 0;">
            <div style="margin-bottom: 8px; font-weight: 500;">Đánh giá của bạn:</div>
            <Rate @bind-Value="reviewModel.Rating" Style="font-size: 48px;" />
            @if (reviewModel.Rating > 0)
            {
                <div class="rating-text" style="margin-top: 8px; color: #666;">
                    @GetRatingText(reviewModel.Rating)
                </div>
            }
        </div>

        <!-- File upload section -->
        <GridRow Gutter="16"> 
            <GridCol Span="24"> 
                <div class="image-upload-container" style="position: relative;"> 
                    <div class="image-upload-area @(isProcessingReview ? "processing" : "")" style="cursor: pointer; border: 2px dashed #d9d9d9; padding: 20px; text-align: center; border-radius: 8px;"> 
                        @if (isProcessingReview)
                        {
                            <div style="display: flex; flex-direction: column; align-items: center;">
                                <Spin Size="SpinSize.Large"/>
                                <div style="margin-top: 8px; color: #666;">Đang xử lý file...</div>
                            </div>
                        }
                        else
                        {
                            <Icon Type="@IconType.Outline.Upload" Style="font-size: 24px; color: #999;"/>
                            <div style="margin-top: 8px; color: #666;">Tải ảnh và video (Tối đa 4 ảnh + 1 video)</div>
                            <div style="font-size: 12px; color: #999;">Click để chọn file</div>
                        }
                    </div>

                    <InputFile @ref="fileInputReview" OnChange="OnFileSelectedReview" multiple accept="image/*,video/*" disabled="@isProcessingReview" style="
                               position: absolute;
                               top: 0;
                               left: 0;
                               width: 100%;
                               height: 100%;
                               opacity: 0;
                               cursor: pointer;
                           "/>
                </div>

                @if (reviewUploads != null && reviewUploads.Any())
                {
                    <div class="image-preview-container" style="margin-top: 8px;">
                        @for (int i = 0; i < reviewUploads.Count; i++)
                        {
                            var index = i;
                            var media = reviewUploads[i];
                            <div class="image-preview-item" style="display:inline-block; position: relative; margin: 4px;">
                                @if ((media.ContentType ?? "").StartsWith("video/"))
                                {
                                    <video controls class="image-preview" style="width: 140px; height: 140px; object-fit: cover; border-radius: 8px; border: 1px solid #eee;">
                                        <source src="@GetReviewPreviewUrl(media)" type="video/mp4" />
                                    </video>
                                }
                                else
                                {
                                    <Image Src="@GetReviewPreviewUrl(media)" Style="width: 140px; height: 140px; object-fit: cover; border-radius: 8px; border: 1px solid #eee;"/>
                                }
                                <div class="image-actions" style="position: absolute; top: 4px; right: 4px;">
                                    <Button Type="@AntDesign.ButtonType.Dashed" Color="Color.Red6"
                                            Size="@AntDesign.ButtonSize.Small"
                                            Icon="@IconType.Outline.Delete"
                                            @onclick="() => RemoveReviewFile(index)"></Button>
                                </div>
                            </div>
                        }
                    </div>
                }
            </GridCol> 
        </GridRow> 

        <!-- Comment section -->
        <div class="comment-lbl" style="margin-top: 16px;"> 
            <strong>Nhận xét:</strong> <span style="color: #666; font-size: 12px;">(Ý kiến của bạn sẽ giúp chúng tôi nâng cao chất lượng sản phẩm và dịch vụ)</span> 
        </div> 
        <TextArea @bind-Value="reviewModel.Content"  
                      MaxLength="500"  
                      Rows="5"  
                      Placeholder="Hãy chia sẻ nhận xét của bạn về sản phẩm này nhé!"  
                      Style="margin-top: 12px;"></TextArea> 

        <!-- Quick tags -->
        <div style="margin-top: 16px;">
            <div style="margin-bottom: 8px; font-weight: 500;">Chọn nhanh:</div>
            <GridRow Gutter="(8, 8)"> 
                @for (int i = 0; i < tags.Count; i++) 
                { 
                    var index = i; 
                    var tag = tags[i];
                    <GridCol> 
                        <div @onclick="() => HandleChooseQuickTag(index, tag)"  Class="@(selectedTag.Contains(index) ? "selected tag-comment" : "tag-comment")"> 
                            <span>@tag</span> 
                        </div>
                    </GridCol> 
                } 
            </GridRow> 
        </div>

        <div class="shout-out" style="text-align: center; margin: 16px 0; color: #1890ff; font-weight: 500;">
            MeoMeo Shop xin chân thành cảm ơn!
        </div> 
    }

    <!-- Action buttons -->
    <div style="margin-top: 16px; text-align: right; border-top: 1px solid #f0f0f0; padding-top: 16px;"> 
        <Button Class="btn-cancel" OnClick="CancelReview" Icon="@IconType.Outline.Close">Hủy</Button> 
        <Button Class="btn-save"  
                OnClick="SubmitReview"  
                Loading="@disabledButtonComment"  
                Icon="@IconType.Outline.Check"  
                Type="@ButtonType.Primary"
                Disabled="@(reviewModel.Rating <= 0)"
                Style="margin-left: 8px;"> 
            Gửi đánh giá
        </Button> 
    </div> 
</Modal>

@code {
    private string activeTab = "pending";
    private bool isLoading = true;
    private bool showReviewModal = false;
    private List<OrderItemForReviewDTO> unreviewedItems = new();
    private List<ProductReviewDTO> userReviews = new();
    private OrderItemForReviewDTO? selectedItem = null;
    private ProductReviewCreateOrUpdateDTO reviewModel = new();
    private List<UploadFileItem> uploadedFiles = new();
    private string backendUrl = string.Empty;

    // New properties for review modal (giống ProductDetail)
    private InputFile? fileInputReview;
    private bool isProcessingReview = false;
    private List<string> tags = new() { "Đóng gói đẹp", "Giao nhanh", "Chất lượng tốt", "Đáng tiền" };
    private HashSet<int> selectedTag = new();
    private bool disabledButtonComment = false;

    // Form validation rules
    private FormValidationRule[] ratingRules = new[]
    {
        new FormValidationRule { Required = true, Message = "Vui lòng chọn đánh giá" }
    };

    private FormValidationRule[] contentRules = new[]
    {
        new FormValidationRule { Required = true, Message = "Vui lòng nhập nội dung đánh giá" },
        new FormValidationRule { Min = 10, Message = "Nội dung đánh giá phải có ít nhất 10 ký tự" }
    };

    protected override async Task OnInitializedAsync()
    {
        backendUrl = (Configuration["ApiSettings:BaseUrl"] ?? string.Empty).TrimEnd('/');
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            
            if (activeTab == "pending")
            {
                await LoadUnreviewedItems();
            }
            else
            {
                await LoadUserReviews();
            }
        }
        catch (Exception ex)
        {
            MessageService.Error("Không thể tải dữ liệu!");
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadUnreviewedItems()
    {
        try
        {
            unreviewedItems = await ProductReviewService.GetUnreviewedOrderItemsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading unreviewed items: {ex.Message}");
        }
    }

    private async Task LoadUserReviews()
    {
        try
        {
            userReviews = await ProductReviewService.GetMyReviewsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user reviews: {ex.Message}");
        }
    }

    private async Task OnTabClick(string key)
    {
        activeTab = key;
        await LoadData();
    }

    private void OpenReviewModal(OrderItemForReviewDTO item)
    {
        selectedItem = item;
        reviewModel = new ProductReviewCreateOrUpdateDTO
        {
            ProductDetailId = item.ProductDetailId,
            OrderId = item.OrderId,
            Rating = 5,
            Content = ""
        };
        reviewUploads.Clear();
        selectedTag.Clear();
        disabledButtonComment = false;
        isProcessingReview = false;
        showReviewModal = true;
    }

    private void CancelReview()
    {
        showReviewModal = false;
        reviewModel = new ProductReviewCreateOrUpdateDTO();
        reviewUploads.Clear();
        selectedTag.Clear();
        disabledButtonComment = false;
        isProcessingReview = false;
        StateHasChanged();
    }

    private async Task SubmitReview()
    {
        try
        {
            if (reviewModel.Rating <= 0)
            {
                MessageService.Error("Vui lòng chọn đánh giá!");
                return;
            }

            if (string.IsNullOrWhiteSpace(reviewModel.Content))
            {
                MessageService.Error("Vui lòng nhập nội dung đánh giá!");
                return;
            }

            disabledButtonComment = true;
            StateHasChanged();

            // Convert local preview files (base64) to IFormFile and attach to DTO
            var mediaUploads = new List<ProductReviewFileUpload>();
            if (reviewUploads.Any())
            {
                foreach (var upload in reviewUploads)
                {
                    if (!string.IsNullOrEmpty(upload.Base64Data))
                    {
                        var formFile = await ConvertBase64ToFormFile(upload.Base64Data!, upload.FileName ?? "upload", upload.ContentType ?? "image/jpeg");
                        mediaUploads.Add(new ProductReviewFileUpload { UploadFile = formFile });
                    }
                }
            }
            reviewModel.MediaUploads = mediaUploads;

            var result = await ProductReviewService.CreateAsync(reviewModel);
            if (result.ResponseStatus == BaseStatus.Success)
            {
                MessageService.Success("Đánh giá sản phẩm thành công!");
                showReviewModal = false;
                await LoadData(); // Reload data
            }
            else
            {
                MessageService.Error(result.Message ?? "Có lỗi xảy ra khi gửi đánh giá!");
            }
        }
        catch (Exception ex)
        {
            MessageService.Error("Có lỗi xảy ra khi gửi đánh giá!");
            Console.WriteLine($"Error submitting review: {ex.Message}");
        }
        finally
        {
            disabledButtonComment = false;
            StateHasChanged();
        }
    }

    private void EditReview(ProductReviewDTO review)
    {
        reviewModel = new ProductReviewCreateOrUpdateDTO
        {
            Id = review.Id,
            ProductDetailId = review.ProductDetailId,
            Rating = review.Rating,
            Content = review.Content
        };
        showReviewModal = true;
    }

    private async Task DeleteReview(Guid reviewId)
    {
        try
        {
            var result = await ProductReviewService.DeleteAsync(reviewId);
            if (result.ResponseStatus == BaseStatus.Success)
            {
                MessageService.Success("Xóa đánh giá thành công!");
                await LoadData(); // Reload data
            }
            else
            {
                MessageService.Error(result.Message ?? "Có lỗi xảy ra khi xóa đánh giá!");
            }
        }
        catch (Exception ex)
        {
            MessageService.Error("Có lỗi xảy ra khi xóa đánh giá!");
            Console.WriteLine($"Error deleting review: {ex.Message}");
        }
    }

    // Methods from ProductDetail (giống y nguyên)
    private async Task OnFileSelectedReview(InputFileChangeEventArgs e)
    {
        await Task.Run(async () =>
        {
            try
            {
                isProcessingReview = true;
                StateHasChanged();

                foreach (var file in e.GetMultipleFiles(5))
                {
                    var maxSize = file.ContentType.StartsWith("video/") ? 10 * 1024 * 1024 : 10 * 1024 * 1024;
                    if (file.Size > maxSize)
                    {
                        MessageService.Error($"File {file.Name} quá lớn. Kích thước tối đa: {maxSize / (1024 * 1024)}MB");
                        continue;
                    }

                    var base64 = await ConvertToBase64(file);
                    var mediaUpload = new ProductMediaUpload
                    {
                        FileName = file.Name,
                        ContentType = file.ContentType,
                        Base64Data = base64,
                        ImageUrl = $"temp/{Guid.NewGuid()}_{file.Name}"
                    };

                    reviewUploads.Add(mediaUpload);
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                MessageService.Error($"Lỗi khi xử lý file: {ex.Message}");
            }
            finally
            {
                isProcessingReview = false;
                StateHasChanged();
            }
        });
    }

    private string GetReviewPreviewUrl(ProductMediaUpload image)
    {
        if (!string.IsNullOrEmpty(image.Base64Data))
        {
            return $"data:{image.ContentType};base64,{image.Base64Data}";
        }
        return backendUrl + "/" + (image.ImageUrl ?? string.Empty);
    }

    private void RemoveReviewFile(int index)
    {
        if (index >= 0 && index < reviewUploads.Count)
        {
            reviewUploads.RemoveAt(index);
            StateHasChanged();
        }
    }

    private async Task<string> ConvertToBase64(IBrowserFile file)
    {
        var maxSize = file.ContentType.StartsWith("video/") ? 10 * 1024 * 1024 : 10 * 1024 * 1024;
        using var stream = file.OpenReadStream(maxAllowedSize: maxSize);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        var bytes = memoryStream.ToArray();
        return Convert.ToBase64String(bytes);
    }

    private async Task<IFormFile> ConvertBase64ToFormFile(string base64Data, string fileName, string contentType)
    {
        var bytes = Convert.FromBase64String(base64Data);
        var stream = new MemoryStream(bytes);
        return new FormFile(stream, 0, bytes.Length, fileName, fileName)
        {
            Headers = new HeaderDictionary(),
            ContentType = contentType
        };
    }

    private void HandleChooseQuickTag(int index, string tag)
    {
        if (selectedTag.Contains(index))
        {
            selectedTag.Remove(index);
        }
        else
        {
            selectedTag.Add(index);
        }
        var chosenTags = selectedTag
            .Select(i => tags[i])
            .ToList();

        reviewModel.Content = string.Join(", ", chosenTags);
        StateHasChanged();
    }

    private string GetRatingText(int rating)
    {
        return rating switch
        {
            1 => "Rất không hài lòng",
            2 => "Không hài lòng", 
            3 => "Bình thường",
            4 => "Hài lòng",
            5 => "Rất hài lòng",
            _ => ""
        };
    }

    private void GoToProducts()
    {
        NavigationManager.NavigateTo("/products");
    }

    // Helper methods
    private string GetProductImageUrl(string? imagePath)
    {
        if (string.IsNullOrEmpty(imagePath))
            return "/images/placeholder.jpg";
        
        return $"{backendUrl}/{imagePath}";
    }
}