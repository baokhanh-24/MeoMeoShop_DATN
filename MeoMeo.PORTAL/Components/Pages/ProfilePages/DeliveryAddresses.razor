@page "/profile/addresses"
@using MeoMeo.Shared.IServices
@using MeoMeo.Contract.DTOs
@using MeoMeo.Shared.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using MeoMeo.PORTAL.Components.Layout
@using MeoMeo.Shared.Utilities
@using MeoMeo.Shared.DTOs
@using ButtonType = AntDesign.ButtonType
@using ButtonSize = AntDesign.ButtonSize
@using AntDesign
@inject IDeliveryAddressClientService DeliveryAddressService
@inject IGhnClientService GhnService
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject MessageService MessageService
@layout ProfileLayout

<div class="delivery-addresses-container">
    <div class="page-header">
        <Title Level="2">
            <Icon Type="environment" />
            Sổ địa chỉ
        </Title>
        <p class="page-subtitle">Quản lý địa chỉ giao hàng của bạn</p>
    </div>

    <div class="addresses-content">
        <!-- Add New Address Button -->
        <div class="add-address-section">
            <Button Type="@ButtonType.Primary" Icon="plus" OnClick="ShowCreateAddressModal" Size="@ButtonSize.Large">
                Thêm địa chỉ mới
            </Button>
        </div>

        <!-- Addresses List -->
        @if (isLoading)
        {
            <div class="loading-section">
                <Spin Size="SpinSize.Large"/>
                <p>Đang tải danh sách địa chỉ...</p>
            </div>
        }
        else if (addresses.Any())
        {
            <div class="address-list">
                @foreach (var address in addresses)
                {
                    <div class="address-item">
                        <div class="d-flex justify-content-between">
                            <div class="address-content">
                                <div class="address-info">
                                    <div class="d-flex gap-1 justify-items-center">
                                        <div class="address-name">
                                            <i class="fas fa-user"></i> @address.Name
                                        </div>
                                        <div class=""> | </div>
                                        <div class="address-phone">
                                            <i class="fas fa-phone"></i> @address.PhoneNumber
                                        </div>
                                    </div>
                                    <div class="d-flex gap-1 justify-items-center">
                                        <div class="address-detail">
                                            <i class="fas fa-location-arrow"></i>
                                            @address.FullAddress
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="address-actions">
                                <Button Type="@ButtonType.Link" Icon="edit" OnClick="() => EditAddress(address)">
                                    Sửa
                                </Button>
                                <Button Type="@ButtonType.Link" Icon="delete" Danger="true" OnClick="() => DeleteAddress(address)">
                                    Xóa
                                </Button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <Empty>
                    <Button Type="@ButtonType.Primary" Icon="plus" OnClick="ShowCreateAddressModal">
                        Thêm địa chỉ đầu tiên
                    </Button>
                </Empty>
            </div>
        }
    </div>
</div>

<!-- Create/Edit Address Modal -->
<Modal Title="@(editingAddress.Id == Guid.Empty ? "Thêm địa chỉ mới" : "Sửa địa chỉ")"
       Visible="@showCreateOrUpdateModal" 
       OnOk="HandleOkAddress" 
       OnCancel="HandleCancelAddress"
       Width="600">
    <Form Model="@editingAddress" LabelAlign="AntLabelAlignType.Left" LabelColSpan="6" WrapperColSpan="18">
        <FormItem Label="Họ tên" Required>
            <Input @bind-Value="editingAddress.Name" MaxLength="255" Placeholder="Nhập họ tên..." />
        </FormItem>
        <FormItem Label="Điện thoại" Required>
            <Input @bind-Value="editingAddress.PhoneNumber" MaxLength="11" Placeholder="SĐT..." 
                   inputmode="numeric" pattern="[0-9]*" />
        </FormItem>
        <FormItem Label="Tỉnh/Thành phố" Required>
            <Select TItem="GhnLocationItem" TItemValue="int?" @bind-Value="selectedProvinceId"
                    Placeholder="Chọn tỉnh/thành phố..." OnSelectedItemChanged="OnProvinceChange"
                    DataSource="provinces" ValueName="Id" LabelName="Name">
            </Select>
        </FormItem>
        <FormItem Label="Quận/Huyện" Required>
            <Select TItem="GhnLocationItem" TItemValue="int?" @bind-Value="selectedDistrictId"
                    Placeholder="Chọn quận/huyện..." OnSelectedItemChanged="OnDistrictChange"
                    Disabled="@(!selectedProvinceId.HasValue)" DataSource="districts" ValueName="Id"
                    LabelName="Name">
            </Select>
        </FormItem>
        <FormItem Label="Phường/Xã" Required>
            <Select TItem="GhnLocationItem" TItemValue="int?" @bind-Value="selectedCommuneId"
                    Placeholder="Chọn phường/xã..." OnSelectedItemChanged="OnCommuneChange"
                    Disabled="@(!selectedProvinceId.HasValue)" DataSource="wards" ValueName="Id"
                    LabelName="Name">
            </Select>
        </FormItem>
        <FormItem Label="Địa chỉ chi tiết" Required>
            <Input @bind-Value="editingAddress.Address" MaxLength="255" Placeholder="Số nhà, đường..." />
        </FormItem>
    </Form>
</Modal>

@code {
    private List<DeliveryAddressDTO> addresses = new();
    private bool isLoading = true;
    private bool showCreateOrUpdateModal = false;
    private CreateOrUpdateDeliveryAddressDTO editingAddress = new();

    // GHN Location data
    private List<GhnLocationItem> provinces = new();
    private List<GhnLocationItem> districts = new();
    private List<GhnLocationItem> wards = new();

    // Selected location IDs
    private int? selectedProvinceId;
    private int? selectedDistrictId;
    private int? selectedCommuneId;

    protected override async Task OnInitializedAsync()
    {
        await LoadAddresses();
        await LoadProvinces();
    }

    private async Task LoadAddresses()
    {
        try
        {
            isLoading = true;
            var result = await DeliveryAddressService.GetMyAddressesAsync();
            addresses = result?.ToList() ?? new List<DeliveryAddressDTO>();
        }
        catch (Exception ex)
        {
            MessageService.Error("Không thể tải danh sách địa chỉ!");
            Console.WriteLine($"Error loading addresses: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadProvinces()
    {
        try
        {
            var result = await GhnService.GetProvincesAsync();
            provinces = result?.ToList() ?? new List<GhnLocationItem>();
        }
        catch (Exception ex)
        {
            MessageService.Error("Không thể tải danh sách tỉnh/thành phố!");
            Console.WriteLine($"Error loading provinces: {ex.Message}");
        }
    }

    private async void OnProvinceChange(GhnLocationItem province)
    {
        selectedProvinceId = province.Id;
        editingAddress.ProvinceId = province.Id;

        // Reset dependent selections
        selectedDistrictId = null;
        selectedCommuneId = null;
        editingAddress.DistrictId = null;
        editingAddress.CommuneId = null;

        districts.Clear();
        wards.Clear();

        await LoadDistricts(province.GhnProvinceId);
    }

    private async Task LoadDistricts(int ghnProvinceId)
    {
        try
        {
            var result = await GhnService.GetDistrictsAsync(ghnProvinceId);
            districts = result?.ToList() ?? new List<GhnLocationItem>();
        }
        catch (Exception ex)
        {
            MessageService.Error("Không thể tải danh sách quận/huyện!");
            Console.WriteLine($"Error loading districts: {ex.Message}");
        }
    }

    private async void OnDistrictChange(GhnLocationItem district)
    {
        selectedDistrictId = district.Id;
        editingAddress.DistrictId = district.Id;

        // Reset dependent selections
        selectedCommuneId = null;
        editingAddress.CommuneId = null;

        wards.Clear();

        await LoadCommunes(district.GhnDistrictId);
    }

    private async Task LoadCommunes(int ghnDistrictId)
    {
        try
        {
            var result = await GhnService.GetWardsAsync(ghnDistrictId);
            wards = result?.ToList() ?? new List<GhnLocationItem>();
        }
        catch (Exception ex)
        {
            MessageService.Error("Không thể tải danh sách phường/xã!");
            Console.WriteLine($"Error loading communes: {ex.Message}");
        }
    }

    private async void OnCommuneChange(GhnLocationItem commune)
    {
        selectedCommuneId = commune.Id;
        editingAddress.CommuneId = commune.Id;
    }

    private void ShowCreateAddressModal()
    {
        editingAddress = new CreateOrUpdateDeliveryAddressDTO();
        selectedProvinceId = null;
        selectedDistrictId = null;
        selectedCommuneId = null;
        districts.Clear();
        wards.Clear();
        showCreateOrUpdateModal = true;
    }

    private async Task EditAddress(DeliveryAddressDTO address)
    {
        editingAddress = new CreateOrUpdateDeliveryAddressDTO
        {
            Id = address.Id,
            Name = address.Name,
            PhoneNumber = address.PhoneNumber,
            Address = address.Address,
            ProvinceId = address.ProvinceId,
            DistrictId = address.DistrictId,
            CommuneId = address.CommuneId
        };

        selectedProvinceId = address.ProvinceId;
        selectedDistrictId = address.DistrictId;
        selectedCommuneId = address.CommuneId;

        // Load location data for editing
        if (address.ProvinceId != -1)
        {
            var province = provinces.FirstOrDefault(p => p.Id == address.ProvinceId);
            if (province != null)
            {
                await LoadDistricts(province.GhnProvinceId);
                if (address.DistrictId != -1)
                {
                    var district = districts.FirstOrDefault(d => d.Id == address.DistrictId);
                    if (district != null)
                    {
                        await LoadCommunes(district.GhnDistrictId);
                    }
                }
            }
        }

        showCreateOrUpdateModal = true;
    }

    private async Task HandleOkAddress()
    {
        try
        {
            // Normalize inputs
            editingAddress.Name = editingAddress.Name?.Trim();
            editingAddress.PhoneNumber = editingAddress.PhoneNumber?.Trim();
            editingAddress.Address = editingAddress.Address?.Trim();

            // Basic validations
            if (string.IsNullOrWhiteSpace(editingAddress.Name))
            {
                MessageService.Warning("Vui lòng nhập họ tên");
                return;
            }
            if (editingAddress.Name!.Length < 2)
            {
                MessageService.Warning("Họ tên quá ngắn");
                return;
            }
            if (string.IsNullOrWhiteSpace(editingAddress.PhoneNumber))
            {
                MessageService.Warning("Vui lòng nhập số điện thoại");
                return;
            }
            if (!IsValidVietnamPhone(editingAddress.PhoneNumber!))
            {
                MessageService.Warning("Số điện thoại không hợp lệ (10-11 số, bắt đầu bằng 0)");
                return;
            }
            if (!selectedProvinceId.HasValue || !selectedDistrictId.HasValue || !selectedCommuneId.HasValue)
            {
                MessageService.Warning("Vui lòng chọn đủ Tỉnh/Thành, Quận/Huyện, Phường/Xã");
                return;
            }
            if (string.IsNullOrWhiteSpace(editingAddress.Address))
            {
                MessageService.Warning("Vui lòng nhập địa chỉ chi tiết (số nhà, đường...)");
                return;
            }

            // Set location IDs
            editingAddress.ProvinceId = selectedProvinceId;
            editingAddress.DistrictId = selectedDistrictId;
            editingAddress.CommuneId = selectedCommuneId;

            // Build full address
            editingAddress.FullAddress = BuildFullAddress(editingAddress.Address);

            var result = await DeliveryAddressService.CreateOrUpdateAsync(editingAddress);

            if (result.HasValue)
            {
                MessageService.Success(editingAddress.Id == Guid.Empty ? "Thêm địa chỉ thành công!" : "Cập nhật địa chỉ thành công!");
                showCreateOrUpdateModal = false;
                await LoadAddresses();
            }
            else
            {
                MessageService.Error(editingAddress.Id == Guid.Empty ? "Thêm địa chỉ thất bại!" : "Cập nhật địa chỉ thất bại!");
            }
        }
        catch (Exception ex)
        {
            MessageService.Error("Có lỗi xảy ra khi lưu địa chỉ!");
            Console.WriteLine($"Error saving address: {ex.Message}");
        }
    }

    private void HandleCancelAddress()
    {
        showCreateOrUpdateModal = false;
    }

    private async Task DeleteAddress(DeliveryAddressDTO address)
    {
        try
        {
            var result = await DeliveryAddressService.DeleteAsync(address.Id);
            if (result)
            {
                MessageService.Success("Xóa địa chỉ thành công!");
                await LoadAddresses();
            }
            else
            {
                MessageService.Error("Xóa địa chỉ thất bại!");
            }
        }
        catch (Exception ex)
        {
            MessageService.Error("Có lỗi xảy ra khi xóa địa chỉ!");
            Console.WriteLine($"Error deleting address: {ex.Message}");
        }
    }

    private string BuildFullAddress(string detail)
    {
        var wardName = wards.FirstOrDefault(x => x.Id == (selectedCommuneId ?? -1))?.Name ?? string.Empty;
        var districtName = districts.FirstOrDefault(x => x.Id == (selectedDistrictId ?? -1))?.Name ?? string.Empty;
        var provinceName = provinces.FirstOrDefault(x => x.Id == (selectedProvinceId ?? -1))?.Name ?? string.Empty;

        var parts = new List<string>();
        if (!string.IsNullOrWhiteSpace(detail)) parts.Add(detail.Trim());
        if (!string.IsNullOrWhiteSpace(wardName)) parts.Add(wardName.Trim());
        if (!string.IsNullOrWhiteSpace(districtName)) parts.Add(districtName.Trim());
        if (!string.IsNullOrWhiteSpace(provinceName)) parts.Add(provinceName.Trim());
        return string.Join(", ", parts);
    }

    private static bool IsValidVietnamPhone(string phone)
    {
        // Accept 10-11 digits starting with 0; strips spaces and dashes before check
        var digits = new string(phone.Where(char.IsDigit).ToArray());
        if (!digits.StartsWith("0")) return false;
        return digits.Length == 10 || digits.Length == 11;
    }
}