@layout MainLayout
@using MeoMeo.Shared.Services
@using MeoMeo.Shared.IServices
@using MeoMeo.Contract.DTOs
@using MeoMeo.PORTAL.Services
@using MeoMeo.PORTAL.IServices
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using MeoMeo.Shared.Utilities
@using AntDesign
@using MeoMeo.PORTAL.Components.Layout
@inject ICustomerClientService CustomerService
@inject IUserInfoService UserInfoService
@inject IAuthClientService AuthService
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration

@inherits LayoutComponentBase

<AuthorizeView>
    <Authorized Context="context">
        <div class="content-background">
            <GridRow Gutter="16">
                <GridCol Span="22" Offset="1">
                    <!-- Breadcrumb -->
                    <Breadcrumb Class="mb-3">
                        <BreadcrumbItem>
                            <a href="/">Trang chủ</a>
                        </BreadcrumbItem>
                        <BreadcrumbItem>
                            <a class="current">@GetPageTitle()</a>
                        </BreadcrumbItem>
                    </Breadcrumb>

                    <GridRow Gutter="16">
                        <!-- Left Sidebar -->
                        <GridCol Span="6">
                            <Card Class="profile-sidebar-card">
                                <div class="user-info-section">
                                    <div class="user-avatar">
                                        <Avatar Size="AvatarSize.Large" Src="@GetUserAvatar(context.User)">
                                            @GetUserInitial(context.User)
                                        </Avatar>
                                    </div>
                                    <div class="user-details">
                                        <h4 class="user-name">@GetUserFullName(context.User)</h4>
                                        <p class="user-phone">@GetUserPhone(context.User)</p>
                                    </div>
                                </div>

                                <Divider />

                                <Menu Mode="MenuMode.Inline" SelectedKeys="@GetSelectedKeys()">
                                    <MenuItem Key="profile" Icon="user">
                                    <a href="/profile">Thông tin cá nhân</a>
                                    </MenuItem>
                                    <MenuItem Key="orders" Icon="shopping">
                                    <a href="/orders">Đơn hàng của tôi</a>
                                    </MenuItem>
                                    <MenuItem Key="addresses" Icon="environment">
                                    <a href="/profile/addresses">Sổ địa chỉ</a>
                                    </MenuItem>
                                    <MenuItem Key="wishlist" Icon="heart">
                                    <a href="/profile/wishlist">Sản phẩm yêu thích</a>
                                    </MenuItem>
                                    <MenuItem Key="reviews" Icon="star">
                                    <a href="/profile/reviews">Đánh giá sản phẩm</a>
                                    </MenuItem>
                                </Menu>
                            </Card>
                        </GridCol>

                        <!-- Main Content -->
                        <GridCol Span="18">
                            <Card Class="profile-main-card">
                                @Body
                            </Card>
                        </GridCol>
                    </GridRow>
                </GridCol>
            </GridRow>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private string[] selectedKeys = new string[0];
    private string backendUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to user info changes
        UserInfoService.OnUserInfoChanged += OnUserInfoChanged;

        // Load user info khi component khởi tạo
        await UserInfoService.LoadUserInfoAsync();

        // Get backend URL from configuration
        backendUrl = Configuration["ApiSettings:BaseUrl"] ?? "";

        SetSelectedKeys();
    }

    private void OnUserInfoChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private string GetUserFullName(ClaimsPrincipal user)
    {
        // Ưu tiên thông tin từ API, fallback về claims
        if (UserInfoService.CurrentUser != null && !string.IsNullOrEmpty(UserInfoService.CurrentUser.Name))
        {
            return UserInfoService.CurrentUser.Name;
        }

        return user?.FindFirst("FullName")?.Value
        ?? user?.FindFirst("UserName")?.Value
        ?? "User";
    }

    private string GetUserPhone(ClaimsPrincipal user)
    {
        // Ưu tiên thông tin từ API, fallback về claims
        if (UserInfoService.CurrentUser != null && !string.IsNullOrEmpty(UserInfoService.CurrentUser.PhoneNumber))
        {
            return UserInfoService.CurrentUser.PhoneNumber;
        }

        return user?.FindFirst("PhoneNumber")?.Value ?? "";
    }

    private string GetUserAvatar(ClaimsPrincipal user)
    {
        // Ưu tiên thông tin từ API, fallback về claims
        string avatarPath = string.Empty;

        if (UserInfoService.CurrentUser != null && !string.IsNullOrEmpty(UserInfoService.CurrentUser.Avatar))
        {
            avatarPath = UserInfoService.CurrentUser.Avatar;
        }
        else
        {
            avatarPath = user?.FindFirst("Avatar")?.Value ?? string.Empty;
        }

        // Kết hợp với backend URL nếu có avatar path
        if (!string.IsNullOrEmpty(avatarPath))
        {
            return backendUrl + "/" + avatarPath;
        }

        return string.Empty;
    }

    private string GetUserInitial(ClaimsPrincipal user)
    {
        var fullName = GetUserFullName(user);
        return !string.IsNullOrEmpty(fullName)
        ? fullName.Substring(0, 1).ToUpper()
        : "U";
    }

    private string[] GetSelectedKeys()
    {
        return selectedKeys;
    }

    private void SetSelectedKeys()
    {
        var currentPath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        selectedKeys = currentPath switch
        {
            "profile" => new[] { "profile" },
            "orders" => new[] { "orders" },
            "profile/addresses" => new[] { "addresses" },
            "profile/wishlist" => new[] { "wishlist" },
            "profile/reviews" => new[] { "reviews" },
            _ => new[] { "profile" }
        };
    }

    private string GetPageTitle()
    {
        var currentPath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        return currentPath switch
        {
            "profile" => "Thông tin cá nhân",
            "orders" => "Đơn hàng của tôi",
            "profile/addresses" => "Sổ địa chỉ",
            "profile/wishlist" => "Sản phẩm yêu thích",
            "profile/reviews" => "Đánh giá sản phẩm",
            _ => "Thông tin cá nhân"
        };
    }

    public void Dispose()
    {
        UserInfoService.OnUserInfoChanged -= OnUserInfoChanged;
    }
}