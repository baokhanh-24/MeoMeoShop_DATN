@page "/san-pham/{ProductId:guid}" 
@using MeoMeo.Shared.IServices 
@using MeoMeo.Contract.DTOs.Product 
@using MeoMeo.Contract.DTOs 
@using MeoMeo.Contract.DTOs.ProductReview
@using ButtonType = AntDesign.ButtonType
@inject NavigationManager NavigationManager 
@inject IMessageService MessageService 
@inject IConfiguration Configuration 
@inject IProductClientService ProductClientService 
@inject IProductReviewClientService ProductReviewClientService
@inject ICartClientService CartClientService
@inject ICartStateService CartStateService
@inject IWishlistClientService WishlistClientService


    <div class="content-background"> 
       
            <Breadcrumb> 
                <BreadcrumbItem> 
                    <a href="/">Trang chủ</a> 
                </BreadcrumbItem> 
                <BreadcrumbItem> 
                    <span class="current">@productDetail.Name</span> 
                </BreadcrumbItem> 
            </Breadcrumb> 

            <div class="product-main-content"> 
                <GridRow Gutter="(24, 24)"> 
                    <GridCol Xs="24" Sm="24" Md="12" Lg="12" Xl="12"> 
                        <Card Class="product-gallery-card"> 
                            <div class="product-gallery">
                                @if (productDetail.Media.Any())
                                {
                                    <Carousel @ref="imageCarousel" Autoplay="@TimeSpan.FromSeconds(3)">
                                        @foreach (var image in productDetail.Media) 
                                        { 
                                            <CarouselSlick>
                                                <div class="gallery-slide"> 
                                                    @if (image.ContentType.StartsWith("video/")) 
                                                    { 
                                                        <video controls class="gallery-video">
                                                            <source src="@image.ImageUrl" type="video/mp4" />
                                                        </video> 
                                                 
                                                    } 
                                                    else 
                                                    { 
                                                        <div class="gallery-image-container">
                                                            <img src="@image.ImageUrl" 
                                                                 class="gallery-image" />
                                                            <div class="gallery-overlay">
                                                                <Icon Type="@IconType.Outline.ZoomIn" Class="gallery-zoom-icon" />
                                                            </div>
                                                        </div>
                                                    } 
                                                </div>
                                            </CarouselSlick>
                                        } 
                                    </Carousel>
                                    
                                    @if (productDetail.Media.Count > 1) 
                                    { 
                                        <div class="thumbnail-gallery"> 
                                            <div class="thumbnail-scroll">
                                                @for (int i = 0; i < productDetail.Media.Count; i++) 
                                                { 
                                                    var index = i;
                                                    <div class="thumbnail-item @(activeIndex == index ? "active" : "")"  
                                                         @onclick="() => GoToSlide(index)"> 
                                                        @if (productDetail.Media[index].ContentType.StartsWith("video/")) 
                                                        { 
                                                            <div class="video-thumbnail">
                                                                <video muted class="thumbnail-video">
                                                                    <source src="@productDetail.Media[index].ImageUrl" type="video/mp4" />
                                                                </video>
                                                                <div class="video-play-icon">
                                                                    <Icon Type="@IconType.Outline.PlayCircle" />
                                                                </div>
                                                            </div>
                                                        } 
                                                        else 
                                                        { 
                                                            <img src="@productDetail.Media[index].ImageUrl" class="thumbnail-image" /> 

                                                        } 
                                                    </div> 
                                                } 
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="no-image-placeholder">
                                        <Icon Type="@IconType.Outline.Picture" Style="font-size: 48px; color: #ccc;" />
                                        <div>Không có hình ảnh</div>
                                    </div>
                                }
                            </div>
                        </Card> 
                    </GridCol> 

                    <GridCol Xs="24" Sm="24" Md="12" Lg="12" Xl="12"> 
                        <Card Class="product-info-card">
                            <div class="product-info">
                                <!-- Product Title -->
                                <div class="product-title">
                                    <h1>@productDetail.Name</h1>
                                </div>

                                <!-- Rating and Sales -->
                                <div class="product-rating-sales">
                                    <div class="rating-section">
                                        @if (productDetail.Rating > 0) 
                                        { 
                                            <Rate TValue="decimal" Value="@((decimal)productDetail.Rating)" Disabled="true" />
                                            <span class="rating-text">(@productDetail.Rating/5)</span>
                                        } 
                                        else 
                                        { 
                                            <span class="no-rating">Chưa có đánh giá</span> 
                                        }
                                    </div>
                                    <div class="sales-info">
                                        <Icon Type="@IconType.Outline.ShoppingCart" />
                                        <span>@productDetail.SaleNumber lượt bán</span>
                                    </div>
                                </div>

                                <div class="product-category">
                                    <span class="label">Danh mục:</span>
                                    @foreach (var cate in @productDetail.CategoryNames)
                                    {
                                        <Tag >cate</Tag>
                                    }
                                </div>

                                <!-- Price -->
                                <div class="product-price">
                                    <div class="current-price">
                                        @* @CalcPriceAfterDiscount(productDetail.Price, productDetail.Discount).ToString("C0", new System.Globalization.CultureInfo("vi-VN")) *@
                                    </div>
                                    @* @if (productDetail.Discount > 0)  *@
                                    @* {  *@
                                    @*     <div class="original-price"> *@
                                    @*         @productDetail.Price.ToString("C0", new System.Globalization.CultureInfo("vi-VN")) *@
                                    @*     </div> *@
                                    @*     <div class="discount-badge"> *@
                                    @*         -@productDetail.Discount% *@
                                    @*     </div> *@
                                    @* } *@
                                </div>

                                

                                <!-- Quantity -->
                                <div class="quantity-section">
                                    <div class="quantity-label">Số lượng:</div>
                                    <div class="quantity-controls">
                                        <Button Class="quantity-btn" 
                                                OnClick="DecreaseQuantity" 
                                                Disabled="@(productQuantity <= 1 || isAddingToCart)">
                                            <Icon Type="@IconType.Outline.Minus" />
                                        </Button>
                                        <AntDesign.InputNumber TValue="int" 
                                                               @bind-Value="productQuantity"  
                                                               Min="1"  
                                                               Max="@maxPurchasableQuantity"
                                                               Class="quantity-input"
                                                               Disabled="@isAddingToCart" />
                                        <Button Class="quantity-btn" 
                                                OnClick="IncreaseQuantity" 
                                                Disabled="@(productQuantity >= maxPurchasableQuantity || isAddingToCart)">
                                            <Icon Type="@IconType.Outline.Plus" />
                                        </Button>
                                    </div>
                                    <div class="stock-info">
                                        @if (maxPurchasableQuantity > 0)
                                        {
                                            <span>Còn @maxPurchasableQuantity sản phẩm</span>
                                        }
                                        else
                                        {
                                            <span class="out-of-stock">Hết hàng</span>
                                        }
                                    </div>
                                </div>

                                <!-- Action Buttons -->
                                <div class="action-buttons">
                                    <div class="wishlist-section">
                                        @if (isFavorited) 
                                        { 
                                            <Button Class="wishlist-btn favorited" 
                                                    OnClick="() => ToggleWishlist(false)"
                                                    Icon="@IconType.Fill.Heart"
                                                    Disabled="@isTogglingWishlist">
                                                Đã yêu thích
                                            </Button>
                                        } 
                                        else 
                                        { 
                                            <Button Class="wishlist-btn" 
                                                    OnClick="() => ToggleWishlist(true)"
                                                    Icon="@IconType.Outline.Heart"
                                                    Disabled="@isTogglingWishlist">
                                                Yêu thích
                                            </Button>
                                        }
                                    </div>
                                    
                                    <div class="purchase-buttons">
                                        <Button Class="add-to-cart-btn" 
                                                OnClick="() => AddToCart(false)" 
                                                Loading="@isAddingToCart"
                                                Disabled="@(maxPurchasableQuantity <= 0 || isAddingToCart)"
                                                Icon="@IconType.Outline.ShoppingCart">
                                            Thêm vào giỏ hàng
                                        </Button>
                                        <Button Class="buy-now-btn" 
                                                Type="@ButtonType.Primary"
                                                OnClick="() => AddToCart(true)" 
                                                Loading="@isAddingToCart"
                                                Disabled="@(maxPurchasableQuantity <= 0 || isAddingToCart)"
                                                Icon="@IconType.Outline.Thunderbolt">
                                            Mua ngay
                                        </Button>
                                    </div>
                                </div>
                            </div>
                        </Card>
                    </GridCol> 
            </GridRow> 
        </div> 

        <!-- Product Description Section --> 
        <div class="w-100"> 
            <GridRow> 
                <GridCol Span="24" Class="mt-4"> 
                    <div class="space-coverage"> 
                        <div class="title-description mb-2">Mô tả sản phẩm</div> 
                        <div class="@(viewMoreDescription ? "description-short" : "description-view-all")"> 
                            @((MarkupString)productDetail.Description) 
                        </div> 
                        @if (viewMoreDescription) 
                        { 
                            <div class="text-center pointer"> 
                                <img @onclick="ToggleDescription"  
                                     class="star-vote"  
                                     src="@(viewMoreDescription ? "/images/products/droparrrow.svg" : "/images/products/uparrow.svg")"  
                                     alt="" /> 
                                <span class="view-more" @onclick="ToggleDescription"> 
                                    @(viewMoreDescription ? " Xem thêm" : "Thu gọn") 
                                </span> 
                            </div> 
                        } 
                    </div> 
                </GridCol> 

                <!-- Reviews Section --> 
                <GridCol Span="24" Class="mt-4"> 
                    <div class="space-coverage"> 
                        <div class="title-description mb-2"> 
                            Đánh giá sản phẩm <span class="total-vote ms-2">(@totalComment đánh giá)</span> 
                        </div> 
                         
                        @if (totalComment == 0) 
                        { 
                            <div class="text-center"> 
                                <img class="empty-vote" src="/images/products/empty-vote.svg" alt="" /> 
                                <div class="title-vote-empty">Hiện chưa có đánh giá nào.</div> 
                                <div class="title-vote-empty">Bạn sẽ là người đầu tiên đánh giá sản phẩm này chứ?</div> 
                                @if (canComment) 
                                { 
                                    <div class="d-flex justify-content-center mt-3 mb-7"> 
                                        <Button Class="vote-now" OnClick="ShowCommentModal" Type="@ButtonType.Primary">Đánh giá ngay</Button> 
                                    </div> 
                                } 
                            </div> 
                        } 
                        else 
                        { 
                            <Divider /> 
                            <GridRow> 
                                <GridCol Span="6" Class="text-center"> 
                                    <div class="grand-vote-score"> 
                                        @productDetail.Rating 
                                        <img class="grand-star-vote ms-1" src="/images/products/star_vote.svg" alt="" /> 
                                    </div> 
                                    @if (canComment) 
                                    { 
                                        <Button Class="btn-sen-comment" OnClick="ShowCommentModal" Type="@ButtonType.Primary">Gửi đánh giá</Button> 
                                    } 
                                </GridCol> 
                                <GridCol Span="10"> 
                                    <div class="d-flex"> 
                                        <img class="grand-star" src="/images/products/5star.png" alt="" /> 
                                         <Progress Percent="@((double)productDetail.Rating5 / totalComment * 100)"  
                                                  ShowInfo="false"></Progress> 
                                        <span class="progress-value">@productDetail.Rating5</span> 
                                    </div> 
                                    <div class="d-flex"> 
                                        <img class="grand-star" src="/images/products/4star.png" alt="" /> 
                                         <Progress Percent="@((double)productDetail.Rating4 / totalComment * 100)"  
                                                  ShowInfo="false"></Progress> 
                                        <span class="progress-value">@productDetail.Rating4</span> 
                                    </div> 
                                    <div class="d-flex"> 
                                        <img class="grand-star" src="/images/products/3star.png" alt="" /> 
                                         <Progress Percent="@((double)productDetail.Rating3 / totalComment * 100)"  
                                                  ShowInfo="false"></Progress> 
                                        <span class="progress-value">@productDetail.Rating3</span> 
                                    </div> 
                                    <div class="d-flex"> 
                                        <img class="grand-star" src="/images/products/2star.png" alt="" /> 
                                         <Progress Percent="@((double)productDetail.Rating2 / totalComment * 100)"  
                                                  ShowInfo="false"></Progress> 
                                        <span class="progress-value">@productDetail.Rating2</span> 
                                    </div> 
                                    <div class="d-flex"> 
                                        <img class="grand-star" src="/images/products/1star.png" alt="" /> 
                                         <Progress Percent="@((double)productDetail.Rating1 / totalComment * 100)"  
                                                  ShowInfo="false"></Progress> 
                                        <span class="progress-value">@productDetail.Rating1</span> 
                                    </div> 
                                </GridCol> 
                            </GridRow> 

                            <Divider /> 
                             
                            <!-- Filter Section --> 
                            <div class="d-flex gap-3 align-items-center"> 
                                <span class="filter">Lọc theo:</span> 
                                <div class="list-number-stars"> 
                                    <div class="d-flex align-items-center gap-3"> 
                                         <span class="@GetFilterClass(6)" @onclick="() => FilterCommentByCondition(6)">Hình ảnh/ Video</span> 
                                         <span class="@GetFilterClass(null)" @onclick="() => FilterCommentByCondition(null)">Tất cả</span> 
                                         <span class="@GetFilterClass(5)" @onclick="() => FilterCommentByCondition(5)">5 sao</span> 
                                         <span class="@GetFilterClass(4)" @onclick="() => FilterCommentByCondition(4)">4 sao</span> 
                                         <span class="@GetFilterClass(3)" @onclick="() => FilterCommentByCondition(3)">3 sao</span> 
                                         <span class="@GetFilterClass(2)" @onclick="() => FilterCommentByCondition(2)">2 sao</span> 
                                         <span class="@GetFilterClass(1)" @onclick="() => FilterCommentByCondition(1)">1 sao</span> 
                                    </div> 
                                </div> 
                            </div> 
                            

                            <Divider /> 

                            <!-- Comments List --> 
                            @foreach (var comment in lstComment) 
                            { 
                                <div class="comment w-100"> 
                                    <div class="d-flex gap-4 w-100"> 
                                        @if (string.IsNullOrEmpty(comment.CustomerAvatar)) 
                                        { 
                                            <div class="avatar text-center"> 
                                                @GetAvatarWhenNull(comment.CustomerName) 
                                            </div> 
                                        } 
                                        else 
                                        { 
                                            <Avatar Src="@($"{cdnImage}{comment.CustomerAvatar}")" Style="border: 1px solid #000;" /> 
                                        } 

                                        <div class="comment-info"> 
                                            <div class="d-flex"> 
                                                <div class="phone-number">@comment.CustomerPhone</div> 
                                                <img class="history-action" src="/images/actions/history-action.svg" /> 
                                                <div class="date-comment"> 
                                                    @comment.CreationTime.ToString("HH:mm - dd/MM/yyyy") 
                                                </div> 
                                            </div> 
                                             
                                            <div class="voted-star mb-3 d-flex"> 
                                                @for (int i = 0; i < comment.Rating; i++) 
                                                { 
                                                    <img class="star-vote ms-1" src="/images/products/star_vote.svg" alt="star" /> 
                                                } 
                                            </div> 
                                             
                                            <div class="txt-comment">@comment.Content</div> 

                                            <!-- Comment Media --> 
                                            <div class="review-container" style="margin-top: 8px; margin-bottom: 10px;"> 
                                                <div class="d-flex gap-1 align-items-center"> 
                                                    @foreach (var file in comment.ProductReviewFiles.OrderByDescending(f => f.FileName?.EndsWith(".mp4") == true)) 
                                                    { 
                                                        <div class="card-img me-2 mb-2 cursor-pointer"> 
                                                            @if (file.FileName?.EndsWith(".mp4") == true) 
                                                            { 
                                                                <div class="position-relative pointer"> 
                                                                    <video style="max-height: 79.19px; border: 1px solid #d9d9d9; border-radius: 8px;"> 
                                                                        <source src="@file.FileUrl" type="video/mp4" /> 
                                                                    </video> 
                                                                    <div class="position-absolute" style="top: 50%; left: 50%; transform: translate(-50%, -50%);"> 
                                                                        <img src="/images/actions/play-video.svg" alt="Play" style="width: 24px; height: 24px;" /> 
                                                                    </div> 
                                                                </div> 
                                                            } 
                                                            else 
                                                            { 
                                                                <div style="padding: 8px; border: 1px solid #d9d9d9; border-radius: 8px;"> 
                                                                    <Image Width="102" Style="aspect-ratio: 5/3; object-fit: contain;" Src="@file.FileUrl" /> 
                                                                </div> 
                                                            } 
                                                        </div> 
                                                    } 
                                                </div> 
                                            </div> 

                                            <!-- Reply Content --> 
                                            @if (!string.IsNullOrEmpty(comment.Answer)) 
                                            { 
                                                <div class="reply-content"> 
                                                    <div class="d-flex"> 
                                                        <Avatar Src="/images/logo/logo.svg"  /> 
                                                        <div class="reply-content-body"> 
                                                            <div class="d-flex"> 
                                                                <div class="reply-content-brand">Solas Farm</div> 
                                                                <img class="history-action" src="/images/actions/history-action.svg" /> 
                                                                <div class="reply-content-date"> 
                                                                    @comment.ReplyDate?.ToString("HH:mm - dd/MM/yyyy") 
                                                                </div> 
                                                            </div> 
                                                            <div style="white-space: pre-wrap;">@comment.Answer</div> 
                                                        </div> 
                                                    </div> 
                                                </div> 
                                            } 
                                        </div> 
                                    </div> 
                                    <Divider /> 
                                </div> 
                            } 

                            <!-- View More Comments --> 
                            @if (viewMoreVote.HasValue) 
                            { 
                                <div class="text-center"> 
                                    <img @onclick="HandleViewMore"  
                                         class="star-vote"  
                                         src="@(viewMoreVote.Value ? "/images/products/droparrrow.svg" : "/images/products/uparrow.svg")"  
                                         alt="" /> 
                                    <span class="view-more" @onclick="HandleViewMore"> 
                                        @(viewMoreVote.Value ? $"Xem thêm {totalComment - pageSize} đánh giá" : "Thu gọn") 
                                    </span> 
                                </div> 
                            } 
                        } 
                    </div> 
                </GridCol> 
            </GridRow> 

        </div>

        <!-- Related Products Section -->
        @if (relatedProducts.Any())
        {
            <div class="related-products-section">
                <div class="section-title">
                    <h3>Sản phẩm liên quan</h3>
                </div>
                <GridRow Gutter="(16, 16)">
                    @foreach (var product in relatedProducts.Take(4))
                    {
                        <GridCol Xs="12" Sm="8" Md="6" Lg="6" Xl="6">
                            <Card Class="related-product-card" @onclick="() => NavigateToProduct(product.Id)">
                                <div class="related-product-image">
                                    <img src="@($"{cdnImage}/{product.Thumbnail}")" alt="@product.Name" />
                                    <div class="related-product-overlay">
                                        <Icon Type="@IconType.Outline.Eye" Class="related-product-icon" />
                                    </div>
                                </div>
                                <div class="related-product-info">
                                    <div class="related-product-name">@product.Name</div>
                                    <div class="related-product-price">
                                        @if (product.MaxDiscount > 0)
                                        {
                                            var discountedPrice = product.MaxPrice * (1 - product.MaxDiscount / 100);
                                            <span class="current-price">@discountedPrice ₫</span>
                                            <span class="original-price">@product.MaxPrice  ₫</span>
                                        }
                                        else
                                        {
                                            <span class="current-price">@product.MaxPrice ₫</span>
                                        }
                                    </div>
                                </div>
                            </Card>
                        </GridCol>
                    }
                </GridRow>
            </div>
        }
    </div>


<!-- Comment Modal --> 
<Modal Title="Đánh giá sản phẩm"  
       @bind-Visible="modalVisible"  
       Width="600" 
       OnCancel="CancelComment" 
       Footer="null"> 

        <GridRow Gutter="(16, 16)" Align="RowAlign.Middle"> 
            <GridCol Span="4"> 
                <img class="combo-img-thumbnail" src="@($"{cdnImage}{productDetail.Thumbnail}")" alt="product" /> 
            </GridCol> 
            <GridCol Span="20"> 
                <div class="combo-name">@productDetail.Name</div>
            </GridCol> 
        </GridRow> 

        <Rate TValue="decimal" @bind-Value="rating" Style="font-size: 48px; margin: 16px 0;" /> 

        <GridRow Gutter="16"> 
            <GridCol Span="24"> 
                <div class="image-upload-container" style="position: relative;"> 
                    <div class="image-upload-area @(isProcessingReview ? "processing" : "")" style="cursor: pointer;"> 
                        @if (isProcessingReview)
                        {
                            <div style="display: flex; flex-direction: column; align-items: center;">
                                <Spin Size="SpinSize.Large"/>
                                <div style="margin-top: 8px; color: #666;">Đang xử lý file...</div>
                            </div>
                        }
                        else
                        {
                            <Icon Type="@IconType.Outline.Upload" Style="font-size: 24px; color: #999;"/>
                            <div style="margin-top: 8px; color: #666;">Tải ảnh và video (Tối đa 4 ảnh + 1 video)</div>
                            <div style="font-size: 12px; color: #999;">Click để chọn file</div>
                        }
                    </div>

                    <InputFile @ref="fileInputReview" OnChange="OnFileSelectedReview" multiple accept="image/*,video/*" disabled="@isProcessingReview" style="
                           position: absolute;
                           top: 0;
                           left: 0;
                           width: 100%;
                           height: 100%;
                           opacity: 0;
                           cursor: pointer;
                       "/>
                </div>

                @if (reviewUploads != null && reviewUploads.Any())
                {
                    <div class="image-preview-container" style="margin-top: 8px;">
                        @for (int i = 0; i < reviewUploads.Count; i++)
                        {
                            var index = i;
                            var media = reviewUploads[i];
                            <div class="image-preview-item" style="display:inline-block; position: relative; margin: 4px;">
                                @if ((media.ContentType ?? "").StartsWith("video/"))
                                {
                                    <video controls class="image-preview" style="width: 140px; height: 140px; object-fit: cover; border-radius: 8px; border: 1px solid #eee;">
                                        <source src="@GetReviewPreviewUrl(media)" type="video/mp4" />
                                    </video>
                                }
                                else
                                {
                                    <Image Src="@GetReviewPreviewUrl(media)" Style="width: 140px; height: 140px; object-fit: cover; border-radius: 8px; border: 1px solid #eee;"/>
                                }
                                <div class="image-actions" style="position: absolute; top: 4px; right: 4px;">
                                    <Button Type="@AntDesign.ButtonType.Dashed" Color="Color.Red6"
                                            Size="@AntDesign.ButtonSize.Small"
                                            Icon="@IconType.Outline.Delete"
                                            @onclick="() => RemoveReviewFile(index)"></Button>
                                </div>
                            </div>
                        }
                    </div>
                }
            </GridCol> 
        </GridRow> 

        <div class="comment-lbl" style="margin-top: 16px;"> 
            Nhận xét: <span>(Ý kiến của bạn sẽ giúp chúng tôi nâng cao chất lượng sản phẩm và dịch vụ)</span> 
        </div> 
        <TextArea @bind-Value="comment"  
                  MaxLength="500"  
                  Rows="5"  
                  Placeholder="Hãy chia sẻ nhận xét của bạn về sản phẩm này nhé!"  
                  Style="margin-top: 12px;" /> 

        <GridRow Gutter="(8, 8)" Style="margin-top: 16px;"> 
            @for (int i = 0; i < tags.Count; i++) 
            { 
                var index = i; 
                var tag = tags[i]; 
                <GridCol> 
                     <div @onclick="() => HandleChooseQuickTag(index, tag)"  
                          class="@(selectedTag.Contains(index) ? "selected-tag" : "tag")"> 
                         <span>@tag</span> 
                     </div> 
                </GridCol> 
            } 
        </GridRow> 

        <div class="shout-out">MeoMeo Shop xin chân thành cảm ơn!</div> 

        <div style="margin-top: 16px; text-align: right;"> 
            <Button Class="btn-cancel" OnClick="CancelComment" Icon="@IconType.Outline.Close">Hủy</Button> 
            <Button Class="btn-save"  
                    OnClick="HandleSubmitComment"  
                    Loading="@disabledButtonComment"  
                    Icon="@IconType.Outline.Check"  
                    Type="@ButtonType.Primary"
                    Style="margin-left: 8px;"> 
                Gửi 
            </Button> 
        </div> 
</Modal> 

<!-- Media Preview Modal --> 
<Modal Title="@(previewType == "video" ? "Xem video" : "Xem ảnh")"  
       @bind-Visible="previewOpen"  
       Footer="null"  
       Centered="true" 
       Width="800"> 
        @if (previewType == "video") 
        { 
            <div class="w-100 d-flex justify-content-center"> 
                <video controls src="@(previewImage ?? "")" style="max-height: 500px; width: 100%;"></video> 
            </div> 
        } 
        else 
        { 
            <Image Src="@(previewImage ?? "")" Style="width: 100%;" /> 
        } 
</Modal>

<!-- Variant Selection Modal -->
<!-- Commented out until VariantSelectionModal component is created
<Modal Title="Chọn biến thể sản phẩm"
        @bind-Visible="variantModalVisible"
        Footer="null"
        Width="900">
    @if (currentProduct != null)
    {
                <MeoMeo.PORTAL.Components.Pages.ProductDetail.VariantSelectionModal Product="currentProduct" OnVariantSelected="@(new Action<MeoMeo.Contract.DTOs.Product.VariantSelectionResult>(HandleVariantSelected))" />
    }
</Modal>
-->



@code {
    
    [Parameter] public Guid ProductId { get; set; }

    // Component state
    private string cdnImage = string.Empty;
    private int activeIndex = 0;
    private AntDesign.Carousel? imageCarousel;
    private bool isLoading = true;

    // Product data
    private ProductResponseDTO productDetail = new();

    private List<ProductReviewDTO> lstComment = new();
    // Quantity and actions 
    private int productQuantity = 1; 
    private int maxPurchasableQuantity = 999; 
    private bool isFavorited = false;
    private bool isAddingToCart = false;
    private bool isTogglingWishlist = false;

    // Product variants
    private Dictionary<string, string> selectedVariants = new();
    private Guid? selectedProductDetailId = null;
    private bool variantModalVisible = false;
    private ProductResponseDTO? currentProduct = null;

    // Related products
    private List<ProductResponseDTO> relatedProducts = new(); 

    // Description and HTML content 
    private bool viewMoreDescription = false; 

    // Comments state (basic placeholders) 
    private int totalComment = 0; 
    private bool canComment = false; 
    private bool? viewMoreVote = null; 
    private int pageSize = 5; 
    // Upload and preview 
    private bool modalVisible = false; 
    private decimal rating = 0; 
    private InputFile? fileInputReview; 
    private bool isProcessingReview = false; 
    private List<ProductMediaUpload> reviewUploads = new();

    private GetListProductReviewDTO requestComment = new GetListProductReviewDTO()
    {
        PageIndex = 1,
        PageSize = 10,
        Rating = null
    };
    private string comment = string.Empty; 
    private List<string> tags = new() { "Đóng gói đẹp", "Giao nhanh", "Chất lượng tốt", "Đáng tiền" }; 
    private HashSet<int> selectedTag = new(); 
    private bool disabledButtonComment = false; 
    private bool previewOpen = false; 
    private string previewImage = string.Empty; 
    private string previewType = "image"; 
    

    protected override async Task OnParametersSetAsync() 
    { 
        try
        {
            isLoading = true;
            cdnImage = (Configuration["ApiSettings:BaseUrl"] ?? string.Empty).TrimEnd('/'); 
            await LoadProductAsync(); 
            await LoadReviewsAsync(); 
            await CheckWishlistStatus();
            await LoadRelatedProducts();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Có lỗi xảy ra: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    } 

    private async Task LoadProductAsync() 
    { 
        try 
        { 
            productDetail = await ProductClientService.GetProductWithDetailsAsync(ProductId); 
            if (!string.IsNullOrEmpty(productDetail.Thumbnail))
            {
                productDetail.Thumbnail = $"{cdnImage}/{productDetail.Thumbnail}";
            } 
            foreach (var m in productDetail.Media)
            {
                m.ImageUrl = $"{cdnImage}/{m.ImageUrl}";
            } 
        } 
        catch (Exception ex) 
        { 
           MessageService.Error($"Không thể tải sản phẩm: {ex.Message}"); 
        } 
    } 



    private void IncreaseQuantity() 
    { 
        if (productQuantity < maxPurchasableQuantity) 
        { 
            productQuantity++; 
        } 
        else 
        { 
            MessageService.Warning($"Bạn chỉ có thể mua tối đa {maxPurchasableQuantity} sản phẩm cho đơn này."); 
        } 
    }

   

    private void DecreaseQuantity()
    { 
        if (productQuantity > 1) productQuantity--; 
    } 



    private async Task ToggleWishlist(bool add) 
    { 
        try
        {
            isTogglingWishlist = true;
            StateHasChanged();

            if (selectedProductDetailId == null)
            {
                MessageService.Warning("Vui lòng chọn biến thể sản phẩm");
                return;
            }

            if (add)
            {
                // Add to wishlist logic here
                var result = await WishlistClientService.AddToWishlistAsync(selectedProductDetailId.Value);
                isFavorited = true;
                MessageService.Success("Đã thêm vào yêu thích");
            }
            else
            {
                // Remove from wishlist logic here
                var result = await WishlistClientService.RemoveFromWishlistAsync(selectedProductDetailId.Value);
            
                isFavorited = false;
                MessageService.Success("Đã bỏ yêu thích");
            }
        }
        catch (Exception ex)
        {
            MessageService.Error($"Có lỗi xảy ra: {ex.Message}");
        }
        finally
        {
            isTogglingWishlist = false;
            StateHasChanged();
        }
    }

    private async Task AddToCart(bool buyNow) 
    { 
        try
        {
            if (selectedProductDetailId == null)
            {
                MessageService.Warning("Vui lòng chọn biến thể sản phẩm");
                return;
            }

            isAddingToCart = true;
            StateHasChanged();

            var addToCartRequest = new AddToCartDTO
            {
                ProductDetailId = selectedProductDetailId.Value,
                Quantity = productQuantity
            };

            var result = await CartClientService.AddToCartAsync(addToCartRequest);
            
            if (result?.ResponseStatus == MeoMeo.Contract.Commons.BaseStatus.Success)
            {
                CartStateService.IncrementCartCount(productQuantity);
                MessageService.Success(buyNow ? "Đã thêm vào giỏ hàng" : "Đã thêm vào giỏ hàng");
                
                if (buyNow)
                {
                    NavigationManager.NavigateTo("/gio-hang");
                }
            }
            else
            {
                MessageService.Error(result?.Message ?? "Có lỗi xảy ra khi thêm vào giỏ hàng");
            }
        }
        catch (Exception ex)
        {
            MessageService.Error($"Có lỗi xảy ra: {ex.Message}");
        }
        finally
        {
            isAddingToCart = false;
            StateHasChanged();
        }
    } 

    private void ToggleDescription() 
    { 
        viewMoreDescription = !viewMoreDescription; 
    } 

    private void ShowCommentModal() 
    { 
        modalVisible = true; 
    } 

    private void CancelComment() 
    { 
        modalVisible = false; 
        rating = 0; 
        comment = string.Empty; 
        selectedTag.Clear(); 
    } 

    private async Task HandleSubmitComment() 
    { 
        try
        {
            disabledButtonComment = true; 
            StateHasChanged();

            if (rating <= 0)
            {
                MessageService.Warning("Vui lòng chọn số sao đánh giá");
                return;
            }

            if (string.IsNullOrWhiteSpace(comment))
            {
                MessageService.Warning("Vui lòng nhập nhận xét");
                return;
            }

            if (selectedProductDetailId == null)
            {
                MessageService.Warning("Vui lòng chọn biến thể sản phẩm");
                return;
            }

            // Create review request
            var reviewRequest = new ProductReviewCreateOrUpdateDTO
            {
                ProductDetailId = selectedProductDetailId.Value,
                Rating = rating,
                Content = comment,
                CustomerId = Guid.Empty, // TODO: Get from current user
                OrderId = Guid.Empty, // TODO: Get from current order if available
                Files = reviewUploads.Select(u => new ProductReviewFileUpload
                {
                    UploadFile = null // TODO: Handle file upload properly
                }).ToList()
            };

            // Submit review
            var result = await ProductReviewClientService.CreateAsync(reviewRequest);
            
            MessageService.Success("Gửi đánh giá thành công"); 
            modalVisible = false;
            
            // Reset form
            rating = 0;
            comment = string.Empty;
            reviewUploads.Clear();
            selectedTag.Clear();
            
            // Reload reviews
            await LoadReviewsAsync();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Có lỗi xảy ra: {ex.Message}");
        }
        finally
        {
            disabledButtonComment = false;
            StateHasChanged();
        }
    } 
    

    private void OnFileSelectedReview(InputFileChangeEventArgs e) 
    { 
        InvokeAsync(async () => 
        { 
            try 
            { 
                isProcessingReview = true; 
                StateHasChanged(); 

                foreach (var file in e.GetMultipleFiles(5)) 
                { 
                    var isImage = file.ContentType.StartsWith("image/"); 
                    var isVideo = file.ContentType.StartsWith("video/"); 

                    if (!isImage && !isVideo) 
                    {
                         MessageService.Error($"File {file.Name} không phải là ảnh hoặc video.");
                        continue;
                    }

                    var currentImages = reviewUploads.Count(x => (x.ContentType ?? "").StartsWith("image/"));
                    var currentVideos = reviewUploads.Count(x => (x.ContentType ?? "").StartsWith("video/"));

                    if (isImage)
                    {
                        if (currentImages >= 4)
                        {
                             MessageService.Warning("Bạn chỉ có thể tải tối đa 4 ảnh!");
                            continue;
                        }
                    }
                    else if (isVideo)
                    {
                        if (currentVideos >= 1)
                        {
                             MessageService.Warning("Bạn chỉ có thể tải tối đa 1 video!");
                            continue;
                        }
                    }

                    // var base64Data = await ConvertToBase64(file);
                    await Task.Delay(1); // Add await to fix warning

                    reviewUploads.Add(new ProductMediaUpload
                    {
                        Id = null,
                        UploadFile = null,
                        ImageUrl = string.Empty,
                        Base64Data = "base64Data",
                        FileName = file.Name,
                        ContentType = file.ContentType
                    });
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                 MessageService.Error($"Lỗi khi xử lý file: {ex.Message}");
            }
            finally
            {
                isProcessingReview = false;
                StateHasChanged();
            }
        });
    }

    private string GetReviewPreviewUrl(ProductMediaUpload image)
    {
        if (!string.IsNullOrEmpty(image.Base64Data))
        {
            return $"data:{image.ContentType};base64,{image.Base64Data}";
        }
        return cdnImage + "/" + (image.ImageUrl ?? string.Empty);
    }

    private void RemoveReviewFile(int index)
    {
        if (index >= 0 && index < reviewUploads.Count)
        {
            reviewUploads.RemoveAt(index);
            StateHasChanged();
        }
    }

    private void HandleViewMore() 
    { 
        viewMoreVote = !(viewMoreVote ?? true); 
    } 

    private void GoToSlide(int index)
    {
        if (index >= 0 && index < productDetail.Message.Length)
        {
            activeIndex = index;
            imageCarousel?.GoTo(index);
        }
    }
    

    private async Task CheckWishlistStatus()
    {
        try
        {
           
            isFavorited = false; 
        }
        catch
        {
          
            isFavorited = false;
        }
    }

    private string GetFilterClass(int? rating)
    {
        return "filter-option";
    }

    private async Task FilterCommentByCondition(int? rating)
    {
        requestComment.Rating = rating;
        await LoadReviewsAsync();
    }

    private void HandleChooseQuickTag(int index, string tag)
    {
        if (selectedTag.Contains(index))
        {
            selectedTag.Remove(index);
        }
        else
        {
            selectedTag.Add(index);
        }
        StateHasChanged();
    }
    

    private async Task LoadRelatedProducts()
    {
        try
        {
            // Load related products based on category
            if (productDetail != null && productDetail.Id != Guid.Empty)
            {
                var request = new GetListProductRequestDTO
                {
                    PageSize = 8
                };
                
                var result = await ProductClientService.GetAllProductAsync(request);
                relatedProducts = result.Items?.Where(p => p.Id != ProductId).Take(4).ToList() ?? new List<ProductResponseDTO>();
            }
        }
        catch
        {
            // Handle error silently
            relatedProducts = new List<ProductResponseDTO>();
        }
    }

    private void NavigateToProduct(Guid productId)
    {
        NavigationManager.NavigateTo($"/san-pham/{productId}");
    }
    RenderFragment GetAvatarWhenNull(string name) => builder => 
    { 
        var initials = string.IsNullOrWhiteSpace(name) ? "?" : new string(name.Split(' ').Select(s => s[0]).ToArray()).ToUpperInvariant(); 
        builder.AddContent(0, initials); 
    }; 

    

    private decimal CalcPriceAfterDiscount(decimal price, int discount) 
    { 
        if (discount <= 0) return price; 
        return price * (100 - discount) / 100; 
    } 
    

    private async Task LoadReviewsAsync() 
    { 
        try 
        { 
         
            var variantIds = productDetail.ProductVariants?
                .Select(v => v.Id ?? Guid.Empty)
                .Where(id => id != Guid.Empty)
                .ToList() ?? new List<Guid>();

            requestComment.ListProductDetailIds = string.Join(",", variantIds);
            var reviews=await ProductReviewClientService.GetByProductDetailIdsAsync(requestComment);
            lstComment = reviews.Items;
            totalComment = reviews.TotalRecords;
            viewMoreVote = totalComment > pageSize;
            StateHasChanged(); 
        } 
        catch (Exception ex)
        { 
            MessageService.Error($"Không thể tải đánh giá: {ex.Message}");
        } 
    } 

    
}