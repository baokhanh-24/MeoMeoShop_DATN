@page "/cart"
@using System.ComponentModel.DataAnnotations
@using AntDesign
@using MeoMeo.Shared.Utilities
@using Microsoft.AspNetCore.Components
@using MeoMeo.Shared.IServices
@using MeoMeo.Contract.DTOs
@using MeoMeo.Contract.Commons
@using MeoMeo.Contract.DTOs.Order
@using MeoMeo.Domain.Commons.Enums
@using MeoMeo.Shared.DTOs
@using ButtonSize = AntDesign.ButtonSize
@using ButtonType = AntDesign.ButtonType
@inject ICartClientService CartClient
@inject MeoMeo.Shared.Utilities.MessageModalService MessageModalService
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@inject IOrderClientService OrderClient
@inject IVoucherClientService VoucherClient
@inject IDeliveryAddressClientService AddressClient
@inject IApiCaller ApiCaller
@inject IGhnClientService GhnService
@inject ICartStateService CartStateService
<div class="content-background">
    <GridRow Gutter="16">
        <GridCol Span="22" Offset="1">
            <Breadcrumb Class="mb-3">
                <BreadcrumbItem>
                    <a @onclick="HandleRedirectToHomepage" class="current">
                        <Icon Type="left" />
                        Tiếp tục mua sắm
                    </a>
                </BreadcrumbItem>
            </Breadcrumb>
            @if (cart == null || cart.Items.Count == 0)
            {
                <div class="row">
                    <div class="col-12">
                        <div class="space-coverage text-center">
                            <img class="empty-cart" src="/images/Cart.svg" alt="" />
                            <div class="empty-text mt-4">Giỏ hàng của bạn đang trống.</div>
                            <div class="empty-text mt-1">Hãy chọn thêm sản phẩm để mua sắm nhé</div>
                            <div class="d-flex justify-content-center">
                                <Button Type="@ButtonType.Primary" Class="shopping-now mt-1"
                                    OnClick="@(() => Navigation.NavigateTo("/"))">
                                    Mua sắm ngay
                                </Button>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="col-12 col-lg-9">
                        <div class="space-coverage">
                            <Table DataSource="@cart.Items" TItem="CartDetailItemDTO" HidePagination="true"
                                RowKey="x => x.Id" @bind-SelectedRows="selectedRows">
                                <ChildContent Context="item">
                                    <Selection Type="SelectionType.Checkbox" />
                                    <Column TData="string" Title="Sản phẩm">
                                        <div class="d-flex align-items-center justify-content-between">
                                            <div class="d-flex align-items-center gap-3">
                                                <span class="prod-name">
                                                    <span class="name-elipsis">@item.ProductName | @item.Sku </span>
                                                    <div class="product-container">
                                                        <div class="size mt-1">Size: @item.SizeName</div>
                                                        <div class="color  mt-1">Màu sắc: @item.ColourName</div>
                                                    </div>
                                                </span>
                                            </div>
                                        </div>
                                    </Column>
                                    <Column TData="string" Title="Ảnh" Width="15%" Align="ColumnAlign.Center">
                                        <Image Width="100%" Height="80px" PreviewVisible="false" Class="product-img"
                                            Fallback="@(backendUrl + "/Images/fallback.jpeg")"
                                            Src="@(backendUrl + "/" + item.Thumbnail)" />
                                    </Column>
                                    <Column TData="int" Title="Số lượng" Align="ColumnAlign.Center" Width="20%">
                                        <div class="btn-change-quantity d-flex gap-2 align-items-center">
                                            <Button Type="@ButtonType.Text" OnClick="@(() => Decrement(item))">-
                                            </Button>
                                            <AntDesign.InputNumber TValue="int" @bind-Value="item.Quantity" Min="1" Max="10"
                                                OnChange="@((value) => OnQuantityChange(item, value))"
                                                Style="width: 80px; text-align: center;" />
                                            <Button Type="@ButtonType.Text" OnClick="@(() => Increment(item))">+
                                            </Button>
                                        </div>
                                    </Column>
                                    <Column TData="float" Title="Đơn giá" Align="ColumnAlign.Center" Width="15%">
                                        <div class="text-center d-flex flex-column align-items-center">
                                            <div class="discount-price">@FormatCurrency(CalcPriceAfterDiscount(item.Price,
                                                item.Discount))
                                        </div>
                                        @if (item.Discount > 0)
                                            {
                                                <div class="price">@FormatCurrency(item.Price)</div>
                                            }
                                        </div>
                                    </Column>
                                    <Column TData="int" Title="% Giảm giá" Align="ColumnAlign.Center" Width="12%">
                                        @if (item.Discount > 0)
                                        {
                                            <span class="discount-badge">-@item.Discount%</span>
                                        }
                                        else
                                        {
                                            <span>-</span>
                                        }
                                    </Column>
                                    <Column TData="decimal" Title="Thành tiền" Width="15%">
                                        @FormatCurrency(item.Quantity * CalcPriceAfterDiscount(item.Price, item.Discount))
                                    </Column>
                                    <Column TData="string" Title="Thao tác" Width="15%" Align="ColumnAlign.Right">
                                        <Button Type="@ButtonType.Text" Icon="delete" OnClick="@(() => RemoveItem(item.Id))"
                                            Class="delete-action" />
                                    </Column>
                                </ChildContent>
                            </Table>
                        </div>
                        <div class="space-coverage mt-3">
                            <div class="title">Chọn hình thức thanh toán</div>
                            <div class="d-flex justify-content-between gap-3">
                                <RadioGroup @bind-Value="SelectedPaymentMethod" TValue="int"
                                    OnChange="OnPaymentMethodChanged">
                                    <Radio Value="0" Style="@style">
                                        <div class="d-flex gap-1 justify-content-center align-items-center">
                                            <i class="fas fa-receipt"></i>
                                            <span> Thanh toán khi nhận hàng</span>
                                        </div>
                                    </Radio>
                                    <br />
                                    <Radio Value="1" Style="@style">
                                        <div class="d-flex gap-1 justify-content-center align-items-center">
                                            <i class="fas fa-qrcode"></i>
                                            <span>Qr Code</span>
                                        </div>
                                    </Radio>
                                    <br />
                                    <Radio Value="2" Style="@style">
                                        <div class="d-flex gap-1 justify-content-center align-items-center">
                                            <i class="fab fa-amazon-pay"></i>
                                            <span>VN Pay</span>
                                        </div>
                                    </Radio>
                                </RadioGroup>
                                <div class="flex-1">
                                    @if (SelectedPaymentMethod == 1)
                                    {
                                        <div class="d-flex gap-3">
                                            <img src=@QrBase64Image class='qr-image' />
                                            <div class="flex-1">
                                                <div class="info-bank row mb-3">
                                                    <div class="col-5">
                                                        <span class="left-qr-info">Số tài khoản:</span>
                                                    </div>
                                                    <div class="col-7">
                                                        <span class="right-qr-info">@AccountNumber</span>
                                                    </div>
                                                </div>
                                                <div class="info-bank row mb-3">
                                                    <div class="col-5">
                                                        <span class="left-qr-info">Ngân hàng:</span>
                                                    </div>
                                                    <div class="col-7">
                                                        <span class="right-qr-info">Vietcombank - VCB </span>
                                                    </div>
                                                </div>

                                                <div class="info-bank row mb-3">
                                                    <div class="col-5">
                                                        <span class="left-qr-info">Chủ tài khoản:</span>
                                                    </div>
                                                    <div class="col-7">
                                                        <span class="right-qr-info">BACH HONG LIEN</span>
                                                    </div>
                                                </div>
                                                <div class="info-bank row mb-3">
                                                    <div class="col-5">
                                                        <span class="left-qr-info">Nội dung chuyển khoản:</span>
                                                    </div>
                                                    <div class="col-7">
                                                        <span class="right-qr-info">@AddInfo</span>
                                                    </div>
                                                </div>
                                                <div class="info-bank row mb-3">
                                                    <div class="col-5">
                                                        <span class="left-qr-info">Số tiền:</span>
                                                    </div>
                                                    <div class="col-7">
                                                        <span class="right-qr-info total-bill">
                                                            @FormatCurrency(FinalTotalAmount)
                                                        </span>
                                                    </div>
                                                </div>
                                                <div class="info-bank row mb-3">
                                                    <div class="col-5">
                                                        <span class="left-qr-info">Lưu ý:</span>
                                                    </div>
                                                    <div class="col-7">
                                                        <span class="right-qr-info note-italic">Đơn hàng sẽ được xử lý sau khi
                                                            quản
                                                            trị viên xác nhận thanh toán. Vui lòng chuyển đúng nội dung và số
                                                            tiền
                                                            để đơn hàng được xác nhận nhanh chóng Giá trên đơn hàng chưa bao gồm
                                                            các
                                                            chi phí vận chuyển...</span>
                                                    </div>
                                                </div>
                                                <div class="info-bank row mb-3">
                                                    <div class="col-12">
                                                        @* <Checkbox checked={isPaidConfirmed} onChange={(e) => setIsPaidConfirmed(e.target.checked)}>
               <span class="txt-chk">Đã thanh toán đơn hàng</span>
               </Checkbox> *@
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-lg-3">
                        <div class="space-coverage mt-3 mt-lg-0">
                            <div class="d-flex justify-content-between">
                                <div class="title">Giao hàng đến</div>
                                <div class="option text-end" style="cursor: pointer;" @onclick="ShowModalDelivery">
                                    Thay đổi
                                </div>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <div class="fullname">@DefaultDeliveryAddress?.Name</div>
                                <div class="phonenumber text-end">@DefaultDeliveryAddress?.PhoneNumber</div>
                            </div>
                            <div class="address">@DefaultDeliveryAddress?.Address</div>
                            <div class="note-space mt-3">
                                <div class="d-flex justify-content-between mt-1 mb-1">
                                    <div class="title">Lời nhắn cho shop</div>
                                </div>
                                <div>
                                    <TextArea @bind-Value="TxtNoteContent" MaxLength="500" Rows="3"
                                        Placeholder="Ghi chú..." />
                                </div>
                            </div>
                        </div>
                        <div class="space-coverage mt-3">
                            <div class="voucher-section">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="title">Mã giảm giá</div>
                                    <Button Type="@ButtonType.Text" OnClick="ShowVoucherModal" Class="text-primary">
                                        @(SelectedVoucher != null ? "Thay đổi" : "Chọn mã")
                                    </Button>
                                </div>
                                @if (SelectedVoucher != null)
                                {
                                    <div class="voucher-applied">
                                        <div class="d-flex justify-content-between">
                                            <span class="voucher-code">@SelectedVoucher.Code</span>
                                            <Button Type="@ButtonType.Text" OnClick="RemoveVoucher" Class="text-danger p-0">
                                                <Icon Type="close" />
                                            </Button>
                                        </div>
                                        <div class="voucher-discount">Giảm @SelectedVoucher.Discount% (tối đa
                                            @FormatCurrency(SelectedVoucher.MaxDiscount))</div>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="space-coverage mt-3">
                            <div class="d-flex justify-content-between mb-3 mt-3">
                                <div class="text-left">Tổng tiền:</div>
                                <div class="text-right text-end text-original-price">@FormatCurrency(cart.TotalPrice)</div>
                            </div>
                            <Divider />
                            <div class="d-flex justify-content-between mb-3">
                                <div class="text-left">Giảm giá voucher:
                                </div>
                                <div class="text-right text-end text-success">-@FormatCurrency(VoucherDiscountAmount)</div>
                            </div>
                            <Divider />
                            <div class="d-flex justify-content-between mb-3">
                                <div class="text-left">Phí vận chuyển (GHN):</div>
                                <div class="text-right text-end">
                                    @FormatCurrency(ShippingFee)
                                    <Button Type="@ButtonType.Text" OnClick="ShowShippingFeeModal" Class="p-0 ml-1">
                                        <Icon Type="info-circle" />
                                    </Button>
                                </div>
                            </div>
                            <Divider />
                            <div class="d-flex justify-content-between mb-3 mt-3">
                                <div class="text-left">Thành tiền:</div>
                                <div class="text-grand-total">@FormatCurrency(FinalTotalAmount)</div>
                            </div>
                            <Divider />
                            <Button Type="@ButtonType.Primary" Block="true" Size="@ButtonSize.Large" OnClick="Checkout"
                                Class="btn-order" Disabled="@(selectedRows == null || !selectedRows.Any())">
                                <i class="fas fa-money-bill"></i> Thanh toán
                            </Button>
                        </div>
                    </div>
                </div>
            }
        </GridCol>
    </GridRow>
    <Modal Title="Chọn địa chỉ giao hàng" Visible="@OpenDeliveryModal" OnOk="HandleOkDelivery"
        OnCancel="HandleCancelDelivery" Width="800">
        <div class="mb-3">
            <Button Type="@ButtonType.Primary" OnClick="ShowCreateAddressModal">
                <Icon Type="plus" />
                Thêm địa chỉ mới
            </Button>
        </div>
        @if (LstDeliveryAddress.Any())
        {
            <div class="address-list">
                <RadioGroup TValue="Guid" @bind-Value="SelectedAddressId" Style="width: 100%">
                    @foreach (var address in LstDeliveryAddress)
                    {
                        <div class="address-item @(address.Id == SelectedAddressId ? "selected" : "")">
                            <Radio TValue="Guid" Value="@address.Id" Class="address-radio">
                                <div class="d-flex justify-content-between">
                                    <div class="address-content">
                                        <div class="address-info ">
                                            <div class="d-flex gap-1 justify-items-center">
                                                <div class="address-name"> <i class="fas fa-user"></i> @address.Name</div>
                                                <div class=""> | </div>
                                                <div class="address-phone"><i class="fas fa-phone"></i> @address.PhoneNumber
                                                </div>
                                            </div>
                                            <div class="d-flex gap-1 justify-items-center">
                                                <div class="address-detail"><i class="fas fa-location-arrow"></i>
                                                    @address.FullAddress
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="address-actions">
                                        <Button Type="@ButtonType.Text" OnClick="@(() => EditAddress(address))" Class="p-0">
                                            <Icon Type="edit" />
                                        </Button>
                                        <Button Type="@ButtonType.Text" OnClick="@(() => DeleteAddress(address))"
                                            Class="p-0 text-danger">
                                            <Icon Type="delete" />
                                        </Button>
                                    </div>
                                </div>

                            </Radio>
                        </div>
                    }
                </RadioGroup>
            </div>
        }
        else
        {
            <div class="text-center py-4">
                <p>Bạn chưa có địa chỉ giao hàng nào.</p>
            </div>
        }
    </Modal>
    <!-- Modal thêm/sửa địa chỉ -->
    <Modal Title="@(EditingAddress.Id == Guid.Empty ? "Thêm địa chỉ mới" : "Sửa địa chỉ")"
        Visible="@OpenCreateOrUpdateAddressModal" OnOk="HandleOkAddress" OnCancel="HandleCancelAddress">
        <Form Model="@EditingAddress" LabelAlign="AntLabelAlignType.Left" LabelColSpan="6" WrapperColSpan="18">
            <FormItem Label="Họ tên" Required>
                <Input @bind-Value="EditingAddress.Name" MaxLength="255" Placeholder="Nhập họ tên..." />
            </FormItem>
            <FormItem Label="Điện thoại" Required>
                <Input @bind-Value="EditingAddress.PhoneNumber" MaxLength="11" Placeholder="SĐT..." inputmode="numeric"
                    pattern="[0-9]*" onkeypress="return event.charCode>=48 && event.charCode<=57" />
            </FormItem>
            <FormItem Label="Tỉnh/Thành phố" Required>
                <Select TItem="GhnLocationItem" TItemValue="int?" @bind-Value="SelectedProvinceId"
                    Placeholder="Chọn tỉnh/thành phố..." OnSelectedItemChanged="OnProvinceChange"
                    DataSource="LstGhnProvinces" ValueName="Id" LabelName="Name">
                </Select>
            </FormItem>
            <FormItem Label="Quận/Huyện" Required>
                <Select TItem="GhnLocationItem" TItemValue="int?" @bind-Value="SelectedDistrictId"
                    Placeholder="Chọn quận/huyện..." OnSelectedItemChanged="OnDistrictChange"
                    Disabled="@(!SelectedProvinceId.HasValue)" DataSource="LstGhnDistricts" ValueName="Id"
                    LabelName="Name">
                </Select>
            </FormItem>
            <FormItem Label="Phường/Xã" Required>
                <Select TItem="GhnLocationItem" TItemValue="int?" @bind-Value="SelectedCommuneId"
                    Placeholder="Chọn phường/xã..." OnSelectedItemChanged="OnCommuneChange"
                    Disabled="@(!SelectedProvinceId.HasValue)" DataSource="LstGhnCommunes" ValueName="Id"
                    LabelName="Name">
                </Select>
            </FormItem>
            <FormItem Label="Địa chỉ chi tiết" Required>
                <Input @bind-Value="EditingAddress.Address" MaxLength="255" Placeholder="Số nhà, đường..." />
            </FormItem>
        </Form>
    </Modal>
    <!-- Modal chọn mã giảm giá -->
    <Modal Title="Chọn mã giảm giá" Visible="@OpenVoucherModal" OnOk="HandleOkVoucher" OnCancel="HandleCancelVoucher"
        Width="800">
        <div class="mb-3 d-flex justify-content-between gap-2">
            <Input @bind-Value="VoucherSearchCode" Placeholder="Nhập mã voucher..." OnPressEnter="SearchVoucher"
                AllowClear="true" />
            <Button Type="@ButtonType.Primary" OnClick="SearchVoucher" Class="">Tìm kiếm</Button>
        </div>
        @if (AvailableVouchers.Any())
        {
            <div class="voucher-list">
                @foreach (var voucher in AvailableVouchers)
                {
                    <div class="voucher-item mt-2 mb-2 @(SelectedVoucher?.Id == voucher.Id ? "selected" : "")"
                        @onclick="() => SelectVoucher(voucher)">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="voucher-info">
                                <div class="voucher-code">@voucher.Code</div>
                                <div class="voucher-desc">Giảm @voucher.Discount% (tối đa @FormatCurrency(voucher.MaxDiscount))
                                </div>
                                <div class="voucher-conditions">
                                    Đơn hàng tối thiểu: @FormatCurrency(voucher.MinOrder) |
                                    HSD: @voucher.EndDate.ToString("dd/MM/yyyy")
                                </div>
                            </div>
                            <div class="voucher-status">
                                @if (voucher.Status == EVoucherStatus.Active)
                                {
                                    <Tag Color="@("green")">Có thể sử dụng</Tag>
                                }
                                else if (voucher.Status == EVoucherStatus.Upcoming)
                                {
                                    <Tag Color="@("blue")">Sắp diễn ra</Tag>
                                }
                                else
                                {
                                    <Tag Color="@("red")">Đã hết hạn</Tag>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-4">
                <p>Không tìm thấy voucher phù hợp.</p>
            </div>
        }
    </Modal>
    <!-- Modal phí vận chuyển -->
    <Modal Title="Chi tiết phí vận chuyển" Visible="@OpenShippingFeeModal" OnOk="HandleOkShippingFee"
        OnCancel="HandleCancelShippingFee" Width="800">
        <div class="mb-3">
            <h5>Thông tin phí vận chuyển</h5>
            <p>Tổng trọng lượng: @totalWeight g</p>
            <p>Tổng thể tích: @totalVolume cm³</p>
            <p>Kích thước lớn nhất: @maxLength cm x @maxWidth cm x @maxHeight cm</p>
            <p>Phí vận chuyển: @FormatCurrency(ShippingFee)</p>
        </div>
        <Divider />
        <h5>Các bước tính toán</h5>
        <ul>
            <li>Trọng lượng: Lấy trọng lượng của từng sản phẩm trong giỏ hàng, cộng lại. Nếu giỏ hàng trống, sử dụng
                trọng lượng mặc định.</li>
            <li>Thể tích: Tính thể tích của từng sản phẩm trong giỏ hàng, cộng lại. Nếu giỏ hàng trống, sử dụng thể tích
                mặc định.</li>
            <li>Kích thước: Lấy kích thước lớn nhất từ các sản phẩm để tính thể tích.</li>
            <li>Phí vận chuyển: Gọi API GHN để lấy phí vận chuyển dựa trên kích thước và trọng lượng.</li>
        </ul>
        <Divider />
        <h5>Lưu ý</h5>
        <p>Phí vận chuyển được tính dựa trên kích thước và trọng lượng thực tế của đơn hàng. Nếu kích thước hoặc trọng
            lượng lớn hơn mặc định, phí vận chuyển sẽ được tính lại.</p>
    </Modal>
</div>
@code {
    string style = "height:30px;line-height:30px";
    private CartWithDetailsResponseDTO? cart;
    IEnumerable
    <CartDetailItemDTO>
    selectedRows = new List
    <CartDetailItemDTO>
    ();
    private string backendUrl = "";
    private string? QrBase64Image { get; set; }
    public string? AccountNumber { get; set; } = "1014640175";
    public string? AddInfo { get; set; } = "Thanh Toan Don Hang";
    public string? BankBin { get; set; } = "970436";
    // Voucher related
    private bool OpenVoucherModal = false;
    private VoucherDTO? SelectedVoucher;
    private List
    <VoucherDTO>
    AvailableVouchers = new();
    private string VoucherSearchCode = "";
    private decimal VoucherDiscountAmount = 0;
    // Delivery address related
    private bool OpenDeliveryModal = false;
    private bool OpenCreateOrUpdateAddressModal = false;
    private DeliveryAddressDTO? DefaultDeliveryAddress;
    private List<DeliveryAddressDTO> LstDeliveryAddress = new();
    private CreateOrUpdateDeliveryAddressDTO EditingAddress = new();
    private Guid SelectedAddressId = Guid.Empty;

    // GHN Location data - using GHN service
    private List<GhnLocationItem> LstGhnProvinces = new();
    private List<GhnLocationItem> LstGhnDistricts = new();
    private List<GhnLocationItem> LstGhnCommunes = new();

    // Selected GHN IDs for proper API calls
    private int? SelectedGhnProvinceId;
    private int? SelectedGhnDistrictId;
    private string? SelectedGhnWardCode;

    // Local int for UI binding (still needed for existing system)
    private int? SelectedProvinceId;
    private int? SelectedDistrictId;
    private int? SelectedCommuneId;


    // Other properties
    private string TxtNoteContent = "";
    private int SelectedPaymentMethod = 0;
    private decimal FinalTotalAmount = 0;
    private decimal ShippingFee = 0;
    private string GhnToken = "";
    //Id shop lấy từ trang https://khachhang.ghn.vn/account
    private int GhnShopId = 197393;
    // Fix cứng id quận Nam từ liêm là địa chỉ của shop
    private int GhnFromDistrictId = 3440;
    //13009 là mã code của phường trung văn
    private string GhnFromWardCode = "13009";
    private int DefaultItemWeightGram = 500;
    private int DefaultLengthCm = 15;
    private int DefaultWidthCm = 15;
    private int DefaultHeightCm = 15;
    private bool OpenShippingFeeModal = false;

    // Shipping fee calculation details for display
    private int totalWeight = 0;
    private int totalVolume = 0;
    private int maxLength = 0;
    private int maxWidth = 0;
    private int maxHeight = 0;

    protected override async Task OnInitializedAsync()
    {
        backendUrl = Configuration["ApiSettings:BaseUrl"] ?? "";
        GhnToken = Configuration["Ghn:Token"] ?? "";
        int.TryParse(Configuration["Ghn:ShopId"], out GhnShopId);
        int.TryParse(Configuration["Ghn:FromDistrictId"], out GhnFromDistrictId);
        GhnFromWardCode = Configuration["Ghn:FromWardCode"] ?? GhnFromWardCode;
        int.TryParse(Configuration["Ghn:DefaultItemWeightGram"], out DefaultItemWeightGram);
        int.TryParse(Configuration["Ghn:DefaultLengthCm"], out DefaultLengthCm);
        int.TryParse(Configuration["Ghn:DefaultWidthCm"], out DefaultWidthCm);
        int.TryParse(Configuration["Ghn:DefaultHeightCm"], out DefaultHeightCm);
        await LoadCart();
        await LoadAvailableVouchers();
        await LoadDefaultDeliveryAddress();
        await LoadLocationData();
    }
    private async Task LoadCart()
    {
        cart = await CartClient.GetCurrentCartAsync();
        if (cart?.Items != null)
        {
            selectedRows = cart.Items.ToList();
            // Update cart state with current item count (number of different products)
            var itemCount = cart.Items.Count;
            CartStateService.UpdateCartCount(itemCount);
        }
        else
        {
            CartStateService.UpdateCartCount(0);
        }
        await CalculateFinalTotalAsync();
    }
    private async Task OnPaymentMethodChanged(int value)
    {


        if (value == 1)
        {
            await FetchImageAsync();
        }
    }
    private async Task LoadAvailableVouchers()
    {
        try
        {
            var request = new GetListVoucherRequestDTO
            {
                Status = EVoucherStatus.Active,
                PageIndex = 1,
                PageSize = 100
            };
            var result = await VoucherClient.GetAllVoucherAsync(request);
            AvailableVouchers = result?.Items?.ToList() ?? new List
            <VoucherDTO>
            ();
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Không thể tải danh sách voucher: {ex.Message}");
        }
    }
    private async Task FetchImageAsync()
    {
        if (string.IsNullOrEmpty(AccountNumber) || string.IsNullOrEmpty(BankBin))
            return;
        var url =
        $"https://img.vietqr.io/image/{BankBin}-{AccountNumber}-qr_only.png?amount={(int)FinalTotalAmount}&addInfo=${AddInfo}";
        try
        {
            var imageBytes = await ApiCaller.GetByteArrayAsync(url);
            QrBase64Image = $"data:image/png;base64,{Convert.ToBase64String(imageBytes)}";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching QR code: {ex.Message}");
        }
    }
    private async Task LoadDefaultDeliveryAddress()
    {
        try
        {
            LstDeliveryAddress = await AddressClient.GetMyAddressesAsync();
            if (LstDeliveryAddress.Any())
            {
                DefaultDeliveryAddress = LstDeliveryAddress.First();
                SelectedAddressId = DefaultDeliveryAddress.Id;
                SelectedProvinceId = DefaultDeliveryAddress.ProvinceId;
                SelectedDistrictId = DefaultDeliveryAddress.DistrictId;
                SelectedCommuneId = DefaultDeliveryAddress.CommuneId;
                await CalculateFinalTotalAsync();
            }
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Không thể tải địa chỉ giao hàng: {ex.Message}");
        }
    }
    private async Task Increment(CartDetailItemDTO item)
    {
        await UpdateQuantity(item, item.Quantity + 1);
    }
    private async Task Decrement(CartDetailItemDTO item)
    {
        if (item.Quantity <= 1)
        {
            await RemoveItem(item.Id);
        }
        else
        {
            await UpdateQuantity(item, item.Quantity - 1);
        }
    }
    private async Task OnQuantityChange(CartDetailItemDTO item, int? newQuantity)
    {
        if (newQuantity.HasValue && newQuantity.Value >= 1 && newQuantity.Value <= 999)
        {
            await UpdateQuantity(item, newQuantity.Value);
        }
    }
    private async Task UpdateQuantity(CartDetailItemDTO item, int newQuantity)
    {
        var dto = new UpdateCartQuantityDTO { CartDetailId = item.Id, Quantity = newQuantity };
        var result = await CartClient.UpdateQuantityAsync(dto);
        if (result?.ResponseStatus == BaseStatus.Success)
        {
            item.Quantity = newQuantity;
            await LoadCart();

            // LoadCart() will automatically update cart state with correct item count
        }
        else
        {
            MessageModalService.Error(result?.Message ?? "Cập nhật số lượng thất bại");
        }
    }
    private async Task RemoveItem(Guid id)
    {
        var result = await CartClient.RemoveItemAsync(id);
        if (result?.ResponseStatus == BaseStatus.Success)
        {
            await LoadCart();
            MessageModalService.Success("Đã xóa sản phẩm khỏi giỏ hàng");

            // LoadCart() will automatically update cart state with correct item count
        }
        else
        {
            MessageModalService.Error(result?.Message ?? "Xoá sản phẩm thất bại");
        }
    }
    private async Task CalculateFinalTotalAsync()
    {
        decimal subtotal = 0;
        if (selectedRows != null && selectedRows.Any())
        {
            subtotal = selectedRows.Sum(i => (decimal)(CalcPriceAfterDiscount(i.Price, i.Discount) * i.Quantity));
        }
        VoucherDiscountAmount = 0;
        if (SelectedVoucher != null && subtotal >= SelectedVoucher.MinOrder)
        {
            var discountPercent = (decimal)SelectedVoucher.Discount / 100m;
            VoucherDiscountAmount = Math.Min(subtotal * discountPercent, (decimal)SelectedVoucher.MaxDiscount);
        }
        await CalculateShippingFeeAsync();
        FinalTotalAmount = subtotal - VoucherDiscountAmount + ShippingFee;
        if (SelectedPaymentMethod == 1)
        {
            await FetchImageAsync();
        }
    }

    private async Task CalculateShippingFeeAsync()
    {
        try
        {
            ShippingFee = 0;
            if (DefaultDeliveryAddress == null || DefaultDeliveryAddress.ProvinceId < 1 ||
            DefaultDeliveryAddress.CommuneId < 1 || DefaultDeliveryAddress.DistrictId < 1 || string.IsNullOrWhiteSpace(GhnToken))
            {
                return;
            }

            // Compute parcel dimensions and weight
            totalWeight = Math.Max(DefaultItemWeightGram, 100);
            maxLength = DefaultLengthCm;
            maxWidth = DefaultWidthCm;
            maxHeight = DefaultHeightCm;

            if (selectedRows != null && selectedRows.Any())
            {
                // Tính tổng trọng lượng từ các sản phẩm thực tế
                totalWeight = Math.Max(200, selectedRows.Sum(x => Math.Max(x.Weight, 200)));

                // Lấy kích thước lớn nhất từ các sản phẩm để tính thể tích
                // Sử dụng thông tin thực tế từ ProductDetail
                totalVolume = selectedRows.Sum(x =>
                {
                    // Sử dụng thông tin kích thước từ ProductDetail
                    var itemLength = x.Length > 0 ? x.Length : DefaultLengthCm;
                    var itemWidth = x.Width > 0 ? x.Width : DefaultWidthCm;
                    var itemHeight = x.Height > 0 ? x.Height : DefaultHeightCm;
                    return itemLength * itemWidth * itemHeight;
                });

                // Tính kích thước tối đa dựa trên thể tích tổng
                var cubeRoot = Math.Pow(totalVolume, 1.0 / 3.0);
                maxLength = maxWidth = maxHeight = Math.Max(DefaultLengthCm, (int)Math.Ceiling(cubeRoot));
            }
            // Get available services using GHN service
            var services = await GhnService.GetAvailableServicesAsync(GhnFromDistrictId, DefaultDeliveryAddress.DistrictId);
            if (!services.Any())
            {
                return;
            }

            var availableServiceId = services.First().ServiceId;
            var insuranceValue = (decimal)Math.Max(0, Math.Round((double)(cart?.TotalPrice ?? 0)));

            // Calculate shipping fee using GHN service
            ShippingFee = await GhnService.CalculateShippingFeeAsync(
            GhnFromDistrictId,
            DefaultDeliveryAddress.DistrictId,
            DefaultDeliveryAddress.CommuneId.ToString(),
            totalWeight,
            maxLength,
            maxWidth,
            maxHeight,
            availableServiceId,
            insuranceValue
            );
        }
        catch
        {
            ShippingFee = 0;
        }
    }
    private async Task Checkout()
    {

        var voucherTxt = SelectedVoucher != null ? $" | Voucher:{SelectedVoucher.Code}" : string.Empty;
        var noteTxt = !string.IsNullOrWhiteSpace(TxtNoteContent) ? $" | Note:{TxtNoteContent}" : string.Empty;
        AddInfo = $"Đơn hàng:{"aaaa"}{voucherTxt}{noteTxt}";

        var selectedIds = selectedRows.Select(r => r.Id).ToList();
        if (selectedIds.Count == 0)
        {
            MessageModalService.Warning("Vui lòng chọn sản phẩm để mua");
            return;
        }
        if (SelectedAddressId == Guid.Empty)
        {
            MessageModalService.Warning("Vui lòng chọn địa chỉ giao hàng");
            return;
        }

        var newOrder = new CreateOrderDTO()
        {
            VoucherId = SelectedVoucher != null ? SelectedVoucher.Id : null,
            DeliveryAddressId = SelectedAddressId,
            PaymentMethod = (EOrderPaymentMethod)SelectedPaymentMethod,
            Note = TxtNoteContent,
            CartItems = selectedIds
        };
        var resp = await CartClient.CheckoutAsync(newOrder);
        if (resp?.ResponseStatus == BaseStatus.Success)
        {
            MessageModalService.Success(resp.Message);
            await LoadCart();
            if (SelectedPaymentMethod == 2)
            {
                var createPayment = new CreatePaymentUrlDTO
                {
                    OrderId = resp.OrderId,
                    Amount = FinalTotalAmount,
                    Description = $"{AddInfo} - {DateTime.Now:dd/MM/yyyy HH:mm}",
                };
                var payUrl = await OrderClient.CreateVnpayPaymentUrlAsync(createPayment);
                if (!string.IsNullOrWhiteSpace(payUrl))
                {
                    Navigation.NavigateTo(payUrl, forceLoad: true);
                    return;
                }
            }
            Navigation.NavigateTo("/orders");
        }
        else
        {
            MessageModalService.Error(resp?.Message ?? "Đặt hàng thất bại");
        }
    }

    // Voucher methods
    private void ShowVoucherModal()
    {
        OpenVoucherModal = true;
    }
    private async Task HandleOkVoucher()
    {
        OpenVoucherModal = false;
        await CalculateFinalTotalAsync();
    }
    private void HandleCancelVoucher()
    {
        OpenVoucherModal = false;
    }
    private async Task SelectVoucher(VoucherDTO voucher)
    {
        if (voucher.Status == EVoucherStatus.Active)
        {
            SelectedVoucher = voucher;
            OpenVoucherModal = false;
            await CalculateFinalTotalAsync();
            MessageModalService.Success($"Đã áp dụng voucher {voucher.Code}");
        }
        else
        {
            MessageModalService.Warning("Voucher này không thể sử dụng");
        }
    }
    private async Task RemoveVoucher()
    {
        SelectedVoucher = null;
        await CalculateFinalTotalAsync();
        MessageModalService.Success("Đã xóa voucher");
    }
    private async Task SearchVoucher()
    {
        if (!string.IsNullOrWhiteSpace(VoucherSearchCode))
        {
            var request = new GetListVoucherRequestDTO
            {
                CodeFilter = VoucherSearchCode,
                Status = EVoucherStatus.Active,
                PageIndex = 1,
                PageSize = 10
            };
            var result = await VoucherClient.GetAllVoucherAsync(request);
            AvailableVouchers = result?.Items?.ToList() ?? new List
            <VoucherDTO>
            ();
        }
        else
        {
            await LoadAvailableVouchers();
        }
    }
    // Delivery address methods
    private async Task ShowModalDelivery()
    {
        OpenDeliveryModal = true;
        await LoadMyAddresses();
    }
    private async Task LoadMyAddresses()
    {
        try
        {
            LstDeliveryAddress = await AddressClient.GetMyAddressesAsync();
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Không thể tải danh sách địa chỉ: {ex.Message}");
        }
    }
    private void HandleOkDelivery()
    {
        if (SelectedAddressId != Guid.Empty)
        {
            var selectedAddress = LstDeliveryAddress.FirstOrDefault(a => a.Id == SelectedAddressId);
            if (selectedAddress != null)
            {
                DefaultDeliveryAddress = selectedAddress;
                MessageModalService.Success("Đã chọn địa chỉ giao hàng");
                _ = CalculateFinalTotalAsync();
            }
        }
        OpenDeliveryModal = false;
    }
    private void HandleCancelDelivery()
    {
        OpenDeliveryModal = false;
    }
    private void ShowCreateAddressModal()
    {
        EditingAddress = new CreateOrUpdateDeliveryAddressDTO();
        OpenCreateOrUpdateAddressModal = true;
        OpenDeliveryModal = false;
    }
    private async Task EditAddress(DeliveryAddressDTO address)
    {
        EditingAddress = new CreateOrUpdateDeliveryAddressDTO
        {
            Id = address.Id,
            Name = address.Name,
            PhoneNumber = address.PhoneNumber,
            Address = address.Address,
            ProvinceId = address.ProvinceId,
            DistrictId = address.DistrictId,
            CommuneId = address.CommuneId
        };
        // Load location data for editing
        if (address.ProvinceId != -1)
        {
            await LoadGhnDistricts(address.ProvinceId);
            if (address.DistrictId != -1)
            {
                await LoadGhnCommunes(address.DistrictId);
            }
        }
        OpenCreateOrUpdateAddressModal = true;
        OpenDeliveryModal = false;
    }
    private async Task DeleteAddress(DeliveryAddressDTO address)
    {
        try
        {
            var result = await AddressClient.DeleteAsync(address.Id);
            if (result)
            {
                LstDeliveryAddress.Remove(address);
                if (DefaultDeliveryAddress?.Id == address.Id)
                {
                    DefaultDeliveryAddress = LstDeliveryAddress.FirstOrDefault();
                }
                MessageModalService.Success("Đã xóa địa chỉ");
            }
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Không thể xóa địa chỉ: {ex.Message}");
        }
    }
    private async Task HandleOkAddress()
    {
        try
        {
            // Normalize inputs
            EditingAddress.Name = EditingAddress.Name?.Trim();
            EditingAddress.PhoneNumber = EditingAddress.PhoneNumber?.Trim();
            EditingAddress.Address = EditingAddress.Address?.Trim();

            // Basic validations
            if (string.IsNullOrWhiteSpace(EditingAddress.Name))
            {
                MessageModalService.Warning("Vui lòng nhập họ tên");
                return;
            }
            if (EditingAddress.Name!.Length < 2)
            {
                MessageModalService.Warning("Họ tên quá ngắn");
                return;
            }
            if (string.IsNullOrWhiteSpace(EditingAddress.PhoneNumber))
            {
                MessageModalService.Warning("Vui lòng nhập số điện thoại");
                return;
            }
            if (!IsValidVietnamPhone(EditingAddress.PhoneNumber!))
            {
                MessageModalService.Warning("Số điện thoại không hợp lệ (10-11 số, bắt đầu bằng 0)");
                return;
            }
            if (!SelectedProvinceId.HasValue || !SelectedDistrictId.HasValue || !SelectedCommuneId.HasValue)
            {
                MessageModalService.Warning("Vui lòng chọn đủ Tỉnh/Thành, Quận/Huyện, Phường/Xã");
                return;
            }
            if (string.IsNullOrWhiteSpace(EditingAddress.Address))
            {
                MessageModalService.Warning("Vui lòng nhập địa chỉ chi tiết (số nhà, đường...)");
                return;
            }
            EditingAddress.CommuneId = SelectedCommuneId;
            EditingAddress.ProvinceId = SelectedProvinceId;
            EditingAddress.DistrictId = SelectedDistrictId;
            // Compose full address before saving
            EditingAddress.FullAddress = BuildFullAddress(EditingAddress.Address);
            var result = await AddressClient.CreateOrUpdateAsync(EditingAddress);
            if (result.HasValue)
            {
                OpenCreateOrUpdateAddressModal = false;
                OpenDeliveryModal = true;
                await LoadMyAddresses();
                MessageModalService.Success(EditingAddress.Id.HasValue ? "Đã cập nhật địa chỉ" : "Đã thêm địa chỉ mới");
            }
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Không thể lưu địa chỉ: {ex.Message}");
        }
    }
    private void HandleCancelAddress()
    {
        OpenCreateOrUpdateAddressModal = false;
        OpenDeliveryModal = true;
    }
    // Location data methods - using GHN master-data API
    private async Task LoadLocationData()
    {
        try
        {
            await LoadGhnProvinces();
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Không thể tải dữ liệu địa chỉ GHN: {ex.Message}");
        }
    }

    private async Task LoadGhnProvinces()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(GhnToken))
            {
                MessageModalService.Warning("GHN Token chưa được cấu hình");
                return;
            }

            var provinces = await GhnService.GetProvincesAsync();
            LstGhnProvinces.Clear();
            LstGhnProvinces.AddRange(provinces);

            // Prefill from EditingAddress if present
            if (EditingAddress.ProvinceId.HasValue && EditingAddress.ProvinceId.Value != -1)
            {
                SelectedProvinceId = EditingAddress.ProvinceId;
                // Find corresponding GHN province ID
                var selectedProvince = LstGhnProvinces.FirstOrDefault(p => p.Id == EditingAddress.ProvinceId);
                if (selectedProvince != null)
                {
                    SelectedGhnProvinceId = selectedProvince.GhnProvinceId;
                    await LoadGhnDistricts(selectedProvince.GhnProvinceId);
                }
            }
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Không thể tải danh sách tỉnh/thành phố GHN: {ex.Message}");
        }
    }

    private async void OnProvinceChange(GhnLocationItem province)
    {
        SelectedProvinceId = province.Id;
        EditingAddress.ProvinceId = province.Id;
        SelectedGhnProvinceId = province.GhnProvinceId;

        // Reset dependent selections
        SelectedDistrictId = null;
        SelectedCommuneId = null;
        SelectedGhnDistrictId = null;
        SelectedGhnWardCode = null;
        EditingAddress.DistrictId = null;
        EditingAddress.CommuneId = null;

        LstGhnDistricts.Clear();
        LstGhnCommunes.Clear();

        await LoadGhnDistricts(province.GhnProvinceId);
    }

    private async Task LoadGhnDistricts(int ghnProvinceId)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(GhnToken))
            {
                return;
            }

            var districts = await GhnService.GetDistrictsAsync(ghnProvinceId);
            LstGhnDistricts.Clear();
            LstGhnDistricts.AddRange(districts);

            // Prefill from EditingAddress if present
            if (EditingAddress.DistrictId.HasValue && EditingAddress.DistrictId.Value != -1)
            {
                SelectedDistrictId = EditingAddress.DistrictId;
                var selectedDistrict = LstGhnDistricts.FirstOrDefault(d => d.Id == EditingAddress.DistrictId);
                if (selectedDistrict != null)
                {
                    SelectedGhnDistrictId = selectedDistrict.GhnDistrictId;
                    await LoadGhnCommunes(selectedDistrict.GhnDistrictId);
                }
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Không thể tải danh sách quận/huyện GHN: {ex.Message}");
        }
    }

    private async void OnDistrictChange(GhnLocationItem district)
    {
        SelectedDistrictId = district.Id;
        EditingAddress.DistrictId = district.Id;
        SelectedGhnDistrictId = district.GhnDistrictId;

        // Reset dependent selections
        SelectedCommuneId = null;
        SelectedGhnWardCode = null;
        EditingAddress.CommuneId = null;

        LstGhnCommunes.Clear();

        await LoadGhnCommunes(district.GhnDistrictId);
    }

    private async Task LoadGhnCommunes(int ghnDistrictId)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(GhnToken))
            {
                return;
            }

            var communes = await GhnService.GetWardsAsync(ghnDistrictId);
            LstGhnCommunes.Clear();
            LstGhnCommunes.AddRange(communes);

            // Prefill from EditingAddress if present
            if (EditingAddress.CommuneId.HasValue && EditingAddress.CommuneId.Value != -1)
            {
                SelectedCommuneId = EditingAddress.CommuneId;
                var selectedCommune = LstGhnCommunes.FirstOrDefault(c => c.Id == EditingAddress.CommuneId);
                if (selectedCommune != null)
                {
                    SelectedGhnWardCode = selectedCommune.GhnWardCode;
                }
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            MessageModalService.Error($"Không thể tải danh sách phường/xã GHN: {ex.Message}");
        }
    }

    private void OnCommuneChange(GhnLocationItem commune)
    {
        SelectedCommuneId = commune.Id;
        EditingAddress.CommuneId = commune.Id;
        SelectedGhnWardCode = commune.GhnWardCode;
    }

    private string BuildFullAddress(string detail)
    {
        var wardName = LstGhnCommunes.FirstOrDefault(x => x.Id == (SelectedCommuneId ?? -1))?.Name
        ?? DefaultDeliveryAddress?.CommuneName
        ?? string.Empty;
        var districtName = LstGhnDistricts.FirstOrDefault(x => x.Id == (SelectedDistrictId ?? -1))?.Name
        ?? DefaultDeliveryAddress?.DistrictName
        ?? string.Empty;
        var provinceName = LstGhnProvinces.FirstOrDefault(x => x.Id == (SelectedProvinceId ?? -1))?.Name
        ?? string.Empty;

        var parts = new List<string>();
        if (!string.IsNullOrWhiteSpace(detail)) parts.Add(detail.Trim());
        if (!string.IsNullOrWhiteSpace(wardName)) parts.Add(wardName.Trim());
        if (!string.IsNullOrWhiteSpace(districtName)) parts.Add(districtName.Trim());
        if (!string.IsNullOrWhiteSpace(provinceName)) parts.Add(provinceName.Trim());
        return string.Join(", ", parts);
    }

    private static bool IsValidVietnamPhone(string phone)
    {
        // Accept 10-11 digits starting with 0; strips spaces and dashes before check
        var digits = new string(phone.Where(char.IsDigit).ToArray());
        if (!digits.StartsWith("0")) return false;
        return digits.Length == 10 || digits.Length == 11;
    }
    private void HandleRedirectToHomepage() => Navigation.NavigateTo("/");
    private static string FormatCurrency(decimal amount) =>
    string.Format(System.Globalization.CultureInfo.GetCultureInfo("vi-VN"), "{0:C0}", amount);
    private static string FormatCurrency(float amount) =>
    string.Format(System.Globalization.CultureInfo.GetCultureInfo("vi-VN"), "{0:C0}", amount);
    private static float CalcPriceAfterDiscount(float price, float discount) =>
    discount > 100 ? price - discount : price * (1 - discount / 100f);

    private void ShowShippingFeeModal()
    {
        OpenShippingFeeModal = true;
    }
    private void HandleOkShippingFee()
    {
        OpenShippingFeeModal = false;
    }
    private void HandleCancelShippingFee()
    {
        OpenShippingFeeModal = false;
    }

    private GhnCreateOrderRequestDTO CreateGhnOrderRequest(CreateOrderResultDTO order)
    {

        // cho thử hàng
        var ghnRequest = new GhnCreateOrderRequestDTO
        {
            PaymentTypeId = SelectedPaymentMethod == 0 ? 2 : 1, // 2: Buyer pays, 1: Shop pays
            Note = "CHOTHUHANG",
            RequiredNote = "CHOTHUHANG",
            FromName = "MeoMeo Shop",
            FromPhone = "0347324430",
            FromAddress = "53 Ngõ 19, Tố Hữu, Trung Văn, Nam Từ Liêm, Hà Nội, VietNam",
            FromWardName = "Trung Văn",
            FromDistrictName = " Nam Từ Liêm",
            FromProvinceName = "HN",
            ClientOrderCode = order.Code,
            ToName = DefaultDeliveryAddress?.Name ?? "",
            ToPhone = DefaultDeliveryAddress?.PhoneNumber ?? "",
            ToAddress = DefaultDeliveryAddress?.Address ?? "",
            ToWardCode = DefaultDeliveryAddress?.CommuneId.ToString() ?? "",
            ToDistrictId = DefaultDeliveryAddress?.DistrictId ?? 0,
            CodAmount = SelectedPaymentMethod == 0 ? (int)FinalTotalAmount : 0,
            Content = $"Đơn hàng {order.Code}",
            Weight = totalWeight,
            Length = maxLength,
            Width = maxWidth,
            Height = maxHeight,
            InsuranceValue = (int)Math.Max(0, Math.Round((double)(cart?.TotalPrice ?? 0))),
            ServiceTypeId = 2, // E-commerce Delivery
            Items = new List<GhnOrderItemDTO>()
        };

        // Add items to GHN order
        if (selectedRows != null && selectedRows.Any())
        {
            foreach (var item in selectedRows)
            {
                ghnRequest.Items.Add(new GhnOrderItemDTO
                {
                    Name = item.ProductName,
                    Code = item.Sku,
                    Quantity = item.Quantity,
                    Price = (int)CalcPriceAfterDiscount(item.Price, item.Discount),
                    Length = Math.Max(item.Length, DefaultLengthCm),
                    Width = Math.Max(item.Width, DefaultWidthCm),
                    Height = Math.Max(item.Height, DefaultHeightCm),
                    Weight = Math.Max(item.Weight, DefaultItemWeightGram),
                    Category = new GhnItemCategoryDTO
                    {
                        Level1 = "Sản phẩm"
                    }
                });
            }
        }

        return ghnRequest;
    }
}