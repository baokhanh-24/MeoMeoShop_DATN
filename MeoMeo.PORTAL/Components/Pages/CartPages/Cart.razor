@page "/cart"
@using System.ComponentModel.DataAnnotations
@using AntDesign
@using Microsoft.AspNetCore.Components
@using MeoMeo.Shared.IServices
@using MeoMeo.Contract.DTOs
@using MeoMeo.Contract.Commons
@using MeoMeo.Contract.DTOs.Order
@using MeoMeo.PORTAL.Components.Pages.PaymentPages
@inject ICartClientService CartClient
@inject MessageService MessageService
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@inject IOrderClientService OrderClient
<div class="content-background">
    <GridRow Gutter="16">
        <GridCol Span="22" Offset="1">

            <Breadcrumb Class="mb-3">
                <BreadcrumbItem>
                    <a @onclick="HandleRedirectToHomepage" class="current">
                        <Icon Type="left"/>
                        Tiếp tục mua sắm
                    </a>
                </BreadcrumbItem>
            </Breadcrumb>

            @if (cart == null || cart.Items.Count == 0)
            {
                <div class="row">
                    <div class="col-12">
                        <div class="space-coverage text-center">
                            <img class="empty-cart" src="/images/products/Cart.svg" alt=""/>
                            <div class="empty-text mt-4">Giỏ hàng của bạn đang trống.</div>
                            <div class="empty-text mt-1">Hãy chọn thêm sản phẩm để mua sắm nhé</div>
                            <div class="d-flex justify-content-center">
                                <Button Type="@ButtonType.Primary" Class="shopping-now mt-1"
                                        OnClick="@(() => Navigation.NavigateTo("/"))">
                                    Mua sắm ngay
                                </Button>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="col-12 col-lg-9">
                        <div class="space-coverage">
                            <Table DataSource="@cart.Items" TItem="CartDetailItemDTO" HidePagination="true"
                                   RowKey="x => x.Id"
                                   @bind-SelectedRows="selectedRows">
                                <ChildContent Context="item">
                                    <Selection Type="SelectionType.Checkbox"/>
                                    <Column TData="string" Title="Sản phẩm">
                                        <div class="d-flex align-items-center justify-content-between">
                                            <div class="d-flex align-items-center gap-3">
                                                <span class="prod-name">
                                                    <span class="name-elipsis">@item.ProductName | @item.Sku </span>
                                                    <div class="product-container">
                                                        <div class="size mt-1">Size: @item.SizeName</div>
                                                        <div class="color  mt-1">Màu sắc: @item.ColourName</div>
                                                    </div>
                                                </span>
                                            </div>
                                        </div>
                                    </Column>
                                    <Column TData="string" Title="Ảnh" Width="15%" Align="ColumnAlign.Center">
                                        <Image Width="100%" Height="80px" PreviewVisible="false"
                                               Class="product-img" Fallback="@(backendUrl + "/Images/fallback.jpeg")"
                                               Src="@(backendUrl + "/" + item.Thumbnail)"/>
                                    </Column>
                                    <Column TData="int" Title="Số lượng" Align="ColumnAlign.Center" Width="20%">
                                        <div class="btn-change-quantity d-flex gap-2 align-items-center">
                                            <Button Type="@ButtonType.Text" OnClick="@(() => Decrement(item))">-
                                            </Button>
                                            <AntDesign.InputNumber TValue="int" @bind-Value="item.Quantity" Min="1"
                                                                   Max="10"
                                                                   OnChange="@((value) => OnQuantityChange(item, value))"
                                                                   Style="width: 80px; text-align: center;"/>
                                            <Button Type="@ButtonType.Text" OnClick="@(() => Increment(item))">+
                                            </Button>
                                        </div>
                                    </Column>
                                    <Column TData="float" Title="Đơn giá" Align="ColumnAlign.Center" Width="15%">
                                        <div class="text-center d-flex flex-column align-items-center">
                                            <div
                                                class="discount-price">@FormatCurrency(CalcPriceAfterDiscount(item.Price, item.Discount))</div>
                                            @if (item.Discount > 0)
                                            {
                                                <div class="price">@FormatCurrency(item.Price)</div>
                                            }
                                        </div>
                                    </Column>
                                    <Column TData="int" Title="% Giảm giá" Align="ColumnAlign.Center" Width="12%">
                                        @if (item.Discount > 0)
                                        {
                                            <span class="discount-badge">-@item.Discount%</span>
                                        }
                                        else
                                        {
                                        }
                                    </Column>
                                    <Column TData="decimal" Title="Thành tiền" Width="15%">
                                        @FormatCurrency(item.Quantity * CalcPriceAfterDiscount(item.Price, item.Discount))
                                    </Column>
                                    <Column TData="string" Title="Thao tác" Width="15%" Align="ColumnAlign.Right">
                                        <Button Type="@ButtonType.Text" Icon="delete"
                                                OnClick="@(() => RemoveItem(item.Id))"
                                                Class="delete-action"/>
                                    </Column>
                                </ChildContent>
                            </Table>
                        </div>
                    </div>


                    <div class="col-12 col-lg-3">
                        <div class="space-coverage mt-3 mt-lg-0">
                            <div class="d-flex justify-content-between">
                                <div class="title">Giao hàng đến</div>
                                <div class="option text-end" style="cursor: pointer;" @onclick="ShowModalDelivery">
                                    Thay đổi
                                </div>
                            </div>
                            <div class="d-flex justify-content-between m4">
                                <div class="fullname">@DefaultDeliveryAddress?.Name</div>
                                <div class="phonenumber text-end">@DefaultDeliveryAddress?.Phone</div>
                            </div>
                            <div class="type m4">
                                @(DefaultDeliveryAddress?.AddressType == true ? "Văn phòng" : "Nhà riêng")
                            </div>
                            <div class="address">@DefaultDeliveryAddress?.FullAddress</div>

                            <div class="note-space mt-3">
                                <div class="d-flex justify-content-between mt-1 mb-1">
                                    <div class="fullname">Lời nhắn cho shop</div>
                                </div>
                                <div>
                                    <TextArea @bind-Value="TxtNoteContent" MaxLength="500" Rows="3" Placeholder="Ghi chú..." />
                                </div>
                            </div>
                            
                            
                            <div class="d-flex justify-content-between mb16">
                                <div class="text-left">Tổng tiền:</div>
                                <div class="text-right text-end">@FormatCurrency(cart.TotalPrice)</div>
                            </div>
                            <Divider/>
                            <div class="d-flex justify-content-between mb16 mt16">
                                <div class="text-left">Thành tiền:</div>
                                <div class="text-grand-total text-end">@FormatCurrency(CalcSelectionTotal())</div>
                            </div>
                            <Divider />
                            <div class="payment-title">Chọn hình thức thanh toán</div>
                            <RadioGroup @bind-Value="PaymentMethod">
                                <Radio  Value="0">
                                    <div>
                                        <img class="payment-method" src="/images/cart/cash-method.png" alt=""/>
                                        <span>Thanh toán khi nhận hàng</span>
                                    </div>
                                </Radio>
                                <Radio  Value="1">
                                    <div>
                                        <span>Qr Code</span>
                                    </div>
                                </Radio>
                                <Radio  Value="2">
                                    <div>
                                        <span>VN Pay</span>
                                    </div>
                                </Radio>
                            </RadioGroup>
                            <Divider />
                            <Button Type="@ButtonType.Primary" Block="true" Size="@ButtonSize.Large" OnClick="Checkout"
                                    Class="btn-order">Mua hàng
                            </Button>
                        </div>
                    </div>
                </div>
            }
        </GridCol>
    </GridRow>
    <Modal Title="Chọn địa chỉ giao hàng" Visible="@OpenDeliveryModal" OnOk="HandleOkDelivery" OnCancel="HandleCancelDelivery">
        <Form Model="@DefaultDeliveryAddress" LabelAlign="AntLabelAlignType.Left" LabelColSpan="6" WrapperColSpan="18">
            <FormItem Label="Họ tên">
                <Input @bind-Value="DefaultDeliveryAddress.Name" MaxLength="255" Placeholder="Nhập họ tên..." />
            </FormItem>
            <FormItem Label="Điện thoại">
                <Input @bind-Value="DefaultDeliveryAddress.Phone" MaxLength="12" Placeholder="SĐT..." />
            </FormItem>
            <FormItem Label="Địa chỉ">
                <Input @bind-Value="DefaultDeliveryAddress.FullAddress" MaxLength="255" Placeholder="Số nhà, đường, phường/xã, quận/huyện, tỉnh/thành..." />
            </FormItem>
 <FormItem Label="Loại địa chỉ">
  <RadioGroup TValue="bool?" @bind-Value="DefaultDeliveryAddress.AddressType">
    <Radio TValue="bool?" Value="true">Văn phòng</Radio>
    <Radio TValue="bool?" Value="false">Nhà riêng</Radio>
  </RadioGroup>
</FormItem>
        </Form>
    </Modal>
</div>

@code {
    private CartWithDetailsResponseDTO? cart;
    IEnumerable<CartDetailItemDTO> selectedRows;
    private string backendUrl = "";
    private bool IsApplyVoucher = false;
    private int DefaultVoucherForAllProductId = -1;
    private decimal DiscountPriceOfVoucher = 0;
    private decimal DiscountValueOfAllProduct = 0;
    private DeliveryAddress DefaultDeliveryAddress = new();
    private decimal DiscountPriceOfMembership = 0;
    private decimal DiscountPriceOfPoint = 0;
    private decimal FinalTotalAmount = 0;
    private decimal GrandTotalCount = 0;
    private bool IsUseCustomerPoint = false;
    private bool IsBuyNow = false;
    private bool OpenVoucherModal = false;
    private bool OpenDeliveryModal = false;
    private bool OpenCreateOrUpdateAddressModal = false;
    private bool IsFetched = false;
    private string CurrentRankInfoImage = "";
    private int DefaultDeliveryId = -1;
    private List<DeliveryAddress> LstDeliveryAddress = new();
    private string TxtNoteContent = "";
    private int PaymentMethod = 0;
    private bool IsDefaultExportBill = false;
    private List<Coupon> LstCouponForAllProduct = new();
    private bool UseDefaultAddress = false;

    // Models
    private ExportBillModel ExportBill = new();
    private HiddenDataModel HiddenData = new();

    protected override async Task OnInitializedAsync()
    {
        backendUrl = Configuration["ApiSettings:BaseUrl"] ?? "";
        await LoadCart();
    }

    private async Task LoadCart()
    {
        cart = await CartClient.GetCurrentCartAsync();
    }

    private async Task Increment(CartDetailItemDTO item)
    {
        await UpdateQuantity(item, item.Quantity + 1);
    }

    private async Task Decrement(CartDetailItemDTO item)
    {
        if (item.Quantity <= 1)
        {
            await RemoveItem(item.Id);
        }
        else
        {
            await UpdateQuantity(item, item.Quantity - 1);
        }
    }

    private async Task OnQuantityChange(CartDetailItemDTO item, int? newQuantity)
    {
        if (newQuantity.HasValue && newQuantity.Value >= 1 && newQuantity.Value <= 999)
        {
            await UpdateQuantity(item, newQuantity.Value);
        }
    }

    private async Task UpdateQuantity(CartDetailItemDTO item, int newQuantity)
    {
        var dto = new UpdateCartQuantityDTO { CartDetailId = item.Id, Quantity = newQuantity };
        var result = await CartClient.UpdateQuantityAsync(dto);
        if (result?.ResponseStatus == BaseStatus.Success)
        {
            item.Quantity = newQuantity;
            await LoadCart();
        }
        else
        {
            MessageService.Error(result?.Message ?? "Cập nhật số lượng thất bại");
        }
    }

    private async Task RemoveItem(Guid id)
    {
        var result = await CartClient.RemoveItemAsync(id);
        if (result?.ResponseStatus == BaseStatus.Success)
        {
            cart.Items = cart.Items.Where(x => x.Id != id).ToList();
            await LoadCart();
            MessageService.Success("Đã xóa sản phẩm khỏi giỏ hàng");
        }
        else
        {
            MessageService.Error(result?.Message ?? "Xoá sản phẩm thất bại");
        }
    }

    private decimal CalcSelectionTotal()
    {
        decimal total = 0;
        if (selectedRows != null)
        {
            total = selectedRows.Sum(i => (decimal)((i.Price - (i.Price * i.Discount / 100f)) * i.Quantity));
        }

        return total;
    }

    private async Task Checkout()
    {
        var selectedIds = selectedRows.Select(r => r.Id).ToList();
        if (selectedIds.Count == 0)
        {
            MessageService.Warning("Vui lòng chọn sản phẩm để mua");
            return;
        }

        var resp = await CartClient.CheckoutAsync(selectedIds);
        if (resp?.ResponseStatus == BaseStatus.Success)
        {
            MessageService.Success("Đặt hàng thành công");
            await LoadCart();
            if (PaymentMethod == 2)
            {
                var createPayment = new MeoMeo.Contract.DTOs.Order.CreatePaymentUrlDTO
                {
                    OrderId = resp.OrderId,
                    Amount = resp.Amount,
                    Description = $"Thanh toan don hang luc {DateTime.Now:dd/MM/yyyy HH:mm}",
                };
                var payUrl = await OrderClient.CreateVnpayPaymentUrlAsync(createPayment);
                if (!string.IsNullOrWhiteSpace(payUrl))
                {
                    Navigation.NavigateTo(payUrl, forceLoad: true);
                    return;
                }
            }
            Navigation.NavigateTo("/orders");
        }
        else
        {
            MessageService.Error(resp?.Message ?? "Đặt hàng thất bại");
        }
    }

    private void HandleRedirectToHomepage() => Navigation.NavigateTo("/");

    private async Task ShowModalDelivery()
    {
        OpenDeliveryModal = true;
        await LoadMyAddresses();
    }

    [Inject] private IDeliveryAddressClientService AddressClient { get; set; }

    private async Task LoadMyAddresses()
    {
        var items = await AddressClient.GetMyAddressesAsync();
        // map to local model for display
        LstDeliveryAddress = items.Select(i => new DeliveryAddress
        {
            AddressId = 0,
            Name = i.Name,
            Phone = i.PhoneNumber,
            FullAddress = i.Address,
        }).ToList();
    }

    private void HandleOkDelivery()
    {
        // Có thể thêm validate cơ bản ở đây nếu cần
        OpenDeliveryModal = false;
    }

    private void HandleCancelDelivery()
    {
        OpenDeliveryModal = false;
    }

    private static string FormatCurrency(decimal amount) => string.Format(System.Globalization.CultureInfo.GetCultureInfo("vi-VN"), "{0:C0}", amount);
    private static string FormatCurrency(float amount) => string.Format(System.Globalization.CultureInfo.GetCultureInfo("vi-VN"), "{0:C0}", amount);
    private static float CalcPriceAfterDiscount(float price, float discount) => discount > 100 ? price - discount : price * (1 - discount / 100f);

    public class DeliveryAddress
    {
        public int AddressId { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public string Address { get; set; } = string.Empty;
        public string FullAddress { get; set; } = string.Empty;
        public bool? AddressType { get; set; }
        public int IsDefault { get; set; }
        public Province? Province { get; set; }
        public District? District { get; set; }
        public Commune? Commune { get; set; }
    }

    public class Province
    {
        public string ProvinceName { get; set; } = string.Empty;
    }

    public class District
    {
        public string DistrictName { get; set; } = string.Empty;
    }

    public class Commune
    {
        public string CommuneName { get; set; } = string.Empty;
    }

   

    public class Coupon
    {
        public int Id { get; set; }
        public int Type { get; set; }
        public decimal Discount { get; set; }
        public decimal MaxDiscount { get; set; }
        public decimal MinOrder { get; set; }
        public DateTime FinishDate { get; set; }
        public int IsEnabled { get; set; }
        public int IsEnabledOverTurn { get; set; }
        public int TotalUse { get; set; }
    }

    public class ExportBillModel
    {
        [Required] public string TaxCode { get; set; } = "";
        [Required] public string Name { get; set; } = "";
        [Required] public string Email { get; set; } = "";
        [Required] public string Phone { get; set; } = "";
        [Required] public string Address { get; set; } = "";
        public string Note { get; set; } = "";
    }

    public class HiddenDataModel
    {
        public bool IsBuyNow { get; set; }
        public int DefaultVoucherForAllProductId { get; set; } = -1;
        public decimal DisCountValueOfAllProduct { get; set; }
        public bool IsUsePoint { get; set; }
        public int DefaultDeliveryId { get; set; } = -1;
    }

}