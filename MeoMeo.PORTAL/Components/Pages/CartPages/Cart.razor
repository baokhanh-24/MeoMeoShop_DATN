@page "/cart"
@using System.ComponentModel.DataAnnotations
@using AntDesign
@using MeoMeo.Shared.Utilities
@using Microsoft.AspNetCore.Components
@using MeoMeo.Shared.IServices
@using MeoMeo.Contract.DTOs
@using MeoMeo.Contract.Commons
@using MeoMeo.Contract.DTOs.Order
@using MeoMeo.PORTAL.Components.Pages.PaymentPages
@using MeoMeo.Domain.Commons.Enums
@using ButtonSize = AntDesign.ButtonSize
@using ButtonType = AntDesign.ButtonType
@inject ICartClientService CartClient
@inject MessageService MessageService
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@inject IOrderClientService OrderClient
@inject IVoucherClientService VoucherClient
@inject IDeliveryAddressClientService AddressClient
@inject IProvinceClientService ProvinceClient
@inject IDistrictClientService DistrictClient
@inject ICommuneClientService CommuneClient
@inject IApiCaller ApiCaller
<div class="content-background">
    <GridRow Gutter="16">
        <GridCol Span="22" Offset="1">
            <Breadcrumb Class="mb-3">
                <BreadcrumbItem>
                    <a @onclick="HandleRedirectToHomepage" class="current">
                        <Icon Type="left" />
                        Tiếp tục mua sắm
                    </a>
                </BreadcrumbItem>
            </Breadcrumb>
            @if (cart == null || cart.Items.Count == 0)
            {
                <div class="row">
                    <div class="col-12">
                        <div class="space-coverage text-center">
                            <img class="empty-cart" src="/images/products/Cart.svg" alt="" />
                            <div class="empty-text mt-4">Giỏ hàng của bạn đang trống.</div>
                            <div class="empty-text mt-1">Hãy chọn thêm sản phẩm để mua sắm nhé</div>
                            <div class="d-flex justify-content-center">
                                <Button Type="@ButtonType.Primary" Class="shopping-now mt-1"
                                    OnClick="@(() => Navigation.NavigateTo("/"))">
                                    Mua sắm ngay
                                </Button>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="col-12 col-lg-9">
                        <div class="space-coverage">
                            <Table DataSource="@cart.Items" TItem="CartDetailItemDTO" HidePagination="true"
                                RowKey="x => x.Id" @bind-SelectedRows="selectedRows">
                                <ChildContent Context="item">
                                    <Selection Type="SelectionType.Checkbox" />
                                    <Column TData="string" Title="Sản phẩm">
                                        <div class="d-flex align-items-center justify-content-between">
                                            <div class="d-flex align-items-center gap-3">
                                                <span class="prod-name">
                                                    <span class="name-elipsis">@item.ProductName | @item.Sku </span>
                                                    <div class="product-container">
                                                        <div class="size mt-1">Size: @item.SizeName</div>
                                                        <div class="color  mt-1">Màu sắc: @item.ColourName</div>
                                                    </div>
                                                </span>
                                            </div>
                                        </div>
                                    </Column>
                                    <Column TData="string" Title="Ảnh" Width="15%" Align="ColumnAlign.Center">
                                        <Image Width="100%" Height="80px" PreviewVisible="false" Class="product-img"
                                            Fallback="@(backendUrl + "/Images/fallback.jpeg")"
                                            Src="@(backendUrl + "/" + item.Thumbnail)" />
                                    </Column>
                                    <Column TData="int" Title="Số lượng" Align="ColumnAlign.Center" Width="20%">
                                        <div class="btn-change-quantity d-flex gap-2 align-items-center">
                                            <Button Type="@ButtonType.Text" OnClick="@(() => Decrement(item))">-
                                            </Button>
                                            <AntDesign.InputNumber TValue="int" @bind-Value="item.Quantity" Min="1" Max="10"
                                                OnChange="@((value) => OnQuantityChange(item, value))"
                                                Style="width: 80px; text-align: center;" />
                                            <Button Type="@ButtonType.Text" OnClick="@(() => Increment(item))">+
                                            </Button>
                                        </div>
                                    </Column>
                                    <Column TData="float" Title="Đơn giá" Align="ColumnAlign.Center" Width="15%">
                                        <div class="text-center d-flex flex-column align-items-center">
                                            <div class="discount-price">@FormatCurrency(CalcPriceAfterDiscount(item.Price,
                                                item.Discount))
                                        </div>
                                        @if (item.Discount > 0)
                                            {
                                                <div class="price">@FormatCurrency(item.Price)</div>
                                            }
                                        </div>
                                    </Column>
                                    <Column TData="int" Title="% Giảm giá" Align="ColumnAlign.Center" Width="12%">
                                        @if (item.Discount > 0)
                                        {
                                            <span class="discount-badge">-@item.Discount%</span>
                                        }
                                        else
                                        {
                                            <span>-</span>
                                        }
                                    </Column>
                                    <Column TData="decimal" Title="Thành tiền" Width="15%">
                                        @FormatCurrency(item.Quantity * CalcPriceAfterDiscount(item.Price, item.Discount))
                                    </Column>
                                    <Column TData="string" Title="Thao tác" Width="15%" Align="ColumnAlign.Right">
                                        <Button Type="@ButtonType.Text" Icon="delete" OnClick="@(() => RemoveItem(item.Id))"
                                            Class="delete-action" />
                                    </Column>
                                </ChildContent>
                            </Table>
                        </div>
                        <div class="space-coverage mt-3">
                            <div class="title">Chọn hình thức thanh toán</div>
                            <div class="d-flex justify-content-between gap-3">
                                <RadioGroup @bind-Value="SelectedPaymentMethod" TValue="int"
                                    OnChange="OnPaymentMethodChanged">
                                    <Radio Value="0" Style="@style">
                                        <div class="d-flex gap-1 justify-content-center align-items-center">
                                            <i class="fas fa-receipt"></i>
                                            <span> Thanh toán khi nhận hàng</span>
                                        </div>
                                    </Radio>
                                    <br />
                                    <Radio Value="1" Style="@style">
                                        <div class="d-flex gap-1 justify-content-center align-items-center">
                                            <i class="fas fa-qrcode"></i>
                                            <span>Qr Code</span>
                                        </div>
                                    </Radio>
                                    <br />
                                    <Radio Value="2" Style="@style">
                                        <div class="d-flex gap-1 justify-content-center align-items-center">
                                            <i class="fab fa-amazon-pay"></i>
                                            <span>VN Pay</span>
                                        </div>
                                    </Radio>
                                </RadioGroup>
                                <div class="flex-1">
                                    @if (SelectedPaymentMethod == 1)
                                    {
                                        <div class="d-flex gap-3">
                                            <img src=@QrBase64Image class='qr-image' />
                                            <div class="flex-1">
                                                <div class="info-bank row mb-3">
                                                    <div class="col-5">
                                                        <span class="left-qr-info">Số tài khoản:</span>
                                                    </div>
                                                    <div class="col-7">
                                                        <span class="right-qr-info">@AccountNumber</span>
                                                    </div>
                                                </div>
                                                <div class="info-bank row mb-3">
                                                    <div class="col-5">
                                                        <span class="left-qr-info">Ngân hàng:</span>
                                                    </div>
                                                    <div class="col-7">
                                                        <span class="right-qr-info">Vietcombank - VCB </span>
                                                    </div>
                                                </div>

                                                <div class="info-bank row mb-3">
                                                    <div class="col-5">
                                                        <span class="left-qr-info">Chủ tài khoản:</span>
                                                    </div>
                                                    <div class="col-7">
                                                        <span class="right-qr-info">BACH HONG LIEN</span>
                                                    </div>
                                                </div>
                                                <div class="info-bank row mb-3">
                                                    <div class="col-5">
                                                        <span class="left-qr-info">Nội dung chuyển khoản:</span>
                                                    </div>
                                                    <div class="col-7">
                                                        <span class="right-qr-info">@AddInfo</span>
                                                    </div>
                                                </div>
                                                <div class="info-bank row mb-3">
                                                    <div class="col-5">
                                                        <span class="left-qr-info">Số tiền:</span>
                                                    </div>
                                                    <div class="col-7">
                                                        <span class="right-qr-info total-bill">
                                                            @FormatCurrency(FinalTotalAmount)
                                                        </span>
                                                    </div>
                                                </div>
                                                <div class="info-bank row mb-3">
                                                    <div class="col-5">
                                                        <span class="left-qr-info">Lưu ý:</span>
                                                    </div>
                                                    <div class="col-7">
                                                        <span class="right-qr-info note-italic">Đơn hàng sẽ được xử lý sau khi
                                                            quản
                                                            trị viên xác nhận thanh toán. Vui lòng chuyển đúng nội dung và số
                                                            tiền
                                                            để đơn hàng được xác nhận nhanh chóng Giá trên đơn hàng chưa bao gồm
                                                            các
                                                            chi phí vận chuyển...</span>
                                                    </div>
                                                </div>
                                                <div class="info-bank row mb-3">
                                                    <div class="col-12">
                                                        @* <Checkbox checked={isPaidConfirmed} onChange={(e) => setIsPaidConfirmed(e.target.checked)}>
               <span class="txt-chk">Đã thanh toán đơn hàng</span>
               </Checkbox> *@
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-lg-3">
                        <div class="space-coverage mt-3 mt-lg-0">
                            <div class="d-flex justify-content-between">
                                <div class="title">Giao hàng đến</div>
                                <div class="option text-end" style="cursor: pointer;" @onclick="ShowModalDelivery">
                                    Thay đổi
                                </div>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <div class="fullname">@DefaultDeliveryAddress?.Name</div>
                                <div class="phonenumber text-end">@DefaultDeliveryAddress?.PhoneNumber</div>
                            </div>
                            <div class="address">@DefaultDeliveryAddress?.Address</div>
                            <div class="note-space mt-3">
                                <div class="d-flex justify-content-between mt-1 mb-1">
                                    <div class="title">Lời nhắn cho shop</div>
                                </div>
                                <div>
                                    <TextArea @bind-Value="TxtNoteContent" MaxLength="500" Rows="3"
                                        Placeholder="Ghi chú..." />
                                </div>
                            </div>
                        </div>
                        <div class="space-coverage mt-3">
                            <div class="voucher-section">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="title">Mã giảm giá</div>
                                    <Button Type="@ButtonType.Text" OnClick="ShowVoucherModal" Class="text-primary">
                                        @(SelectedVoucher != null ? "Thay đổi" : "Chọn mã")
                                    </Button>
                                </div>
                                @if (SelectedVoucher != null)
                                {
                                    <div class="voucher-applied">
                                        <div class="d-flex justify-content-between">
                                            <span class="voucher-code">@SelectedVoucher.Code</span>
                                            <Button Type="@ButtonType.Text" OnClick="RemoveVoucher" Class="text-danger p-0">
                                                <Icon Type="close" />
                                            </Button>
                                        </div>
                                        <div class="voucher-discount">Giảm @SelectedVoucher.Discount% (tối đa
                                            @FormatCurrency(SelectedVoucher.MaxDiscount))</div>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="space-coverage mt-3">
                            <div class="d-flex justify-content-between mb-3 mt-3">
                                <div class="text-left">Tổng tiền:</div>
                                <div class="text-right text-end text-original-price">@FormatCurrency(cart.TotalPrice)</div>
                            </div>
                            <Divider />
                            <div class="d-flex justify-content-between mb-3">
                                <div class="text-left">Giảm giá voucher:
                                </div>
                                <div class="text-right text-end text-success">-@FormatCurrency(VoucherDiscountAmount)</div>
                            </div>
                            <Divider />
                            <div class="d-flex justify-content-between mb-3">
                                <div class="text-left">Phí vận chuyển (GHN):</div>
                                <div class="text-right text-end">@FormatCurrency(ShippingFee)</div>
                            </div>
                            <Divider />
                            <div class="d-flex justify-content-between mb-3 mt-3">
                                <div class="text-left">Thành tiền:</div>
                                <div class="text-grand-total">@FormatCurrency(FinalTotalAmount)</div>
                            </div>
                            <Divider />
                            <Button Type="@ButtonType.Primary" Block="true" Size="@ButtonSize.Large" OnClick="Checkout"
                                Class="btn-order" Disabled="@(selectedRows == null || !selectedRows.Any())">
                                <i class="fas fa-money-bill"></i> Thanh toán
                            </Button>
                        </div>
                    </div>
                </div>
            }
        </GridCol>
    </GridRow>
    <Modal Title="Chọn địa chỉ giao hàng" Visible="@OpenDeliveryModal" OnOk="HandleOkDelivery"
        OnCancel="HandleCancelDelivery" Width="800">
        <div class="mb-3">
            <Button Type="@ButtonType.Primary" OnClick="ShowCreateAddressModal">
                <Icon Type="plus" />
                Thêm địa chỉ mới
            </Button>
        </div>
        @if (LstDeliveryAddress.Any())
        {
            <div class="address-list">
                <RadioGroup TValue="Guid" @bind-Value="SelectedAddressId" Style="width: 100%">
                    @foreach (var address in LstDeliveryAddress)
                    {
                        <div class="address-item @(address.Id == SelectedAddressId ? "selected" : "")">
                            <Radio TValue="Guid" Value="@address.Id" Class="address-radio">
                                <div class="address-content">
                                    <div class="address-info">
                                        <div class="d-flex gap-1 justify-items-center">
                                            <div class="address-name"> <i class="fas fa-user"></i> @address.Name</div>
                                            <div class=""> | </div>
                                            <div class="address-phone"><i class="fas fa-phone"></i> @address.PhoneNumber
                                            </div>
                                        </div>
                                        <div class="d-flex gap-1 justify-items-center">
                                            <div class="address-type">Văn phòng
                                            </div>
                                            <div class=""> | </div>
                                            <div class="address-detail"><i
                                                    class="fa-solid fa-location-dot"></i>@address.Address,
                                                @address.CommuneName,
                                                @address.DistrictName, @address.ProvinceName
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="address-actions">
                                    <Button Type="@ButtonType.Text" OnClick="@(() => EditAddress(address))" Class="p-0">
                                        <Icon Type="edit" />
                                    </Button>
                                    <Button Type="@ButtonType.Text" OnClick="@(() => DeleteAddress(address))"
                                        Class="p-0 text-danger">
                                        <Icon Type="delete" />
                                    </Button>
                                </div>
                            </Radio>
                        </div>
                    }
                </RadioGroup>
            </div>
        }
        else
        {
            <div class="text-center py-4">
                <p>Bạn chưa có địa chỉ giao hàng nào.</p>
                <Button Type="@ButtonType.Primary" OnClick="ShowCreateAddressModal">
                    Thêm địa chỉ đầu tiên
                </Button>
            </div>
        }
    </Modal>
    <!-- Modal thêm/sửa địa chỉ -->
    <Modal Title="@(EditingAddress.Id == Guid.Empty ? "Thêm địa chỉ mới" : "Sửa địa chỉ")"
        Visible="@OpenCreateOrUpdateAddressModal" OnOk="HandleOkAddress" OnCancel="HandleCancelAddress">
        <Form Model="@EditingAddress" LabelAlign="AntLabelAlignType.Left" LabelColSpan="6" WrapperColSpan="18">
            <FormItem Label="Họ tên" Required>
                <Input @bind-Value="EditingAddress.Name" MaxLength="255" Placeholder="Nhập họ tên..." />
            </FormItem>
            <FormItem Label="Điện thoại" Required>
                <Input @bind-Value="EditingAddress.PhoneNumber" MaxLength="12" Placeholder="SĐT..." />
            </FormItem>
            <FormItem Label="Tỉnh/Thành phố" Required>
                <Select TItem="GhnLocationItem" TItemValue="int?" @bind-Value="SelectedProvinceId"
                    Placeholder="Chọn tỉnh/thành phố..." OnSelectedItemChanged="OnProvinceChange"
                    DataSource="LstGhnProvinces" ValueName="Id" LabelName="Name">
                </Select>
            </FormItem>
            <FormItem Label="Quận/Huyện" Required>
                <Select TItem="GhnLocationItem" TItemValue="int?" @bind-Value="SelectedDistrictId"
                    Placeholder="Chọn quận/huyện..." OnSelectedItemChanged="OnDistrictChange"
                    Disabled="@(!SelectedProvinceId.HasValue)" DataSource="LstGhnDistricts" ValueName="Id"
                    LabelName="Name">
                </Select>
            </FormItem>
            <FormItem Label="Phường/Xã" Required>
                <Select TItem="GhnLocationItem" TItemValue="int?" @bind-Value="SelectedCommuneId"
                    Placeholder="Chọn phường/xã..." OnSelectedItemChanged="OnCommuneChange"
                    Disabled="@(!SelectedDistrictId.HasValue)" DataSource="LstGhnCommunes" ValueName="Id"
                    LabelName="Name">
                </Select>
            </FormItem>
            <FormItem Label="Địa chỉ chi tiết" Required>
                <Input @bind-Value="EditingAddress.Address" MaxLength="255" Placeholder="Số nhà, đường..." />
            </FormItem>
        </Form>
    </Modal>
    <!-- Modal chọn mã giảm giá -->
    <Modal Title="Chọn mã giảm giá" Visible="@OpenVoucherModal" OnOk="HandleOkVoucher" OnCancel="HandleCancelVoucher"
        Width="800">
        <div class="mb-3">
            <Input @bind-Value="VoucherSearchCode" Placeholder="Nhập mã voucher..." OnPressEnter="SearchVoucher"
                AllowClear="true" />
            <Button Type="@ButtonType.Primary" OnClick="SearchVoucher" Class="ml-2">Tìm kiếm</Button>
        </div>
        @if (AvailableVouchers.Any())
        {
            <div class="voucher-list">
                @foreach (var voucher in AvailableVouchers)
                {
                    <div class="voucher-item @(SelectedVoucher?.Id == voucher.Id ? "selected" : "")"
                        @onclick="() => SelectVoucher(voucher)">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="voucher-info">
                                <div class="voucher-code">@voucher.Code</div>
                                <div class="voucher-desc">Giảm @voucher.Discount% (tối đa @FormatCurrency(voucher.MaxDiscount))
                                </div>
                                <div class="voucher-conditions">
                                    Đơn hàng tối thiểu: @FormatCurrency(voucher.MinOrder) |
                                    HSD: @voucher.EndDate.ToString("dd/MM/yyyy")
                                </div>
                            </div>
                            <div class="voucher-status">
                                @if (voucher.Status == EVoucherStatus.Active)
                                {
                                    <Tag Color="@("green")">Có thể sử dụng</Tag>
                                }
                                else if (voucher.Status == EVoucherStatus.Upcoming)
                                {
                                    <Tag Color="@("blue")">Sắp diễn ra</Tag>
                                }
                                else
                                {
                                    <Tag Color="@("red")">Đã hết hạn</Tag>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-4">
                <p>Không tìm thấy voucher phù hợp.</p>
            </div>
        }
    </Modal>
</div>
@code {
    string style = "height:30px;line-height:30px";
    private CartWithDetailsResponseDTO? cart;
    IEnumerable
    <CartDetailItemDTO>
    selectedRows = new List
    <CartDetailItemDTO>
    ();
    private string backendUrl = "";
    private string? QrBase64Image { get; set; }
    public string? AccountNumber { get; set; } = "1014640175";
    public string? AddInfo { get; set; } = "Thanh Toan Don Hang";
    public string? BankBin { get; set; } = "970436";
    // Voucher related
    private bool OpenVoucherModal = false;
    private VoucherDTO? SelectedVoucher;
    private List
    <VoucherDTO>
    AvailableVouchers = new();
    private string VoucherSearchCode = "";
    private decimal VoucherDiscountAmount = 0;
    // Delivery address related
    private bool OpenDeliveryModal = false;
    private bool OpenCreateOrUpdateAddressModal = false;
    private DeliveryAddressDTO? DefaultDeliveryAddress;
    private List<DeliveryAddressDTO> LstDeliveryAddress = new();
    private CreateOrUpdateDeliveryAddressDTO EditingAddress = new();
    private Guid SelectedAddressId = Guid.Empty;

    // GHN Location data - using GHN master-data API
    private List<GhnLocationItem> LstGhnProvinces = new();
    private List<GhnLocationItem> LstGhnDistricts = new();
    private List<GhnLocationItem> LstGhnCommunes = new();

    // Selected GHN IDs for proper API calls
    private int? SelectedGhnProvinceId;
    private int? SelectedGhnDistrictId;
    private string? SelectedGhnWardCode;

    // Local int for UI binding (still needed for existing system)
    private int? SelectedProvinceId;
    private int? SelectedDistrictId;
    private int? SelectedCommuneId;

    // GHN Location item class for better type safety
    private class GhnLocationItem
    {
        public int Id { get; set; } = -1; // Local Int for UI binding
        public string Name { get; set; } = "";
        public int GhnProvinceId { get; set; } // GHN ProvinceID
        public int GhnDistrictId { get; set; } // GHN DistrictID
        public string? GhnWardCode { get; set; } // GHN WardCode
    }
    // Other properties
    private string TxtNoteContent = "";
    private int SelectedPaymentMethod = 0;
    private decimal FinalTotalAmount = 0;
    private decimal ShippingFee = 0;
    private string GhnToken = "";
    private int GhnShopId = 0;
    private int GhnFromDistrictId = 0;
    private string GhnFromWardCode = "";
    private int DefaultItemWeightGram = 500;
    private int DefaultLengthCm = 15;
    private int DefaultWidthCm = 15;
    private int DefaultHeightCm = 15;
    protected override async Task OnInitializedAsync()
    {
        backendUrl = Configuration["ApiSettings:BaseUrl"] ?? "";
        GhnToken = Configuration["Ghn:Token"] ?? "";
        int.TryParse(Configuration["Ghn:ShopId"], out GhnShopId);
        int.TryParse(Configuration["Ghn:FromDistrictId"], out GhnFromDistrictId);
        GhnFromWardCode = Configuration["Ghn:FromWardCode"] ?? "";
        int.TryParse(Configuration["Ghn:DefaultItemWeightGram"], out DefaultItemWeightGram);
        int.TryParse(Configuration["Ghn:DefaultLengthCm"], out DefaultLengthCm);
        int.TryParse(Configuration["Ghn:DefaultWidthCm"], out DefaultWidthCm);
        int.TryParse(Configuration["Ghn:DefaultHeightCm"], out DefaultHeightCm);
        await LoadCart();
        await LoadAvailableVouchers();
        await LoadDefaultDeliveryAddress();
        await LoadLocationData();
    }
    private async Task LoadCart()
    {
        cart = await CartClient.GetCurrentCartAsync();
        if (cart?.Items != null)
        {
            selectedRows = cart.Items.ToList();
        }
        await CalculateFinalTotalAsync();
    }
    private async Task OnPaymentMethodChanged(int value)
    {


        if (value == 1)
        {
            await FetchImageAsync();
        }
    }
    private async Task LoadAvailableVouchers()
    {
        try
        {
            var request = new GetListVoucherRequestDTO
            {
                Status = EVoucherStatus.Active,
                PageIndex = 1,
                PageSize = 100
            };
            var result = await VoucherClient.GetAllVoucherAsync(request);
            AvailableVouchers = result?.Items?.ToList() ?? new List
            <VoucherDTO>
            ();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Không thể tải danh sách voucher: {ex.Message}");
        }
    }
    private async Task FetchImageAsync()
    {
        if (string.IsNullOrEmpty(AccountNumber) || string.IsNullOrEmpty(BankBin))
            return;
        var url =
        $"https://img.vietqr.io/image/{BankBin}-{AccountNumber}-qr_only.png?amount={(int)FinalTotalAmount}&addInfo=${AddInfo}";
        try
        {
            var imageBytes = await ApiCaller.GetByteArrayAsync(url);
            QrBase64Image = $"data:image/png;base64,{Convert.ToBase64String(imageBytes)}";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching QR code: {ex.Message}");
        }
    }
    private async Task LoadDefaultDeliveryAddress()
    {
        try
        {
            LstDeliveryAddress = await AddressClient.GetMyAddressesAsync();
            if (LstDeliveryAddress.Any())
            {
                DefaultDeliveryAddress = LstDeliveryAddress.First();
                SelectedAddressId = DefaultDeliveryAddress.Id;
                SelectedProvinceId = DefaultDeliveryAddress.ProvinceId;
                SelectedDistrictId = DefaultDeliveryAddress.DistrictId;
                SelectedCommuneId = DefaultDeliveryAddress.CommuneId;
                await CalculateFinalTotalAsync();
            }
        }
        catch (Exception ex)
        {
            MessageService.Error($"Không thể tải địa chỉ giao hàng: {ex.Message}");
        }
    }
    private async Task Increment(CartDetailItemDTO item)
    {
        await UpdateQuantity(item, item.Quantity + 1);
    }
    private async Task Decrement(CartDetailItemDTO item)
    {
        if (item.Quantity <= 1)
        {
            await RemoveItem(item.Id);
        }
        else
        {
            await UpdateQuantity(item, item.Quantity - 1);
        }
    }
    private async Task OnQuantityChange(CartDetailItemDTO item, int? newQuantity)
    {
        if (newQuantity.HasValue && newQuantity.Value >= 1 && newQuantity.Value <= 999)
        {
            await UpdateQuantity(item, newQuantity.Value);
        }
    }
    private async Task UpdateQuantity(CartDetailItemDTO item, int newQuantity)
    {
        var dto = new UpdateCartQuantityDTO { CartDetailId = item.Id, Quantity = newQuantity };
        var result = await CartClient.UpdateQuantityAsync(dto);
        if (result?.ResponseStatus == BaseStatus.Success)
        {
            item.Quantity = newQuantity;
            await LoadCart();
        }
        else
        {
            MessageService.Error(result?.Message ?? "Cập nhật số lượng thất bại");
        }
    }
    private async Task RemoveItem(Guid id)
    {
        var result = await CartClient.RemoveItemAsync(id);
        if (result?.ResponseStatus == BaseStatus.Success)
        {
            await LoadCart();
            MessageService.Success("Đã xóa sản phẩm khỏi giỏ hàng");
        }
        else
        {
            MessageService.Error(result?.Message ?? "Xoá sản phẩm thất bại");
        }
    }
    private async Task CalculateFinalTotalAsync()
    {
        decimal subtotal = 0;
        if (selectedRows != null && selectedRows.Any())
        {
            subtotal = selectedRows.Sum(i => (decimal)(CalcPriceAfterDiscount(i.Price, i.Discount) * i.Quantity));
        }
        VoucherDiscountAmount = 0;
        if (SelectedVoucher != null && subtotal >= SelectedVoucher.MinOrder)
        {
            var discountPercent = (decimal)SelectedVoucher.Discount / 100m;
            VoucherDiscountAmount = Math.Min(subtotal * discountPercent, (decimal)SelectedVoucher.MaxDiscount);
        }
        await CalculateShippingFeeAsync();
        FinalTotalAmount = subtotal - VoucherDiscountAmount + ShippingFee;
        if (SelectedPaymentMethod == 1)
        {
            await FetchImageAsync();
        }
    }

    private async Task CalculateShippingFeeAsync()
    {
        try
        {
            ShippingFee = 0;
            if (DefaultDeliveryAddress == null || string.IsNullOrWhiteSpace(DefaultDeliveryAddress.CommuneName) ||
            string.IsNullOrWhiteSpace(DefaultDeliveryAddress.DistrictName))
            {
                return;
            }
            if (string.IsNullOrWhiteSpace(GhnToken) || GhnFromDistrictId == 0)
            {
                return;
            }
            var ghnBase = "https://online-gateway.ghn.vn/shiip/public-api";
            // Resolve to_district_id
            var districtReq = new HttpRequestMessage(HttpMethod.Post, $"{ghnBase}/master-data/district");
            districtReq.Headers.Add("token", GhnToken);
            districtReq.Content = new StringContent("{}", System.Text.Encoding.UTF8, "application/json");
            var districtResp = await ApiCaller.SendAsync(districtReq);
            var districtJson = await districtResp.Content.ReadAsStringAsync();
            using var doc1 = System.Text.Json.JsonDocument.Parse(districtJson);
            var districts = doc1.RootElement.GetProperty("data");
            int toDistrictId = 0;
            string targetDistrictName = DefaultDeliveryAddress.DistrictName.ToLowerInvariant();
            foreach (var d in districts.EnumerateArray())
            {
                var name = d.GetProperty("DistrictName").GetString()?.ToLowerInvariant() ?? "";
                if (name.Contains(targetDistrictName))
                {
                    toDistrictId = d.GetProperty("DistrictID").GetInt32();
                    break;
                }
            }
            if (toDistrictId == 0)
            {
                return;
            }
            // Resolve to_ward_code
            var wardReq = new HttpRequestMessage(HttpMethod.Post, $"{ghnBase}/master-data/ward");
            wardReq.Headers.Add("token", GhnToken);
            var wardBody = new { district_id = toDistrictId };
            wardReq.Content = new StringContent(System.Text.Json.JsonSerializer.Serialize(wardBody), System.Text.Encoding.UTF8,
            "application/json");
            var wardResp = await ApiCaller.SendAsync(wardReq);
            var wardJson = await wardResp.Content.ReadAsStringAsync();
            using var doc2 = System.Text.Json.JsonDocument.Parse(wardJson);
            var wards = doc2.RootElement.GetProperty("data");
            string toWardCode = "";
            string targetWardName = DefaultDeliveryAddress.CommuneName.ToLowerInvariant();
            foreach (var w in wards.EnumerateArray())
            {
                var name = w.GetProperty("WardName").GetString()?.ToLowerInvariant() ?? "";
                if (name.Contains(targetWardName))
                {
                    toWardCode = w.GetProperty("WardCode").GetString() ?? "";
                    break;
                }
            }
            if (string.IsNullOrWhiteSpace(toWardCode))
            {
                return;
            }
            // Get available services
            var servicesReq = new HttpRequestMessage(HttpMethod.Post, $"{ghnBase}/v2/shipping-order/available-services");
            servicesReq.Headers.Add("token", GhnToken);
            var servicesBody = new
            {
                shop_id = GhnShopId,
                from_district = GhnFromDistrictId,
                to_district = toDistrictId
            };
            servicesReq.Content = new StringContent(System.Text.Json.JsonSerializer.Serialize(servicesBody),
            System.Text.Encoding.UTF8, "application/json");
            var servicesResp = await ApiCaller.SendAsync(servicesReq);
            var servicesJson = await servicesResp.Content.ReadAsStringAsync();
            using var doc3 = System.Text.Json.JsonDocument.Parse(servicesJson);
            int serviceId = 0;
            if (doc3.RootElement.TryGetProperty("data", out var servicesData) && servicesData.ValueKind ==
            System.Text.Json.JsonValueKind.Array)
            {
                foreach (var s in servicesData.EnumerateArray())
                {
                    if (s.TryGetProperty("service_id", out var sid))
                    {
                        serviceId = sid.GetInt32();
                        break;
                    }
                }
            }
            if (serviceId == 0)
            {
                return;
            }
            // Compute parcel dimensions and weight
            int totalWeight = Math.Max(DefaultItemWeightGram, 100);
            if (selectedRows != null && selectedRows.Any())
            {
                totalWeight = Math.Max(200, selectedRows.Sum(x => Math.Max(DefaultItemWeightGram, 200)));
            }
            // Fee request
            var feeReq = new HttpRequestMessage(HttpMethod.Post, $"{ghnBase}/v2/shipping-order/fee");
            feeReq.Headers.Add("token", GhnToken);
            feeReq.Headers.Add("shop_id", GhnShopId.ToString());
            var feeBody = new
            {
                service_id = serviceId,
                insurance_value = (int)Math.Max(0, Math.Round((double)(cart?.TotalPrice ?? 0))),
                coupon = (string?)null,
                from_district_id = GhnFromDistrictId,
                to_district_id = toDistrictId,
                to_ward_code = toWardCode,
                height = DefaultHeightCm,
                length = DefaultLengthCm,
                weight = totalWeight,
                width = DefaultWidthCm
            };
            feeReq.Content = new StringContent(System.Text.Json.JsonSerializer.Serialize(feeBody), System.Text.Encoding.UTF8,
            "application/json");
            var feeResp = await ApiCaller.SendAsync(feeReq);
            var feeJson = await feeResp.Content.ReadAsStringAsync();
            using var doc4 = System.Text.Json.JsonDocument.Parse(feeJson);
            if (doc4.RootElement.TryGetProperty("data", out var feeData) && feeData.TryGetProperty("total", out var totalEl))
            {
                ShippingFee = totalEl.GetDecimal();
            }
        }
        catch
        {
            ShippingFee = 0;
        }
    }
    private async Task Checkout()
    {

        var voucherTxt = SelectedVoucher != null ? $" | Voucher:{SelectedVoucher.Code}" : string.Empty;
        var noteTxt = !string.IsNullOrWhiteSpace(TxtNoteContent) ? $" | Note:{TxtNoteContent}" : string.Empty;
        AddInfo = $"Đơn hàng:{"aaaa"}{voucherTxt}{noteTxt}";

        var selectedIds = selectedRows.Select(r => r.Id).ToList();
        if (selectedIds.Count == 0)
        {
            MessageService.Warning("Vui lòng chọn sản phẩm để mua");
            return;
        }
        if (SelectedAddressId == Guid.Empty)
        {
            MessageService.Warning("Vui lòng chọn địa chỉ giao hàng");
            return;
        }

        var newOrder = new CreateOrderDTO()
        {
            VoucherId = SelectedVoucher.Id,
            DeliveryAddressId = SelectedAddressId,
            PaymentMethod = (EOrderPaymentMethod)SelectedPaymentMethod,
            Note = TxtNoteContent,
            CartItems = selectedIds
        };
        var resp = await CartClient.CheckoutAsync(newOrder);
        if (resp?.ResponseStatus == BaseStatus.Success)
        {
            MessageService.Success(resp.Message);
            // Show order code for user reference
            await LoadCart();
            if (SelectedPaymentMethod == 2)
            {
                var createPayment = new CreatePaymentUrlDTO
                {
                    OrderId = resp.OrderId,
                    Amount = resp.Amount,
                    Description = $"{AddInfo} - {DateTime.Now:dd/MM/yyyy HH:mm}",
                };
                var payUrl = await OrderClient.CreateVnpayPaymentUrlAsync(createPayment);
                if (!string.IsNullOrWhiteSpace(payUrl))
                {
                    Navigation.NavigateTo(payUrl, forceLoad: true);
                    return;
                }
            }
            Navigation.NavigateTo("/orders");
        }
        else
        {
            MessageService.Error(resp?.Message ?? "Đặt hàng thất bại");
        }
    }

    // Voucher methods
    private void ShowVoucherModal()
    {
        OpenVoucherModal = true;
    }
    private async Task HandleOkVoucher()
    {
        OpenVoucherModal = false;
        await CalculateFinalTotalAsync();
    }
    private void HandleCancelVoucher()
    {
        OpenVoucherModal = false;
    }
    private async Task SelectVoucher(VoucherDTO voucher)
    {
        if (voucher.Status == EVoucherStatus.Active)
        {
            SelectedVoucher = voucher;
            OpenVoucherModal = false;
            await CalculateFinalTotalAsync();
            MessageService.Success($"Đã áp dụng voucher {voucher.Code}");
        }
        else
        {
            MessageService.Warning("Voucher này không thể sử dụng");
        }
    }
    private async Task RemoveVoucher()
    {
        SelectedVoucher = null;
        await CalculateFinalTotalAsync();
        MessageService.Success("Đã xóa voucher");
    }
    private async Task SearchVoucher()
    {
        if (!string.IsNullOrWhiteSpace(VoucherSearchCode))
        {
            var request = new GetListVoucherRequestDTO
            {
                CodeFilter = VoucherSearchCode,
                Status = EVoucherStatus.Active,
                PageIndex = 1,
                PageSize = 10
            };
            var result = await VoucherClient.GetAllVoucherAsync(request);
            AvailableVouchers = result?.Items?.ToList() ?? new List
            <VoucherDTO>
            ();
        }
        else
        {
            await LoadAvailableVouchers();
        }
    }
    // Delivery address methods
    private async Task ShowModalDelivery()
    {
        OpenDeliveryModal = true;
        await LoadMyAddresses();
    }
    private async Task LoadMyAddresses()
    {
        try
        {
            LstDeliveryAddress = await AddressClient.GetMyAddressesAsync();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Không thể tải danh sách địa chỉ: {ex.Message}");
        }
    }
    private void HandleOkDelivery()
    {
        if (SelectedAddressId != Guid.Empty)
        {
            var selectedAddress = LstDeliveryAddress.FirstOrDefault(a => a.Id == SelectedAddressId);
            if (selectedAddress != null)
            {
                DefaultDeliveryAddress = selectedAddress;
                MessageService.Success("Đã chọn địa chỉ giao hàng");
                _ = CalculateFinalTotalAsync();
            }
        }
        OpenDeliveryModal = false;
    }
    private void HandleCancelDelivery()
    {
        OpenDeliveryModal = false;
    }
    private void ShowCreateAddressModal()
    {
        EditingAddress = new CreateOrUpdateDeliveryAddressDTO();
        OpenCreateOrUpdateAddressModal = true;
        OpenDeliveryModal = false;
    }
    private async Task EditAddress(DeliveryAddressDTO address)
    {
        EditingAddress = new CreateOrUpdateDeliveryAddressDTO
        {
            Id = address.Id,
            Name = address.Name,
            PhoneNumber = address.PhoneNumber,
            Address = address.Address,
            ProvinceId = address.ProvinceId,
            DistrictId = address.DistrictId,
            CommuneId = address.CommuneId
        };
        // Load location data for editing
        if (address.ProvinceId != -1)
        {
            await LoadGhnDistricts(address.ProvinceId);
            if (address.DistrictId != -1)
            {
                await LoadGhnCommunes(address.DistrictId);
            }
        }
        OpenCreateOrUpdateAddressModal = true;
        OpenDeliveryModal = false;
    }
    private async Task DeleteAddress(DeliveryAddressDTO address)
    {
        try
        {
            var result = await AddressClient.DeleteAsync(address.Id);
            if (result)
            {
                LstDeliveryAddress.Remove(address);
                if (DefaultDeliveryAddress?.Id == address.Id)
                {
                    DefaultDeliveryAddress = LstDeliveryAddress.FirstOrDefault();
                }
                MessageService.Success("Đã xóa địa chỉ");
            }
        }
        catch (Exception ex)
        {
            MessageService.Error($"Không thể xóa địa chỉ: {ex.Message}");
        }
    }
    private async Task HandleOkAddress()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(EditingAddress.Name) ||
            string.IsNullOrWhiteSpace(EditingAddress.PhoneNumber) ||
            !SelectedProvinceId.HasValue ||
            !SelectedDistrictId.HasValue ||
            !SelectedCommuneId.HasValue ||
            string.IsNullOrWhiteSpace(EditingAddress.Address))
            {
                MessageService.Warning("Vui lòng điền đầy đủ thông tin");
                return;
            }
            EditingAddress.CommuneId = SelectedCommuneId;
            var result = await AddressClient.CreateOrUpdateAsync(EditingAddress);
            if (result.HasValue)
            {
                OpenCreateOrUpdateAddressModal = false;
                OpenDeliveryModal = true;
                await LoadMyAddresses();
                MessageService.Success(EditingAddress.Id.HasValue ? "Đã cập nhật địa chỉ" : "Đã thêm địa chỉ mới");
            }
        }
        catch (Exception ex)
        {
            MessageService.Error($"Không thể lưu địa chỉ: {ex.Message}");
        }
    }
    private void HandleCancelAddress()
    {
        OpenCreateOrUpdateAddressModal = false;
        OpenDeliveryModal = true;
    }
    // Location data methods - using GHN master-data API
    private async Task LoadLocationData()
    {
        try
        {
            await LoadGhnProvinces();
        }
        catch (Exception ex)
        {
            MessageService.Error($"Không thể tải dữ liệu địa chỉ GHN: {ex.Message}");
        }
    }

    private async Task LoadGhnProvinces()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(GhnToken))
            {
                MessageService.Warning("GHN Token chưa được cấu hình");
                return;
            }

            var ghnBase = "https://online-gateway.ghn.vn/shiip/public-api";
            var provinceReq = new HttpRequestMessage(HttpMethod.Post, $"{ghnBase}/master-data/province");
            provinceReq.Headers.Add("token", GhnToken);
            provinceReq.Content = new StringContent("{}", System.Text.Encoding.UTF8, "application/json");

            var provinceResp = await ApiCaller.SendAsync(provinceReq);
            var provinceJson = await provinceResp.Content.ReadAsStringAsync();

            using var doc = System.Text.Json.JsonDocument.Parse(provinceJson);
            if (doc.RootElement.TryGetProperty("data", out var provinceData))
            {
                LstGhnProvinces.Clear();
                foreach (var p in provinceData.EnumerateArray())
                {
                    var ghnProvinceId = p.GetProperty("ProvinceID").GetInt32();
                    var provinceName = p.GetProperty("ProvinceName").GetString() ?? "";

                    LstGhnProvinces.Add(new GhnLocationItem
                    {
                        Id = ghnProvinceId,
                        Name = provinceName,
                        GhnProvinceId = ghnProvinceId
                    });
                }

                // Prefill from EditingAddress if present
                if (EditingAddress.ProvinceId.HasValue && EditingAddress.ProvinceId.Value != -1)
                {
                    SelectedProvinceId = EditingAddress.ProvinceId;
                    // Find corresponding GHN province ID
                    var selectedProvince = LstGhnProvinces.FirstOrDefault(p => p.Id == EditingAddress.ProvinceId);
                    if (selectedProvince != null)
                    {
                        SelectedGhnProvinceId = selectedProvince.GhnProvinceId;
                        await LoadGhnDistricts(selectedProvince.GhnProvinceId);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            MessageService.Error($"Không thể tải danh sách tỉnh/thành phố GHN: {ex.Message}");
        }
    }

    private async void OnProvinceChange(GhnLocationItem province)
    {
        SelectedProvinceId = province.Id;
        EditingAddress.ProvinceId = province.Id;
        SelectedGhnProvinceId = province.GhnProvinceId;

        // Reset dependent selections
        SelectedDistrictId = null;
        SelectedCommuneId = null;
        SelectedGhnDistrictId = null;
        SelectedGhnWardCode = null;
        EditingAddress.DistrictId = null;
        EditingAddress.CommuneId = null;

        LstGhnDistricts.Clear();
        LstGhnCommunes.Clear();

        await LoadGhnDistricts(province.GhnProvinceId);
    }

    private async Task LoadGhnDistricts(int ghnProvinceId)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(GhnToken))
            {
                return;
            }

            var ghnBase = "https://online-gateway.ghn.vn/shiip/public-api";
            var districtReq = new HttpRequestMessage(HttpMethod.Post, $"{ghnBase}/master-data/district");
            districtReq.Headers.Add("token", GhnToken);

            var districtBody = new { province_id = ghnProvinceId };
            districtReq.Content = new StringContent(System.Text.Json.JsonSerializer.Serialize(districtBody),
            System.Text.Encoding.UTF8, "application/json");

            var districtResp = await ApiCaller.SendAsync(districtReq);
            var districtJson = await districtResp.Content.ReadAsStringAsync();

            using var doc = System.Text.Json.JsonDocument.Parse(districtJson);
            if (doc.RootElement.TryGetProperty("data", out var districtData))
            {
                LstGhnDistricts.Clear();
                foreach (var d in districtData.EnumerateArray())
                {
                    var ghnDistrictId = d.GetProperty("DistrictID").GetInt32();
                    var districtName = d.GetProperty("DistrictName").GetString() ?? "";

                    LstGhnDistricts.Add(new GhnLocationItem
                    {
                        Id = ghnDistrictId,
                        Name = districtName,
                        GhnDistrictId = ghnDistrictId
                    });
                }

                // Prefill from EditingAddress if present
                if (EditingAddress.DistrictId.HasValue && EditingAddress.DistrictId.Value != -1)
                {
                    SelectedDistrictId = EditingAddress.DistrictId;
                    var selectedDistrict = LstGhnDistricts.FirstOrDefault(d => d.Id == EditingAddress.DistrictId);
                    if (selectedDistrict != null)
                    {
                        SelectedGhnDistrictId = selectedDistrict.GhnDistrictId;
                        await LoadGhnCommunes(selectedDistrict.GhnDistrictId);
                    }
                }
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            MessageService.Error($"Không thể tải danh sách quận/huyện GHN: {ex.Message}");
        }
    }

    private async void OnDistrictChange(GhnLocationItem district)
    {
        SelectedDistrictId = district.Id;
        EditingAddress.DistrictId = district.Id;
        SelectedGhnDistrictId = district.GhnDistrictId;

        // Reset dependent selections
        SelectedCommuneId = null;
        SelectedGhnWardCode = null;
        EditingAddress.CommuneId = null;

        LstGhnCommunes.Clear();

        await LoadGhnCommunes(district.GhnDistrictId);
    }

    private async Task LoadGhnCommunes(int ghnDistrictId)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(GhnToken))
            {
                return;
            }

            var ghnBase = "https://online-gateway.ghn.vn/shiip/public-api";
            var communeReq = new HttpRequestMessage(HttpMethod.Post, $"{ghnBase}/master-data/ward");
            communeReq.Headers.Add("token", GhnToken);

            var communeBody = new { district_id = ghnDistrictId };
            communeReq.Content = new StringContent(System.Text.Json.JsonSerializer.Serialize(communeBody),
            System.Text.Encoding.UTF8, "application/json");

            var communeResp = await ApiCaller.SendAsync(communeReq);
            var communeJson = await communeResp.Content.ReadAsStringAsync();

            using var doc = System.Text.Json.JsonDocument.Parse(communeJson);
            if (doc.RootElement.TryGetProperty("data", out var communeData))
            {
                LstGhnCommunes.Clear();
                foreach (var c in communeData.EnumerateArray())
                {
                    var ghnWardCode = c.GetProperty("WardCode").GetString() ?? "";
                    var wardName = c.GetProperty("WardName").GetString() ?? "";

                    LstGhnCommunes.Add(new GhnLocationItem
                    {
                        Id = Convert.ToInt32(ghnWardCode),
                        Name = wardName,
                        GhnWardCode = ghnWardCode
                    });
                }

                // Prefill from EditingAddress if present
                if (EditingAddress.CommuneId.HasValue && EditingAddress.CommuneId.Value != -1)
                {
                    SelectedCommuneId = EditingAddress.CommuneId;
                    var selectedCommune = LstGhnCommunes.FirstOrDefault(c => c.Id == EditingAddress.CommuneId);
                    if (selectedCommune != null)
                    {
                        SelectedGhnWardCode = selectedCommune.GhnWardCode;
                    }
                }
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            MessageService.Error($"Không thể tải danh sách phường/xã GHN: {ex.Message}");
        }
    }

    private async void OnCommuneChange(GhnLocationItem commune)
    {
        SelectedCommuneId = commune.Id;
        EditingAddress.CommuneId = commune.Id;
        SelectedGhnWardCode = commune.GhnWardCode;
    }
    private void HandleRedirectToHomepage() => Navigation.NavigateTo("/");
    private static string FormatCurrency(decimal amount) =>
    string.Format(System.Globalization.CultureInfo.GetCultureInfo("vi-VN"), "{0:C0}", amount);
    private static string FormatCurrency(float amount) =>
    string.Format(System.Globalization.CultureInfo.GetCultureInfo("vi-VN"), "{0:C0}", amount);
    private static float CalcPriceAfterDiscount(float price, float discount) =>
    discount > 100 ? price - discount : price * (1 - discount / 100f);
}