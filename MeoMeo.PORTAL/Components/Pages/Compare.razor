@page "/so-sanh"
@using Radzen
@using Radzen.Blazor
@using MeoMeo.Contract.DTOs.Product
@using MeoMeo.Shared.IServices
@using MeoMeo.Domain.Commons.Enums
@using MeoMeo.Contract.Commons
@using ButtonSize = Radzen.ButtonSize
@inject IProductClientService ProductClient
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject IConfiguration Configuration

<div class="container padding-large">
    <div class="compare-header mb-4">
        <h2 class="text-uppercase text-dark mb-3">
            <Icon Type="swap" Class="me-2" />
            So sánh sản phẩm chi tiết
        </h2>
        <p class="text-muted">
            @if (string.IsNullOrEmpty(searchKeyword))
            {
                <span>Chọn tối đa 3 sản phẩm từ danh sách để so sánh các thông số kỹ thuật</span>
            }
            else
            {
                <span>Kết quả tìm kiếm cho "<strong>@searchKeyword</strong>"</span>
            }
            @if (!isLoadingProducts && !string.IsNullOrEmpty(errorMessage) == false)
            {
                <span class="badge bg-primary ms-2">@recentOptions.Count sản phẩm</span>
            }
        </p>
    </div>

    <!-- Product Selection -->
    <div class="product-selection mb-4">
        <!-- Search Box -->
        <div class="row mb-3">
            <div class="col-md-8">
                <div class="input-group">
                    <input type="text" 
                           class="form-control" 
                           placeholder="Tìm kiếm sản phẩm..." 
                           @bind="searchKeyword"
                           @onkeypress="@(async (e) => { if (e.Key == "Enter") await SearchProducts(); })" />
                    <RadzenButton Text="Tìm kiếm" 
                                  ButtonStyle="ButtonStyle.Primary" 
                                  Click="@SearchProducts"
                                  Disabled="@isLoadingProducts" />
                </div>
            </div>
            <div class="col-md-4">
                @if (!string.IsNullOrEmpty(searchKeyword))
                {
                    <RadzenButton Text="Xóa tìm kiếm" 
                                  ButtonStyle="ButtonStyle.Secondary" 
                                  Click="@(async () => { searchKeyword = string.Empty; await SearchProducts(); })"
                                  Disabled="@isLoadingProducts" />
                }
            </div>
        </div>
        
        <div class="row">
            <div class="col-md-8">
                @if (isLoadingProducts)
                {
                    <div class="loading-state">
                        <Spin Size="SpinSize.Default" />
                        <span class="ms-2">Đang tải danh sách sản phẩm...</span>
                    </div>
                }
                else if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-state">
                        <Icon Type="exclamation-circle" Class="text-danger me-2" />
                        <span class="text-danger">@errorMessage</span>
                        <RadzenButton Text="Thử lại" 
                                      ButtonStyle="ButtonStyle.Primary" 
                                      Size="ButtonSize.Small"
                                      Click="@LoadProductsFromBackend"
                                       />
                    </div>
                }
                else
                {
                    <Select Mode="SelectMode.Multiple"
                            Placeholder="@(string.IsNullOrEmpty(searchKeyword) ? "Chọn sản phẩm để so sánh..." : $"Kết quả tìm kiếm '{searchKeyword}'")"
                            @bind-Values="selectedProductIds"
                            TItemValue="string"
                            TItem="string"
                            OnSelectedItemsChanged="OnSelectedItemsChangedHandler"
                            Style="width: 100%;"
                            EnableSearch
                            AllowClear
                            MaxTagCount="3"
                            MaxTagTextLength="20">
                        <SelectOptions>
                            @foreach (var product in recentOptions)
                            {
                                <SelectOption TItemValue="string" TItem="string" 
                                            Value="@product.ProductId.ToString()" 
                                            Label="@($"{product.ProductName} - {product.BrandName}")" />
                            }
                        </SelectOptions>
                    </Select>
                }
            </div>
            <div class="col-md-4">
                <div class="d-flex gap-2">
                    <RadzenButton Text="So sánh" 
                                  Click="@(async () => await LoadSelection())" 
                                  Disabled="@(!selectedProductIds.Any())" 
                                  ButtonStyle="ButtonStyle.Primary"
                                  Icon="swap_horiz" />
                    <RadzenButton Text="Xóa tất cả" 
                                  ButtonStyle="ButtonStyle.Secondary" 
                                  Click="@ClearSelection"
                                  Icon="close" />
                </div>
            </div>
        </div>
    </div>

    @if (compared.Any())
    {
            <!-- Comparison Table -->
            <div class="comparison-container">
                <div class="comparison-table-wrapper">
                    <table class="comparison-table">
                        <thead>
                            <tr>
                                <th class="feature-column">Thông số</th>
                                @foreach (var product in compared)
                                {
                                        <th class="product-column">
                                            <div class="product-header">
                                                <div class="product-image">
                                                    <img src="@(string.IsNullOrEmpty(product.Thumbnail) ? "/images/products/chilli.png" : Configuration["ApiSettings:BaseUrl"] + "/" + product.Thumbnail)" 
                                                         alt="@product.Name" />
                                                </div>
                                                <div class="product-info">
                                                    <h5 class="product-name">@product.Name</h5>
                                                    <div class="product-brand">@product.BrandName</div>
                                                </div>
                                                <div class="product-actions">
                                                    <RadzenButton Text="Xem chi tiết" 
                                                                  ButtonStyle="ButtonStyle.Info" 
                                                                  Size="ButtonSize.Small"
                                                                  Click="@(() => NavigateToProduct(product.Id))" />
                                                    <RadzenButton Text="Xóa" 
                                                                  ButtonStyle="ButtonStyle.Danger" 
                                                                  Size="ButtonSize.Small"
                                                                  Icon="close"
                                                                  Click="@(() => RemoveProduct(product.Id))" />
                                                </div>
                                            </div>
                                        </th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Basic Information -->
                            <tr class="section-header">
                                <td colspan="@(compared.Count + 1)">Thông tin cơ bản</td>
                            </tr>
                        
                            <tr>
                                <td class="feature-name">Tên sản phẩm</td>
                                @foreach (var product in compared)
                                {
                                        <td class="feature-value">@product.Name</td>
                                }
                            </tr>
                        
                            <tr>
                                <td class="feature-name">Thương hiệu</td>
                                @foreach (var product in compared)
                                {
                                        <td class="feature-value">@product.BrandName</td>
                                }
                            </tr>
                        
                            <tr>
                                <td class="feature-name">Mô tả</td>
                                @foreach (var product in compared)
                                {
                                        <td class="feature-value">@(string.IsNullOrEmpty(product.Description) ? "Không có mô tả" : (product.Description.Length > 100 ? product.Description.Substring(0, 100) + "..." : product.Description))</td>
                                }
                            </tr>

                            <!-- Pricing -->
                            <tr class="section-header">
                                <td colspan="@(compared.Count + 1)">Giá cả & Khuyến mãi</td>
                            </tr>
                        
                            <tr>
                                <td class="feature-name">Giá thấp nhất</td>
                                @foreach (var product in compared)
                                {
                                        <td class="feature-value price-value">@(product.MinPrice?.ToString("C0", new System.Globalization.CultureInfo("vi-VN")) ?? "N/A")</td>
                                }
                            </tr>
                        
                            <tr>
                                <td class="feature-name">Giá cao nhất</td>
                                @foreach (var product in compared)
                                {
                                        <td class="feature-value price-value">@(product.MaxPrice?.ToString("C0", new System.Globalization.CultureInfo("vi-VN")) ?? "N/A")</td>
                                }
                            </tr>
                        
                            <tr>
                                <td class="feature-name">Giảm giá tối đa</td>
                                @foreach (var product in compared)
                                {
                                        <td class="feature-value discount-value">@(product.MaxDiscount?.ToString("0") + "%" ?? "Không có")</td>
                                }
                            </tr>

                            <!-- Product Specifications -->
                            <tr class="section-header">
                                <td colspan="@(compared.Count + 1)">Thông số kỹ thuật</td>
                            </tr>
                        
                            <tr>
                                <td class="feature-name">Màu sắc</td>
                                @foreach (var product in compared)
                                {
                                        <td class="feature-value">
                                            <div class="color-list">
                                                @foreach (var color in product.ColourNames ?? new List<string>())
                                                {
                                                        <span class="color-tag">@color</span>
                                                }
                                            </div>
                                        </td>
                                }
                            </tr>
                        
                            <tr>
                                <td class="feature-name">Kích thước</td>
                                @foreach (var product in compared)
                                {
                                        <td class="feature-value">
                                            <div class="size-list">
                                                @foreach (var size in product.SizeValues ?? new List<string>())
                                                {
                                                        <span class="size-tag">@size</span>
                                                }
                                            </div>
                                        </td>
                                }
                            </tr>
                        
                            <tr>
                                <td class="feature-name">Chất liệu</td>
                                @foreach (var product in compared)
                                {
                                        <td class="feature-value">@string.Join(", ", product.MaterialNames ?? new List<string>())</td>
                                }
                            </tr>
                        
                            <tr>
                                <td class="feature-name">Mùa</td>
                                @foreach (var product in compared)
                                {
                                        <td class="feature-value">@string.Join(", ", product.SeasonNames ?? new List<string>())</td>
                                }
                            </tr>
                        
                            <tr>
                                <td class="feature-name">Danh mục</td>
                                @foreach (var product in compared)
                                {
                                        <td class="feature-value">@string.Join(", ", product.CategoryNames ?? new List<string>())</td>
                                }
                            </tr>

                            <!-- Inventory & Sales -->
                            <tr class="section-header">
                                <td colspan="@(compared.Count + 1)">Tồn kho & Bán hàng</td>
                            </tr>
                        
                            <tr>
                                <td class="feature-name">Tổng tồn kho</td>
                                @foreach (var product in compared)
                                {
                                        <td class="feature-value stock-value">@(product.ProductVariants?.Sum(v => v.InventoryQuantity) ?? 0)</td>
                                }
                            </tr>
                        
                            <tr>
                                <td class="feature-name">Số lượng bán</td>
                                @foreach (var product in compared)
                                {
                                        <td class="feature-value sales-value">@product.SaleNumber</td>
                                }
                            </tr>
                        
                            <tr>
                                <td class="feature-name">Số lượng xem</td>
                                @foreach (var product in compared)
                                {
                                        <td class="feature-value views-value">@(product.ProductVariants?.Sum(v => v.ViewNumber ?? 0) ?? 0)</td>
                                }
                            </tr>

                            <!-- Ratings & Reviews -->
                            <tr class="section-header">
                                <td colspan="@(compared.Count + 1)">Đánh giá & Nhận xét</td>
                            </tr>
                        
                            <tr>
                                <td class="feature-name">Đánh giá trung bình</td>
                                @foreach (var product in compared)
                                {
                                        <td class="feature-value">
                                            <div class="rating-display">
                                                <div class="stars">
                                                    @for (int i = 1; i <= 5; i++)
                                                    {
                                                            <span class="star @(i <= Math.Round(product.Rating) ? "filled" : "")">★</span>
                                                    }
                                                </div>
                                                <span class="rating-text">@product.Rating.ToString("F1")/5</span>
                                            </div>
                                        </td>
                                }
                            </tr>
                        
                            <tr>
                                <td class="feature-name">Phân bố đánh giá</td>
                                @foreach (var product in compared)
                                {
                                        <td class="feature-value">
                                            <div class="rating-breakdown">
                                                @for (int i = 5; i >= 1; i--)
                                                {
                                                        var ratingCount = GetRatingCount(product, i);
                                                        <div class="rating-bar">
                                                            <span class="rating-label">@i★</span>
                                                            <div class="rating-progress">
                                                                <div class="rating-fill" style="width: @(GetRatingPercentage(product, i))%"></div>
                                                            </div>
                                                            <span class="rating-count">@ratingCount</span>
                                                        </div>
                                                }
                                            </div>
                                        </td>
                                }
                            </tr>

                            <!-- Product Variants Details -->
                            <tr class="section-header">
                                <td colspan="@(compared.Count + 1)">Chi tiết biến thể</td>
                            </tr>
                        
                            <tr>
                                <td class="feature-name">Số biến thể</td>
                                @foreach (var product in compared)
                                {
                                        <td class="feature-value">@(product.ProductVariants?.Count ?? 0)</td>
                                }
                            </tr>
                        
                            <tr>
                                <td class="feature-name">Kích thước đóng gói</td>
                                @foreach (var product in compared)
                                {
                                        <td class="feature-value">
                                            @if (product.ProductVariants?.Any() == true)
                                            {
                                                    var variant = product.ProductVariants.First();
                                                    <div class="dimensions">
                                                        <div>Dài: @variant.Length cm</div>
                                                        <div>Rộng: @variant.Width cm</div>
                                                        <div>Cao: @variant.Height cm</div>
                                                        <div>Trọng lượng: @variant.Weight g</div>
                                                    </div>
                                            }
                                            else
                                            {
                                                    <span>N/A</span>
                                            }
                                        </td>
                                }
                            </tr>
                        
                            <tr>
                                <td class="feature-name">Loại khóa</td>
                                @foreach (var product in compared)
                                {
                                        <td class="feature-value">@(product.ProductVariants?.FirstOrDefault()?.ClosureType.ToString() ?? "N/A")</td>
                                }
                            </tr>
                        
                            <tr>
                                <td class="feature-name">Cho phép trả hàng</td>
                                @foreach (var product in compared)
                                {
                                        <td class="feature-value">
                                            <span class="badge @(product.ProductVariants?.FirstOrDefault()?.AllowReturn == true ? "badge-success" : "badge-danger")">
                                                @(product.ProductVariants?.FirstOrDefault()?.AllowReturn == true ? "Có" : "Không")
                                            </span>
                                        </td>
                                }
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
    }
    else
    {
            <!-- Empty State -->
            <div class="empty-state">
                <div class="empty-icon">
                    <Icon Type="swap"  />
                </div>
                <h4>Chưa có sản phẩm nào để so sánh</h4>
                <p>Hãy chọn ít nhất 2 sản phẩm từ danh sách để bắt đầu so sánh</p>
            </div>
    }
</div>

@code {
    private List<ProductSearchResponseDTO> recentOptions = new();
    private IEnumerable<string> selectedProductIds = new List<string>();
    private List<ProductResponseDTO> compared = new();
    private bool isLoadingProducts = true;
    private string errorMessage = string.Empty;
    private string searchKeyword = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductsFromBackend();
    }

    private async Task SearchProducts()
    {
        await LoadProductsFromBackend();
    }

    private async Task LoadProductsFromBackend()
    {
        try
        {
            isLoadingProducts = true;
            errorMessage = string.Empty;
            StateHasChanged();

            var request = new ProductSearchRequestDTO
            {
                PageIndex = 1,
                PageSize = Int32.MaxValue, 
                SearchKeyword = string.IsNullOrWhiteSpace(searchKeyword) ? null : searchKeyword,
            };

            var result = await ProductClient.SearchProductsAsync(request);
            if (result?.Items != null)
            {
                recentOptions = result.Items.ToList();
            }
            else
            {
                recentOptions = new List<ProductSearchResponseDTO>();
                errorMessage = "Không có sản phẩm nào để so sánh";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải danh sách sản phẩm: {ex.Message}";
            recentOptions = new List<ProductSearchResponseDTO>();
        }
        finally
        {
            isLoadingProducts = false;
            StateHasChanged();
        }
    }

    private async Task LoadSelection()
    {
        var selectedIds = selectedProductIds?.Select(x => Guid.Parse(x)).ToList() ?? new List<Guid>();
        
        if (selectedIds.Count > 3)
        {
            selectedIds = selectedIds.Take(3).ToList();
            selectedProductIds = selectedIds.Select(x => x.ToString()).ToList();
        }
        
        if (!selectedIds.Any()) return;
        compared = await ProductClient.GetByIdsAsync(selectedIds);
    }

    private void OnSelectedItemsChangedHandler(IEnumerable<string> values)
    {
        if (values != null)
        {
            var selectedCount = values.Count();
            if (selectedCount > 3)
            {
                // Limit to 3 products
                selectedProductIds = values.Take(3);
            }
            else
            {
                selectedProductIds = values;
            }
            StateHasChanged();
        }
    }

    private void ClearSelection()
    {
        selectedProductIds = new List<string>();
        compared.Clear();
        StateHasChanged();
    }

    private void NavigateToProduct(Guid productId)
    {
        Nav.NavigateTo($"/san-pham/{productId}");
    }

    private void RemoveProduct(Guid productId)
    {
        var productIdString = productId.ToString();
        selectedProductIds = selectedProductIds.Where(x => x != productIdString).ToList();
        compared.RemoveAll(p => p.Id == productId);
        StateHasChanged();
    }

    private int GetRatingCount(ProductResponseDTO product, int rating)
    {
        return rating switch
        {
            1 => product.Rating1,
            2 => product.Rating2,
            3 => product.Rating3,
            4 => product.Rating4,
            5 => product.Rating5,
            _ => 0
        };
    }

    private double GetRatingPercentage(ProductResponseDTO product, int rating)
    {
        var totalRatings = product.Rating1 + product.Rating2 + product.Rating3 + product.Rating4 + product.Rating5;
        if (totalRatings == 0) return 0;
        
        var ratingCount = GetRatingCount(product, rating);
        return (double)ratingCount / totalRatings * 100;
    }
}
