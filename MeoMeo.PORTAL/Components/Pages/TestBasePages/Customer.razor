@page "/san-pham"
@using AntDesign
@using MeoMeo.Contract.DTOs.Product
@using MeoMeo.PORTAL.Components.Pages.ProductCard
@using MeoMeo.Shared.IServices
@inject IProductClientService ProductClientService

<GridRow Class="container-grid" Gutter="16">
    <GridCol Span="24">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h3 class="mb-0">Danh sách sản phẩm</h3>
            <Space>
                <Switch @bind-Checked="IsGridSelected" CheckedChildren="Lưới" UnCheckedChildren="Danh sách" />
            </Space>
        </div>
        <div class="d-flex justify-content-between align-items-center mb-3 gap-2">
            <div style="max-width: 360px; width: 100%">
                <Search Placeholder="Tìm theo tên sản phẩm" EnterButton="@("Tìm")" @bind-Value="filter.NameFilter"
                    OnSearch="OnSearch" />
            </div>
        </div>

        @if (isLoading)
        {
            <Spin Size="SpinSize.Large" />
        }
        else if (products is null || products.Count == 0)
        {
            <div class="text-center text-muted py-5">Không có sản phẩm</div>
        }
        else
        {
            <ProductCard LstProduct="@products" IsGridSelected="@IsGridSelected" />

            <div class="mt-4 d-flex justify-content-center">
                <Pagination Total="@totalRecords" PageSize="@filter.PageSize" Current="@filter.PageIndex"
                    OnChange="OnPageChanged" />
            </div>
        }
    </GridCol>
</GridRow>

@code {
    private List<ProductResponseDTO> products = new();
    private bool isLoading = false;
    private bool IsGridSelected = true;

    private GetListProductRequestDTO filter = new()
    {
        PageIndex = 1,
        PageSize = 12
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync();
    }

    private async Task LoadProductsAsync()
    {
        try
        {
            isLoading = true;
            filter.NameFilter = filter.NameFilter?.Trim();
            var response = await ProductClientService.GetAllProductAsync(filter);
            products = response.Items ?? new List<ProductResponseDTO>();
            totalRecords = response.TotalRecords;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnPageChanged(PaginationEventArgs args)
    {
        filter.PageIndex = args.Page;
        filter.PageSize = args.PageSize;
        await LoadProductsAsync();
    }

    private async Task OnSearch(string _)
    {
        filter.PageIndex = 1;
        await LoadProductsAsync();
    }

    private int totalRecords { get; set; }
}