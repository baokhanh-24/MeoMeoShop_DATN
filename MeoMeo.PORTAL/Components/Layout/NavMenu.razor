@using ButtonType = AntDesign.ButtonType
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject MeoMeo.Shared.IServices.ICategoryClientService CategoryClientService
@inject MeoMeo.Shared.IServices.IProductClientService ProductClientService
@inject MeoMeo.Shared.IServices.ICartStateService CartStateService
@inject MeoMeo.Shared.IServices.ICartClientService CartClientService
@inject IConfiguration Configuration
@using MeoMeo.Contract.DTOs.Product
@using MeoMeo.PORTAL.Components.Pages.ProductCard

<header id="header" class="site-header fixed-top">
    <GridRow Class="bg-header-root">
        <GridCol Span="22" Offset="1">
            <nav id="header-nav" class="navbar navbar-expand-lg ">
                <div class="container-fluid d-flex justify-content-between align-items-center ">
                    <div>
                        <NavLink class="navbar-brand" href="" Match="NavLinkMatch.All">
                            <img src="images/logo-nike.png" class="logo">
                        </NavLink>
                        <button class="navbar-toggler d-flex justify-content-center d-lg-none order-3 p-2" type="button"
                            data-bs-toggle="offcanvas" data-bs-target="#bdNavbar" aria-controls="bdNavbar"
                            aria-expanded="false" aria-label="Toggle navigation">
                            <svg class="navbar-icon">
                                <use xlink:href="#navbar-icon"></use>
                            </svg>
                        </button>
                    </div>
                    <div class="" tabindex="-1" id="bdNavbar" aria-labelledby="bdNavbarOffcanvasLabel">
                        <div class="offcanvas-header px-4 pb-0">
                            <a class="navbar-brand" asp-controller="Home" asp-action="Index">
                                <img src="images/logo-nike.png" class="logo">
                            </a>
                            <button type="button" class="btn-close btn-close-black" data-bs-dismiss="offcanvas"
                                aria-label="Close" data-bs-target="#bdNavbar"></button>
                        </div>
                        <div class="offcanvas-body">
                            <ul id="navbar"
                                class="navbar-nav text-uppercase justify-content-end align-items-center flex-grow-1 pe-3">
                                <span @onclick="() => NavigateToPage(0)" class="me-4 custom-link">Trang Chủ</span>
                                <span @onclick="() => NavigateToPage(3)" class="me-4 custom-link">Sản Phẩm</span>
                                <span @onclick="() => NavigateToPage(5)" class="me-4 custom-link">Giảm giá</span>
                                <span @onclick="() => NavigateToPage(6)" class="me-4 custom-link">Bài viết</span>
                                <span @onclick="() => NavigateToPage(7)" class="me-4 custom-link">Chính sách bảo
                                    hành</span>

                            </ul>

                        </div>
                    </div>

                    <div class="user-items d-flex">
                        <Button Type="@ButtonType.Text" Class="search-button ">
                            <svg class="search w-24 h-24">
                                <use xlink:href="#search"></use>
                            </svg>
                        </Button>

                        <Button Type="@ButtonType.Link" @onclick="() => NaViToCart()"
                            Class="cart-button position-relative">
                            <svg class="cart w-24 h-24">
                                <use xlink:href="#cart"></use>
                            </svg>
                            @if (cartItemCount > 0)
                            {
                                <span class="cart-badge">@cartItemCount</span>
                            }
                        </Button>
                        <UserMenu />
                    </div>
                    <div>
                        <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                            <symbol id="search" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">
                                <title>Search</title>
                                <path fill="currentColor"
                                    d="M19 3C13.488 3 9 7.488 9 13c0 2.395.84 4.59 2.25 6.313L3.281 27.28l1.439 1.44l7.968-7.969A9.922 9.922 0 0 0 19 23c5.512 0 10-4.488 10-10S24.512 3 19 3zm0 2c4.43 0 8 3.57 8 8s-3.57 8-8 8s-8-3.57-8-8s3.57-8 8-8z" />
                            </symbol>
                            <symbol xmlns="http://www.w3.org/2000/svg" id="user" viewBox="0 0 16 16">
                                <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3Zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z" />
                            </symbol>
                            <symbol xmlns="http://www.w3.org/2000/svg" id="cart" viewBox="0 0 16 16">
                                <path
                                    d="M0 1.5A.5.5 0 0 1 .5 1H2a.5.5 0 0 1 .485.379L2.89 3H14.5a.5.5 0 0 1 .491.592l-1.5 8A.5.5 0 0 1 13 12H4a.5.5 0 0 1-.491-.408L2.01 3.607 1.61 2H.5a.5.5 0 0 1-.5-.5zM5 12a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm7 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm-7 1a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm7 0a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
                            </symbol>
                            <symbol xmlns="http://www.w3.org/2000/svg" id="chevron-left" viewBox="0 0 16 16">
                                <path fill-rule="evenodd"
                                    d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z" />
                            </symbol>
                            <symbol xmlns="http://www.w3.org/2000/svg" id="chevron-right" viewBox="0 0 16 16">
                                <path fill-rule="evenodd"
                                    d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z" />
                            </symbol>
                        </svg>
                        <div class="search-popup">
                            <div class="search-popup-container">
                                <form role="search" method="get" class="search-form" action="">
                                    <input type="search" id="search-form" class="search-field"
                                        placeholder="Type and press enter" value="" name="s" />
                                    <button type="submit" class="search-submit">
                                        <svg class="search">
                                            <use xlink:href="#search"></use>
                                        </svg>
                                    </button>
                                </form>
                                <h5 class="cat-list-title">Browse Categories</h5>
                                <ul class="cat-list">
                                    <li class="cat-list-item"><a href="#" title="Mobile Phones">Mobile Phones</a></li>
                                    <li class="cat-list-item"><a href="#" title="Smart Watches">Smart Watches</a></li>
                                    <li class="cat-list-item"><a href="#" title="Headphones">Headphones</a></li>
                                    <li class="cat-list-item"><a href="#" title="Accessories">Accessories</a></li>
                                    <li class="cat-list-item"><a href="#" title="Monitors">Monitors</a></li>
                                    <li class="cat-list-item"><a href="#" title="Speakers">Speakers</a></li>
                                    <li class="cat-list-item"><a href="#" title="Memory Cards">Memory Cards</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </nav>

        </GridCol>
    </GridRow>
    <GridRow Class="modal-category">
        <GridCol Span="22" Offset="1">
            <div class="d-flex justify-content-center">
                <Menu Mode="MenuMode.Horizontal" Class="category-menu">
                    @if (categories.Any())
                    {
                        @foreach (var c in visibleCategories)
                        {
                            <div class="category-submenu" @onmouseenter="@(() => OnCategoryHover(c.Id))"
                                @onmouseleave="@(() => OnCategoryLeave())">
                                <SubMenu Title="@c.Name" OnTitleClick="@(() => OnCategoryClick(c.Id))">
                                    <div class="category-dropdown "
                                        style="display: @(hoveredCategory == c.Id ? "block" : "none")"
                                        @onmouseenter="@(() => OnCategoryHover(c.Id))"
                                        @onmouseleave="@(() => OnCategoryLeave())">
                                        <div class="category-products">
                                            @if (hoveredCategoryProducts.ContainsKey(c.Id))
                                            {
                                                <ProductCard LstProduct="hoveredCategoryProducts[c.Id]" IsGridSelected="true" />
                                            }
                                            else
                                            {
                                                <div class="loading-products">Đang tải...</div>
                                            }
                                        </div>
                                        <div class="view-all-link">
                                            <a href="@($"/Shop?categoryId={c.Id}")">Xem tất cả sản phẩm</a>
                                        </div>
                                    </div>
                                </SubMenu>
                            </div>
                        }
                        @if (overflowCategories.Any())
                        {
                            <SubMenu Title="Khác">
                                @foreach (var c in overflowCategories)
                                {
                                    <MenuItem Key="@c.Id.ToString()" Title="@c.Name" OnClick="@(() => OnCategoryClick(c.Id))" />
                                }
                            </SubMenu>
                        }
                    }
                </Menu>
            </div>

        </GridCol>
    </GridRow>
</header>
@code {
    private IJSObjectReference? _module;
    private List<MeoMeo.Domain.Entities.Category> categories = new();
    private List<MeoMeo.Domain.Entities.Category> visibleCategories = new();
    private List<MeoMeo.Domain.Entities.Category> overflowCategories = new();
    private Dictionary<Guid, List<ProductResponseDTO>> hoveredCategoryProducts = new();
    private Guid? hoveredCategory = null;
    private int cartItemCount = 0;
    private bool isSubscribed = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _module = await JS.InvokeAsync
                <IJSObjectReference>
                ("import", "/js/site.js");
                await _module.InvokeVoidAsync("searchPopup");
                await _module.InvokeVoidAsync("initProductQty");

                await LoadCategories();
                SplitCategories();
                await LoadCartCount();

                // Subscribe to cart count changes
                if (!isSubscribed)
                {
                    CartStateService.OnCartCountChanged += OnCartCountChanged;
                    isSubscribed = true;
                }

            }
            catch (JSDisconnectedException exception)
            {
                Console.WriteLine(exception.Message);
            }
        }
    }



    private void NaViToCart()
    {
        Navigation.NavigateTo("/cart");
    }

    private async Task LoadCartCount()
    {
        try
        {
            var cart = await CartClientService.GetCurrentCartAsync();
            if (cart?.Items != null)
            {
                cartItemCount = cart.Items.Count; // Đếm số bản ghi, không phải tổng số lượng
                CartStateService.UpdateCartCount(cartItemCount);
            }
        }
        catch
        {
            cartItemCount = 0;
        }
    }

    private void OnCartCountChanged(int newCount)
    {
        cartItemCount = newCount;
        InvokeAsync(StateHasChanged);
    }
    private async Task LoadCategories()
    {
        try
        {
            var data = await CategoryClientService.GetAllCategoriesAsync();
            categories = data?.ToList() ?? new();

            // Load sản phẩm cho header ngay khi load categories
            await LoadHeaderProducts();
        }
        catch { categories = new(); }
    }

    private async Task LoadHeaderProducts()
    {
        try
        {
            hoveredCategoryProducts = await ProductClientService.GetHeaderProductsAsync();
        }
        catch
        {
            hoveredCategoryProducts = new Dictionary<Guid, List<ProductResponseDTO>>();
        }
    }
    private void SplitCategories()
    {
        var maxVisible = 5;
        visibleCategories = categories.Take(maxVisible).ToList();
        overflowCategories = categories.Skip(maxVisible).ToList();
        StateHasChanged();
    }
    private void OnCategoryClick(Guid id)
    {
        Navigation.NavigateTo($"/Shop?categoryId={id}");
    }

    private void OnCategoryHover(Guid categoryId)
    {
        hoveredCategory = categoryId;
        StateHasChanged();
    }

    private async Task OnCategoryLeave()
    {
        await Task.Delay(100); // Thêm độ trễ để tránh việc menu biến mất quá nhanh khi di chuột
        hoveredCategory = null;
        StateHasChanged();
    }

    private void NavigateToPage(int page)
    {
        switch (page)
        {
            case 0:
                Navigation.NavigateTo("/");
                break;
            case 1:
                Navigation.NavigateTo("/manage-customer");
                break;
            case 2:
                Navigation.NavigateTo("/#product");
                break;
            case 3:
                Navigation.NavigateTo("/#product");
                break;
            case 4:
                Navigation.NavigateTo("/#product");
                break;
            case 5:
                Navigation.NavigateTo("/#yearly-sale");
                break;
            case 6:
                Navigation.NavigateTo("/#latest-blog");
                break;
            case 7:
                Navigation.NavigateTo("/#");
                break;
            default:
                Navigation.NavigateTo("/");
                break;
        }
    }
}